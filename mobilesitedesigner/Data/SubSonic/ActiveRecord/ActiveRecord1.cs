


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data;
using SubSonic.DataProviders;
using SubSonic.Extensions;
using System.Linq.Expressions;
using SubSonic.Schema;
using System.Collections;
using SubSonic;
using SubSonic.Repository;
using System.ComponentModel;
using System.Data.Common;

namespace SubSonic.POCOS.DB
{
    
    
    /// <summary>
    /// A class which represents the TBL_Patient_Reference table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Patient_Reference: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Patient_Reference> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Patient_Reference>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Patient_Reference> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Patient_Reference item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Patient_Reference item=new TBL_Patient_Reference();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Patient_Reference> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Patient_Reference(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Patient_Reference.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Patient_Reference>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Patient_Reference(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Patient_Reference(Expression<Func<TBL_Patient_Reference, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Patient_Reference> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Patient_Reference> _repo;
            
            if(db.TestMode){
                TBL_Patient_Reference.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Patient_Reference>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Patient_Reference> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Patient_Reference SingleOrDefault(Expression<Func<TBL_Patient_Reference, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Patient_Reference single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Patient_Reference SingleOrDefault(Expression<Func<TBL_Patient_Reference, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Patient_Reference single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Patient_Reference, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Patient_Reference, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Patient_Reference> Find(Expression<Func<TBL_Patient_Reference, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Patient_Reference> Find(Expression<Func<TBL_Patient_Reference, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Patient_Reference> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Patient_Reference> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Patient_Reference> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Patient_Reference> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Patient_Reference> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Patient_Reference> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ReferenceId";
        }

        public object KeyValue()
        {
            return this.ReferenceId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ReferenceNumber.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Patient_Reference)){
                TBL_Patient_Reference compare=(TBL_Patient_Reference)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.ReferenceId;
        }
        
        public string DescriptorValue()
        {
                            return this.ReferenceNumber.ToString();
                    }

        public string DescriptorColumn() {
            return "ReferenceNumber";
        }
        public static string GetKeyColumn()
        {
            return "ReferenceId";
        }        
        public static string GetDescriptorColumn()
        {
            return "ReferenceNumber";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _ReferenceId;
        public int ReferenceId
        {
            get { return _ReferenceId; }
            set
            {
                if(_ReferenceId!=value){
                    _ReferenceId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ReferenceId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _PatientId;
        public int? PatientId
        {
            get { return _PatientId; }
            set
            {
                if(_PatientId!=value){
                    _PatientId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PatientId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _OrganizationId;
        public int? OrganizationId
        {
            get { return _OrganizationId; }
            set
            {
                if(_OrganizationId!=value){
                    _OrganizationId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrganizationId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ReferenceNumber;
        public string ReferenceNumber
        {
            get { return _ReferenceNumber; }
            set
            {
                if(_ReferenceNumber!=value){
                    _ReferenceNumber=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ReferenceNumber");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Patient_Reference, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_Job_Location table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Job_Location: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Job_Location> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Job_Location>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Job_Location> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Job_Location item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Job_Location item=new TBL_Job_Location();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Job_Location> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Job_Location(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Job_Location.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Job_Location>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Job_Location(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Job_Location(Expression<Func<TBL_Job_Location, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Job_Location> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Job_Location> _repo;
            
            if(db.TestMode){
                TBL_Job_Location.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Job_Location>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Job_Location> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Job_Location SingleOrDefault(Expression<Func<TBL_Job_Location, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Job_Location single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Job_Location SingleOrDefault(Expression<Func<TBL_Job_Location, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Job_Location single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Job_Location, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Job_Location, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Job_Location> Find(Expression<Func<TBL_Job_Location, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Job_Location> Find(Expression<Func<TBL_Job_Location, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Job_Location> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Job_Location> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Job_Location> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Job_Location> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Job_Location> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Job_Location> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Lid";
        }

        public object KeyValue()
        {
            return this.Lid;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.WhoCreated.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Job_Location)){
                TBL_Job_Location compare=(TBL_Job_Location)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Lid;
        }
        
        public string DescriptorValue()
        {
                            return this.WhoCreated.ToString();
                    }

        public string DescriptorColumn() {
            return "WhoCreated";
        }
        public static string GetKeyColumn()
        {
            return "Lid";
        }        
        public static string GetDescriptorColumn()
        {
            return "WhoCreated";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _Lid;
        public int Lid
        {
            get { return _Lid; }
            set
            {
                if(_Lid!=value){
                    _Lid=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Lid");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _CountryId;
        public int? CountryId
        {
            get { return _CountryId; }
            set
            {
                if(_CountryId!=value){
                    _CountryId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CountryId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _StateId;
        public int? StateId
        {
            get { return _StateId; }
            set
            {
                if(_StateId!=value){
                    _StateId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StateId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _CityId;
        public int? CityId
        {
            get { return _CityId; }
            set
            {
                if(_CityId!=value){
                    _CityId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CityId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _Visibility;
        public bool? Visibility
        {
            get { return _Visibility; }
            set
            {
                if(_Visibility!=value){
                    _Visibility=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Visibility");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _ClientId;
        public int? ClientId
        {
            get { return _ClientId; }
            set
            {
                if(_ClientId!=value){
                    _ClientId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ClientId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreatedDate;
        public DateTime? CreatedDate
        {
            get { return _CreatedDate; }
            set
            {
                if(_CreatedDate!=value){
                    _CreatedDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _UpdatedDate;
        public DateTime? UpdatedDate
        {
            get { return _UpdatedDate; }
            set
            {
                if(_UpdatedDate!=value){
                    _UpdatedDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UpdatedDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _WhoCreated;
        public string WhoCreated
        {
            get { return _WhoCreated; }
            set
            {
                if(_WhoCreated!=value){
                    _WhoCreated=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="WhoCreated");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _WhoUpdated;
        public string WhoUpdated
        {
            get { return _WhoUpdated; }
            set
            {
                if(_WhoUpdated!=value){
                    _WhoUpdated=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="WhoUpdated");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Job_Location, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_Master_Building table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Master_Building: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Master_Building> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Master_Building>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Master_Building> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Master_Building item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Master_Building item=new TBL_Master_Building();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Master_Building> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Master_Building(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Master_Building.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Master_Building>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Master_Building(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Master_Building(Expression<Func<TBL_Master_Building, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Master_Building> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Master_Building> _repo;
            
            if(db.TestMode){
                TBL_Master_Building.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Master_Building>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Master_Building> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Master_Building SingleOrDefault(Expression<Func<TBL_Master_Building, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Master_Building single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Master_Building SingleOrDefault(Expression<Func<TBL_Master_Building, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Master_Building single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Master_Building, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Master_Building, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Master_Building> Find(Expression<Func<TBL_Master_Building, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Master_Building> Find(Expression<Func<TBL_Master_Building, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Master_Building> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Master_Building> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Master_Building> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Master_Building> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Master_Building> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Master_Building> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Name.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Master_Building)){
                TBL_Master_Building compare=(TBL_Master_Building)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Name.ToString();
                    }

        public string DescriptorColumn() {
            return "Name";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _OrganizationId;
        public int? OrganizationId
        {
            get { return _OrganizationId; }
            set
            {
                if(_OrganizationId!=value){
                    _OrganizationId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrganizationId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreatedOn;
        public DateTime? CreatedOn
        {
            get { return _CreatedOn; }
            set
            {
                if(_CreatedOn!=value){
                    _CreatedOn=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOn");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _ModifiedOn;
        public DateTime? ModifiedOn
        {
            get { return _ModifiedOn; }
            set
            {
                if(_ModifiedOn!=value){
                    _ModifiedOn=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ModifiedOn");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsDeleted;
        public bool? IsDeleted
        {
            get { return _IsDeleted; }
            set
            {
                if(_IsDeleted!=value){
                    _IsDeleted=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsDeleted");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if (!_dirtyColumns.Any(x => x.Name.ToLower() == "modifiedon")) {
               this.ModifiedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            }            
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            this.ModifiedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            this.CreatedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            this.ModifiedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                         
             this.IsDeleted=true;
            _repo.Update(this,provider);
                
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Master_Building, bool>> expression) {
            var repo = GetRepo();
            
            
            List<TBL_Master_Building> items=repo.GetAll().Where(expression).ToList();
            items.ForEach(x=>x.IsDeleted=true);
            repo.Update(items);
            
        }

                
        public static void Destroy(Func<TBL_Master_Building, bool> expression) {
            var repo = GetRepo();
            repo.Delete(expression);
        }
        
        public static void Destroy(object key) {
            var repo = GetRepo();
            repo.Delete(key);
        }
        
        public static void Destroy(object key, IDataProvider provider) {
        
            var repo = GetRepo();
            repo.Delete(key,provider);
            
        }        
        
        public void Destroy() {
            _repo.Delete(KeyValue());
        }        
        public void Destroy(IDataProvider provider) {
            _repo.Delete(KeyValue(), provider);
        }         
        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_Master_SymptomGroup table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Master_SymptomGroup: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Master_SymptomGroup> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Master_SymptomGroup>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Master_SymptomGroup> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Master_SymptomGroup item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Master_SymptomGroup item=new TBL_Master_SymptomGroup();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Master_SymptomGroup> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Master_SymptomGroup(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Master_SymptomGroup.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Master_SymptomGroup>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Master_SymptomGroup(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Master_SymptomGroup(Expression<Func<TBL_Master_SymptomGroup, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Master_SymptomGroup> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Master_SymptomGroup> _repo;
            
            if(db.TestMode){
                TBL_Master_SymptomGroup.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Master_SymptomGroup>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Master_SymptomGroup> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Master_SymptomGroup SingleOrDefault(Expression<Func<TBL_Master_SymptomGroup, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Master_SymptomGroup single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Master_SymptomGroup SingleOrDefault(Expression<Func<TBL_Master_SymptomGroup, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Master_SymptomGroup single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Master_SymptomGroup, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Master_SymptomGroup, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Master_SymptomGroup> Find(Expression<Func<TBL_Master_SymptomGroup, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Master_SymptomGroup> Find(Expression<Func<TBL_Master_SymptomGroup, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Master_SymptomGroup> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Master_SymptomGroup> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Master_SymptomGroup> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Master_SymptomGroup> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Master_SymptomGroup> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Master_SymptomGroup> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "SymptomGroupId";
        }

        public object KeyValue()
        {
            return this.SymptomGroupId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.SymptomGroup.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Master_SymptomGroup)){
                TBL_Master_SymptomGroup compare=(TBL_Master_SymptomGroup)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.SymptomGroupId;
        }
        
        public string DescriptorValue()
        {
                            return this.SymptomGroup.ToString();
                    }

        public string DescriptorColumn() {
            return "SymptomGroup";
        }
        public static string GetKeyColumn()
        {
            return "SymptomGroupId";
        }        
        public static string GetDescriptorColumn()
        {
            return "SymptomGroup";
        }
        
        #region ' Foreign Keys '
        public IQueryable<TBL_Master_Symptom> TBL_Master_Symptoms
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_Master_Symptom.GetRepo();
                  return from items in repo.GetAll()
                       where items.SymptomGroupId == _SymptomGroupId
                       select items;
            }
        }

        #endregion
        

        int _SymptomGroupId;
        public int SymptomGroupId
        {
            get { return _SymptomGroupId; }
            set
            {
                if(_SymptomGroupId!=value){
                    _SymptomGroupId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SymptomGroupId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _SymptomGroup;
        public string SymptomGroup
        {
            get { return _SymptomGroup; }
            set
            {
                if(_SymptomGroup!=value){
                    _SymptomGroup=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SymptomGroup");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Description;
        public string Description
        {
            get { return _Description; }
            set
            {
                if(_Description!=value){
                    _Description=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Description");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _RequestedBy;
        public int? RequestedBy
        {
            get { return _RequestedBy; }
            set
            {
                if(_RequestedBy!=value){
                    _RequestedBy=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RequestedBy");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsApproved;
        public bool? IsApproved
        {
            get { return _IsApproved; }
            set
            {
                if(_IsApproved!=value){
                    _IsApproved=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsApproved");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreatedOn;
        public DateTime? CreatedOn
        {
            get { return _CreatedOn; }
            set
            {
                if(_CreatedOn!=value){
                    _CreatedOn=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOn");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _ModifiedOn;
        public DateTime? ModifiedOn
        {
            get { return _ModifiedOn; }
            set
            {
                if(_ModifiedOn!=value){
                    _ModifiedOn=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ModifiedOn");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsDeleted;
        public bool? IsDeleted
        {
            get { return _IsDeleted; }
            set
            {
                if(_IsDeleted!=value){
                    _IsDeleted=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsDeleted");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if (!_dirtyColumns.Any(x => x.Name.ToLower() == "modifiedon")) {
               this.ModifiedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            }            
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            this.ModifiedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            this.CreatedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            this.ModifiedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                         
             this.IsDeleted=true;
            _repo.Update(this,provider);
                
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Master_SymptomGroup, bool>> expression) {
            var repo = GetRepo();
            
            
            List<TBL_Master_SymptomGroup> items=repo.GetAll().Where(expression).ToList();
            items.ForEach(x=>x.IsDeleted=true);
            repo.Update(items);
            
        }

                
        public static void Destroy(Func<TBL_Master_SymptomGroup, bool> expression) {
            var repo = GetRepo();
            repo.Delete(expression);
        }
        
        public static void Destroy(object key) {
            var repo = GetRepo();
            repo.Delete(key);
        }
        
        public static void Destroy(object key, IDataProvider provider) {
        
            var repo = GetRepo();
            repo.Delete(key,provider);
            
        }        
        
        public void Destroy() {
            _repo.Delete(KeyValue());
        }        
        public void Destroy(IDataProvider provider) {
            _repo.Delete(KeyValue(), provider);
        }         
        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_Master_Floor table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Master_Floor: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Master_Floor> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Master_Floor>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Master_Floor> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Master_Floor item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Master_Floor item=new TBL_Master_Floor();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Master_Floor> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Master_Floor(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Master_Floor.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Master_Floor>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Master_Floor(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Master_Floor(Expression<Func<TBL_Master_Floor, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Master_Floor> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Master_Floor> _repo;
            
            if(db.TestMode){
                TBL_Master_Floor.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Master_Floor>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Master_Floor> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Master_Floor SingleOrDefault(Expression<Func<TBL_Master_Floor, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Master_Floor single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Master_Floor SingleOrDefault(Expression<Func<TBL_Master_Floor, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Master_Floor single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Master_Floor, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Master_Floor, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Master_Floor> Find(Expression<Func<TBL_Master_Floor, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Master_Floor> Find(Expression<Func<TBL_Master_Floor, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Master_Floor> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Master_Floor> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Master_Floor> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Master_Floor> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Master_Floor> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Master_Floor> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Name.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Master_Floor)){
                TBL_Master_Floor compare=(TBL_Master_Floor)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Name.ToString();
                    }

        public string DescriptorColumn() {
            return "Name";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreatedOn;
        public DateTime? CreatedOn
        {
            get { return _CreatedOn; }
            set
            {
                if(_CreatedOn!=value){
                    _CreatedOn=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOn");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _ModifiedOn;
        public DateTime? ModifiedOn
        {
            get { return _ModifiedOn; }
            set
            {
                if(_ModifiedOn!=value){
                    _ModifiedOn=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ModifiedOn");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsDeleted;
        public bool? IsDeleted
        {
            get { return _IsDeleted; }
            set
            {
                if(_IsDeleted!=value){
                    _IsDeleted=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsDeleted");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _BuildingId;
        public int BuildingId
        {
            get { return _BuildingId; }
            set
            {
                if(_BuildingId!=value){
                    _BuildingId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BuildingId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _OrganizationId;
        public int? OrganizationId
        {
            get { return _OrganizationId; }
            set
            {
                if(_OrganizationId!=value){
                    _OrganizationId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrganizationId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if (!_dirtyColumns.Any(x => x.Name.ToLower() == "modifiedon")) {
               this.ModifiedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            }            
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            this.ModifiedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            this.CreatedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            this.ModifiedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                         
             this.IsDeleted=true;
            _repo.Update(this,provider);
                
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Master_Floor, bool>> expression) {
            var repo = GetRepo();
            
            
            List<TBL_Master_Floor> items=repo.GetAll().Where(expression).ToList();
            items.ForEach(x=>x.IsDeleted=true);
            repo.Update(items);
            
        }

                
        public static void Destroy(Func<TBL_Master_Floor, bool> expression) {
            var repo = GetRepo();
            repo.Delete(expression);
        }
        
        public static void Destroy(object key) {
            var repo = GetRepo();
            repo.Delete(key);
        }
        
        public static void Destroy(object key, IDataProvider provider) {
        
            var repo = GetRepo();
            repo.Delete(key,provider);
            
        }        
        
        public void Destroy() {
            _repo.Delete(KeyValue());
        }        
        public void Destroy(IDataProvider provider) {
            _repo.Delete(KeyValue(), provider);
        }         
        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Tbl_Master_Ward table in the mobilesitedesigner Database.
    /// </summary>
    public partial class Tbl_Master_Ward: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Tbl_Master_Ward> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Tbl_Master_Ward>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Tbl_Master_Ward> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Tbl_Master_Ward item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Tbl_Master_Ward item=new Tbl_Master_Ward();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Tbl_Master_Ward> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public Tbl_Master_Ward(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Tbl_Master_Ward.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Tbl_Master_Ward>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Tbl_Master_Ward(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Tbl_Master_Ward(Expression<Func<Tbl_Master_Ward, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Tbl_Master_Ward> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<Tbl_Master_Ward> _repo;
            
            if(db.TestMode){
                Tbl_Master_Ward.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Tbl_Master_Ward>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Tbl_Master_Ward> GetRepo(){
            return GetRepo("","");
        }
        
        public static Tbl_Master_Ward SingleOrDefault(Expression<Func<Tbl_Master_Ward, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Tbl_Master_Ward single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Tbl_Master_Ward SingleOrDefault(Expression<Func<Tbl_Master_Ward, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Tbl_Master_Ward single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Tbl_Master_Ward, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Tbl_Master_Ward, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Tbl_Master_Ward> Find(Expression<Func<Tbl_Master_Ward, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Tbl_Master_Ward> Find(Expression<Func<Tbl_Master_Ward, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Tbl_Master_Ward> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Tbl_Master_Ward> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Tbl_Master_Ward> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Tbl_Master_Ward> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Tbl_Master_Ward> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Tbl_Master_Ward> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Name.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Tbl_Master_Ward)){
                Tbl_Master_Ward compare=(Tbl_Master_Ward)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Name.ToString();
                    }

        public string DescriptorColumn() {
            return "Name";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _OrganizationId;
        public int OrganizationId
        {
            get { return _OrganizationId; }
            set
            {
                if(_OrganizationId!=value){
                    _OrganizationId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrganizationId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreatedOn;
        public DateTime? CreatedOn
        {
            get { return _CreatedOn; }
            set
            {
                if(_CreatedOn!=value){
                    _CreatedOn=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOn");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _ModifiedOn;
        public DateTime? ModifiedOn
        {
            get { return _ModifiedOn; }
            set
            {
                if(_ModifiedOn!=value){
                    _ModifiedOn=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ModifiedOn");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsDeleted;
        public bool? IsDeleted
        {
            get { return _IsDeleted; }
            set
            {
                if(_IsDeleted!=value){
                    _IsDeleted=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsDeleted");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _FloorId;
        public int? FloorId
        {
            get { return _FloorId; }
            set
            {
                if(_FloorId!=value){
                    _FloorId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FloorId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _BuildingId;
        public int? BuildingId
        {
            get { return _BuildingId; }
            set
            {
                if(_BuildingId!=value){
                    _BuildingId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BuildingId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if (!_dirtyColumns.Any(x => x.Name.ToLower() == "modifiedon")) {
               this.ModifiedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            }            
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            this.ModifiedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            this.CreatedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            this.ModifiedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                         
             this.IsDeleted=true;
            _repo.Update(this,provider);
                
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<Tbl_Master_Ward, bool>> expression) {
            var repo = GetRepo();
            
            
            List<Tbl_Master_Ward> items=repo.GetAll().Where(expression).ToList();
            items.ForEach(x=>x.IsDeleted=true);
            repo.Update(items);
            
        }

                
        public static void Destroy(Func<Tbl_Master_Ward, bool> expression) {
            var repo = GetRepo();
            repo.Delete(expression);
        }
        
        public static void Destroy(object key) {
            var repo = GetRepo();
            repo.Delete(key);
        }
        
        public static void Destroy(object key, IDataProvider provider) {
        
            var repo = GetRepo();
            repo.Delete(key,provider);
            
        }        
        
        public void Destroy() {
            _repo.Delete(KeyValue());
        }        
        public void Destroy(IDataProvider provider) {
            _repo.Delete(KeyValue(), provider);
        }         
        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_Rating table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Rating: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Rating> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Rating>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Rating> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Rating item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Rating item=new TBL_Rating();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Rating> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Rating(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Rating.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Rating>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Rating(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Rating(Expression<Func<TBL_Rating, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Rating> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Rating> _repo;
            
            if(db.TestMode){
                TBL_Rating.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Rating>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Rating> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Rating SingleOrDefault(Expression<Func<TBL_Rating, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Rating single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Rating SingleOrDefault(Expression<Func<TBL_Rating, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Rating single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Rating, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Rating, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Rating> Find(Expression<Func<TBL_Rating, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Rating> Find(Expression<Func<TBL_Rating, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Rating> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Rating> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Rating> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Rating> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Rating> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Rating> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "RatingId";
        }

        public object KeyValue()
        {
            return this.RatingId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.AppointmentId.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Rating)){
                TBL_Rating compare=(TBL_Rating)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.RatingId;
        }
        
        public string DescriptorValue()
        {
                            return this.AppointmentId.ToString();
                    }

        public string DescriptorColumn() {
            return "AppointmentId";
        }
        public static string GetKeyColumn()
        {
            return "RatingId";
        }        
        public static string GetDescriptorColumn()
        {
            return "AppointmentId";
        }
        
        #region ' Foreign Keys '
        public IQueryable<TBL_Appointment> TBL_Appointments
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_Appointment.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppointmentId == _AppointmentId
                       select items;
            }
        }

        #endregion
        

        int _RatingId;
        public int RatingId
        {
            get { return _RatingId; }
            set
            {
                if(_RatingId!=value){
                    _RatingId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RatingId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _AppointmentId;
        public int? AppointmentId
        {
            get { return _AppointmentId; }
            set
            {
                if(_AppointmentId!=value){
                    _AppointmentId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AppointmentId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal? _Rating;
        public decimal? Rating
        {
            get { return _Rating; }
            set
            {
                if(_Rating!=value){
                    _Rating=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Rating");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Rating, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_Master_Symptom table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Master_Symptom: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Master_Symptom> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Master_Symptom>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Master_Symptom> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Master_Symptom item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Master_Symptom item=new TBL_Master_Symptom();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Master_Symptom> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Master_Symptom(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Master_Symptom.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Master_Symptom>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Master_Symptom(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Master_Symptom(Expression<Func<TBL_Master_Symptom, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Master_Symptom> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Master_Symptom> _repo;
            
            if(db.TestMode){
                TBL_Master_Symptom.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Master_Symptom>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Master_Symptom> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Master_Symptom SingleOrDefault(Expression<Func<TBL_Master_Symptom, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Master_Symptom single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Master_Symptom SingleOrDefault(Expression<Func<TBL_Master_Symptom, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Master_Symptom single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Master_Symptom, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Master_Symptom, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Master_Symptom> Find(Expression<Func<TBL_Master_Symptom, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Master_Symptom> Find(Expression<Func<TBL_Master_Symptom, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Master_Symptom> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Master_Symptom> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Master_Symptom> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Master_Symptom> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Master_Symptom> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Master_Symptom> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "SymptomId";
        }

        public object KeyValue()
        {
            return this.SymptomId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Symptom.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Master_Symptom)){
                TBL_Master_Symptom compare=(TBL_Master_Symptom)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.SymptomId;
        }
        
        public string DescriptorValue()
        {
                            return this.Symptom.ToString();
                    }

        public string DescriptorColumn() {
            return "Symptom";
        }
        public static string GetKeyColumn()
        {
            return "SymptomId";
        }        
        public static string GetDescriptorColumn()
        {
            return "Symptom";
        }
        
        #region ' Foreign Keys '
        public IQueryable<TBL_Master_SymptomGroup> TBL_Master_SymptomGroups
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_Master_SymptomGroup.GetRepo();
                  return from items in repo.GetAll()
                       where items.SymptomGroupId == _SymptomGroupId
                       select items;
            }
        }

        #endregion
        

        int _SymptomId;
        public int SymptomId
        {
            get { return _SymptomId; }
            set
            {
                if(_SymptomId!=value){
                    _SymptomId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SymptomId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _SymptomGroupId;
        public int? SymptomGroupId
        {
            get { return _SymptomGroupId; }
            set
            {
                if(_SymptomGroupId!=value){
                    _SymptomGroupId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SymptomGroupId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Symptom;
        public string Symptom
        {
            get { return _Symptom; }
            set
            {
                if(_Symptom!=value){
                    _Symptom=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Symptom");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Description;
        public string Description
        {
            get { return _Description; }
            set
            {
                if(_Description!=value){
                    _Description=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Description");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _RequestedBy;
        public int? RequestedBy
        {
            get { return _RequestedBy; }
            set
            {
                if(_RequestedBy!=value){
                    _RequestedBy=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RequestedBy");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsApproved;
        public bool? IsApproved
        {
            get { return _IsApproved; }
            set
            {
                if(_IsApproved!=value){
                    _IsApproved=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsApproved");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreatedOn;
        public DateTime? CreatedOn
        {
            get { return _CreatedOn; }
            set
            {
                if(_CreatedOn!=value){
                    _CreatedOn=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOn");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _ModifiedOn;
        public DateTime? ModifiedOn
        {
            get { return _ModifiedOn; }
            set
            {
                if(_ModifiedOn!=value){
                    _ModifiedOn=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ModifiedOn");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsDeleted;
        public bool? IsDeleted
        {
            get { return _IsDeleted; }
            set
            {
                if(_IsDeleted!=value){
                    _IsDeleted=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsDeleted");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsTreatment;
        public bool? IsTreatment
        {
            get { return _IsTreatment; }
            set
            {
                if(_IsTreatment!=value){
                    _IsTreatment=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsTreatment");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if (!_dirtyColumns.Any(x => x.Name.ToLower() == "modifiedon")) {
               this.ModifiedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            }            
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            this.ModifiedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            this.CreatedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            this.ModifiedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                         
             this.IsDeleted=true;
            _repo.Update(this,provider);
                
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Master_Symptom, bool>> expression) {
            var repo = GetRepo();
            
            
            List<TBL_Master_Symptom> items=repo.GetAll().Where(expression).ToList();
            items.ForEach(x=>x.IsDeleted=true);
            repo.Update(items);
            
        }

                
        public static void Destroy(Func<TBL_Master_Symptom, bool> expression) {
            var repo = GetRepo();
            repo.Delete(expression);
        }
        
        public static void Destroy(object key) {
            var repo = GetRepo();
            repo.Delete(key);
        }
        
        public static void Destroy(object key, IDataProvider provider) {
        
            var repo = GetRepo();
            repo.Delete(key,provider);
            
        }        
        
        public void Destroy() {
            _repo.Delete(KeyValue());
        }        
        public void Destroy(IDataProvider provider) {
            _repo.Delete(KeyValue(), provider);
        }         
        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_Master_Preferential table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Master_Preferential: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Master_Preferential> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Master_Preferential>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Master_Preferential> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Master_Preferential item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Master_Preferential item=new TBL_Master_Preferential();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Master_Preferential> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Master_Preferential(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Master_Preferential.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Master_Preferential>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Master_Preferential(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Master_Preferential(Expression<Func<TBL_Master_Preferential, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Master_Preferential> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Master_Preferential> _repo;
            
            if(db.TestMode){
                TBL_Master_Preferential.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Master_Preferential>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Master_Preferential> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Master_Preferential SingleOrDefault(Expression<Func<TBL_Master_Preferential, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Master_Preferential single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Master_Preferential SingleOrDefault(Expression<Func<TBL_Master_Preferential, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Master_Preferential single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Master_Preferential, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Master_Preferential, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Master_Preferential> Find(Expression<Func<TBL_Master_Preferential, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Master_Preferential> Find(Expression<Func<TBL_Master_Preferential, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Master_Preferential> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Master_Preferential> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Master_Preferential> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Master_Preferential> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Master_Preferential> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Master_Preferential> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "PreferentialId";
        }

        public object KeyValue()
        {
            return this.PreferentialId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.PreferentialName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Master_Preferential)){
                TBL_Master_Preferential compare=(TBL_Master_Preferential)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.PreferentialId;
        }
        
        public string DescriptorValue()
        {
                            return this.PreferentialName.ToString();
                    }

        public string DescriptorColumn() {
            return "PreferentialName";
        }
        public static string GetKeyColumn()
        {
            return "PreferentialId";
        }        
        public static string GetDescriptorColumn()
        {
            return "PreferentialName";
        }
        
        #region ' Foreign Keys '
        public IQueryable<TBL_Appointment> TBL_Appointments
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_Appointment.GetRepo();
                  return from items in repo.GetAll()
                       where items.PreferentialId == _PreferentialId
                       select items;
            }
        }

        #endregion
        

        int _PreferentialId;
        public int PreferentialId
        {
            get { return _PreferentialId; }
            set
            {
                if(_PreferentialId!=value){
                    _PreferentialId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PreferentialId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _PreferentialName;
        public string PreferentialName
        {
            get { return _PreferentialName; }
            set
            {
                if(_PreferentialName!=value){
                    _PreferentialName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PreferentialName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Master_Preferential, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_Master_Diagnosis table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Master_Diagnosi: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Master_Diagnosi> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Master_Diagnosi>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Master_Diagnosi> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Master_Diagnosi item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Master_Diagnosi item=new TBL_Master_Diagnosi();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Master_Diagnosi> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Master_Diagnosi(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Master_Diagnosi.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Master_Diagnosi>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Master_Diagnosi(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Master_Diagnosi(Expression<Func<TBL_Master_Diagnosi, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Master_Diagnosi> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Master_Diagnosi> _repo;
            
            if(db.TestMode){
                TBL_Master_Diagnosi.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Master_Diagnosi>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Master_Diagnosi> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Master_Diagnosi SingleOrDefault(Expression<Func<TBL_Master_Diagnosi, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Master_Diagnosi single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Master_Diagnosi SingleOrDefault(Expression<Func<TBL_Master_Diagnosi, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Master_Diagnosi single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Master_Diagnosi, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Master_Diagnosi, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Master_Diagnosi> Find(Expression<Func<TBL_Master_Diagnosi, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Master_Diagnosi> Find(Expression<Func<TBL_Master_Diagnosi, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Master_Diagnosi> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Master_Diagnosi> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Master_Diagnosi> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Master_Diagnosi> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Master_Diagnosi> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Master_Diagnosi> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "DiagnosisId";
        }

        public object KeyValue()
        {
            return this.DiagnosisId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Diagnosis.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Master_Diagnosi)){
                TBL_Master_Diagnosi compare=(TBL_Master_Diagnosi)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.DiagnosisId;
        }
        
        public string DescriptorValue()
        {
                            return this.Diagnosis.ToString();
                    }

        public string DescriptorColumn() {
            return "Diagnosis";
        }
        public static string GetKeyColumn()
        {
            return "DiagnosisId";
        }        
        public static string GetDescriptorColumn()
        {
            return "Diagnosis";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _DiagnosisId;
        public int DiagnosisId
        {
            get { return _DiagnosisId; }
            set
            {
                if(_DiagnosisId!=value){
                    _DiagnosisId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DiagnosisId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Diagnosis;
        public string Diagnosis
        {
            get { return _Diagnosis; }
            set
            {
                if(_Diagnosis!=value){
                    _Diagnosis=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Diagnosis");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Description;
        public string Description
        {
            get { return _Description; }
            set
            {
                if(_Description!=value){
                    _Description=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Description");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _RequestedBy;
        public int? RequestedBy
        {
            get { return _RequestedBy; }
            set
            {
                if(_RequestedBy!=value){
                    _RequestedBy=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RequestedBy");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsApproved;
        public bool? IsApproved
        {
            get { return _IsApproved; }
            set
            {
                if(_IsApproved!=value){
                    _IsApproved=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsApproved");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreatedOn;
        public DateTime? CreatedOn
        {
            get { return _CreatedOn; }
            set
            {
                if(_CreatedOn!=value){
                    _CreatedOn=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOn");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _ModifiedOn;
        public DateTime? ModifiedOn
        {
            get { return _ModifiedOn; }
            set
            {
                if(_ModifiedOn!=value){
                    _ModifiedOn=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ModifiedOn");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsDeleted;
        public bool? IsDeleted
        {
            get { return _IsDeleted; }
            set
            {
                if(_IsDeleted!=value){
                    _IsDeleted=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsDeleted");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsTreatment;
        public bool? IsTreatment
        {
            get { return _IsTreatment; }
            set
            {
                if(_IsTreatment!=value){
                    _IsTreatment=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsTreatment");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if (!_dirtyColumns.Any(x => x.Name.ToLower() == "modifiedon")) {
               this.ModifiedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            }            
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            this.ModifiedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            this.CreatedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            this.ModifiedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                         
             this.IsDeleted=true;
            _repo.Update(this,provider);
                
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Master_Diagnosi, bool>> expression) {
            var repo = GetRepo();
            
            
            List<TBL_Master_Diagnosi> items=repo.GetAll().Where(expression).ToList();
            items.ForEach(x=>x.IsDeleted=true);
            repo.Update(items);
            
        }

                
        public static void Destroy(Func<TBL_Master_Diagnosi, bool> expression) {
            var repo = GetRepo();
            repo.Delete(expression);
        }
        
        public static void Destroy(object key) {
            var repo = GetRepo();
            repo.Delete(key);
        }
        
        public static void Destroy(object key, IDataProvider provider) {
        
            var repo = GetRepo();
            repo.Delete(key,provider);
            
        }        
        
        public void Destroy() {
            _repo.Delete(KeyValue());
        }        
        public void Destroy(IDataProvider provider) {
            _repo.Delete(KeyValue(), provider);
        }         
        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_Answer table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Answer: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Answer> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Answer>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Answer> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Answer item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Answer item=new TBL_Answer();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Answer> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Answer(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Answer.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Answer>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Answer(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Answer(Expression<Func<TBL_Answer, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Answer> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Answer> _repo;
            
            if(db.TestMode){
                TBL_Answer.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Answer>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Answer> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Answer SingleOrDefault(Expression<Func<TBL_Answer, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Answer single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Answer SingleOrDefault(Expression<Func<TBL_Answer, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Answer single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Answer, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Answer, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Answer> Find(Expression<Func<TBL_Answer, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Answer> Find(Expression<Func<TBL_Answer, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Answer> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Answer> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Answer> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Answer> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Answer> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Answer> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "AnswerId";
        }

        public object KeyValue()
        {
            return this.AnswerId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Answer.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Answer)){
                TBL_Answer compare=(TBL_Answer)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.AnswerId;
        }
        
        public string DescriptorValue()
        {
                            return this.Answer.ToString();
                    }

        public string DescriptorColumn() {
            return "Answer";
        }
        public static string GetKeyColumn()
        {
            return "AnswerId";
        }        
        public static string GetDescriptorColumn()
        {
            return "Answer";
        }
        
        #region ' Foreign Keys '
        public IQueryable<TBL_Doctor> TBL_Doctors
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_Doctor.GetRepo();
                  return from items in repo.GetAll()
                       where items.DoctorId == _DoctorId
                       select items;
            }
        }

        public IQueryable<TBL_Question> TBL_Questions
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_Question.GetRepo();
                  return from items in repo.GetAll()
                       where items.QuestionId == _QuestionId
                       select items;
            }
        }

        #endregion
        

        int _AnswerId;
        public int AnswerId
        {
            get { return _AnswerId; }
            set
            {
                if(_AnswerId!=value){
                    _AnswerId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AnswerId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _QuestionId;
        public int? QuestionId
        {
            get { return _QuestionId; }
            set
            {
                if(_QuestionId!=value){
                    _QuestionId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="QuestionId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Answer;
        public string Answer
        {
            get { return _Answer; }
            set
            {
                if(_Answer!=value){
                    _Answer=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Answer");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _DoctorId;
        public int? DoctorId
        {
            get { return _DoctorId; }
            set
            {
                if(_DoctorId!=value){
                    _DoctorId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DoctorId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsPatient;
        public bool? IsPatient
        {
            get { return _IsPatient; }
            set
            {
                if(_IsPatient!=value){
                    _IsPatient=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsPatient");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreatedOn;
        public DateTime? CreatedOn
        {
            get { return _CreatedOn; }
            set
            {
                if(_CreatedOn!=value){
                    _CreatedOn=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOn");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsDeleted;
        public bool? IsDeleted
        {
            get { return _IsDeleted; }
            set
            {
                if(_IsDeleted!=value){
                    _IsDeleted=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsDeleted");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            this.CreatedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                         
             this.IsDeleted=true;
            _repo.Update(this,provider);
                
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Answer, bool>> expression) {
            var repo = GetRepo();
            
            
            List<TBL_Answer> items=repo.GetAll().Where(expression).ToList();
            items.ForEach(x=>x.IsDeleted=true);
            repo.Update(items);
            
        }

                
        public static void Destroy(Func<TBL_Answer, bool> expression) {
            var repo = GetRepo();
            repo.Delete(expression);
        }
        
        public static void Destroy(object key) {
            var repo = GetRepo();
            repo.Delete(key);
        }
        
        public static void Destroy(object key, IDataProvider provider) {
        
            var repo = GetRepo();
            repo.Delete(key,provider);
            
        }        
        
        public void Destroy() {
            _repo.Delete(KeyValue());
        }        
        public void Destroy(IDataProvider provider) {
            _repo.Delete(KeyValue(), provider);
        }         
        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_SMS table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_SM: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_SM> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_SM>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_SM> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_SM item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_SM item=new TBL_SM();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_SM> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_SM(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_SM.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_SM>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_SM(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_SM(Expression<Func<TBL_SM, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_SM> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_SM> _repo;
            
            if(db.TestMode){
                TBL_SM.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_SM>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_SM> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_SM SingleOrDefault(Expression<Func<TBL_SM, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_SM single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_SM SingleOrDefault(Expression<Func<TBL_SM, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_SM single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_SM, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_SM, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_SM> Find(Expression<Func<TBL_SM, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_SM> Find(Expression<Func<TBL_SM, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_SM> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_SM> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_SM> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_SM> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_SM> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_SM> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Mobile.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_SM)){
                TBL_SM compare=(TBL_SM)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Mobile.ToString();
                    }

        public string DescriptorColumn() {
            return "Mobile";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Mobile";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _LoginId;
        public int? LoginId
        {
            get { return _LoginId; }
            set
            {
                if(_LoginId!=value){
                    _LoginId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LoginId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _OrganizationId;
        public int? OrganizationId
        {
            get { return _OrganizationId; }
            set
            {
                if(_OrganizationId!=value){
                    _OrganizationId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrganizationId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Mobile;
        public string Mobile
        {
            get { return _Mobile; }
            set
            {
                if(_Mobile!=value){
                    _Mobile=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Mobile");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _AccountId;
        public int? AccountId
        {
            get { return _AccountId; }
            set
            {
                if(_AccountId!=value){
                    _AccountId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AccountId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _AccountTypeId;
        public int? AccountTypeId
        {
            get { return _AccountTypeId; }
            set
            {
                if(_AccountTypeId!=value){
                    _AccountTypeId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AccountTypeId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _AppointmentId;
        public int? AppointmentId
        {
            get { return _AppointmentId; }
            set
            {
                if(_AppointmentId!=value){
                    _AppointmentId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AppointmentId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _SMSMessage;
        public string SMSMessage
        {
            get { return _SMSMessage; }
            set
            {
                if(_SMSMessage!=value){
                    _SMSMessage=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SMSMessage");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Action;
        public string Action
        {
            get { return _Action; }
            set
            {
                if(_Action!=value){
                    _Action=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Action");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _EmailCount;
        public int? EmailCount
        {
            get { return _EmailCount; }
            set
            {
                if(_EmailCount!=value){
                    _EmailCount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EmailCount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _MobileId;
        public string MobileId
        {
            get { return _MobileId; }
            set
            {
                if(_MobileId!=value){
                    _MobileId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MobileId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ExternalId;
        public string ExternalId
        {
            get { return _ExternalId; }
            set
            {
                if(_ExternalId!=value){
                    _ExternalId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ExternalId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreatedOn;
        public DateTime? CreatedOn
        {
            get { return _CreatedOn; }
            set
            {
                if(_CreatedOn!=value){
                    _CreatedOn=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOn");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            this.CreatedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_SM, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_Symptom_Diagnosis table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Symptom_Diagnosi: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Symptom_Diagnosi> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Symptom_Diagnosi>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Symptom_Diagnosi> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Symptom_Diagnosi item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Symptom_Diagnosi item=new TBL_Symptom_Diagnosi();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Symptom_Diagnosi> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Symptom_Diagnosi(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Symptom_Diagnosi.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Symptom_Diagnosi>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Symptom_Diagnosi(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Symptom_Diagnosi(Expression<Func<TBL_Symptom_Diagnosi, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Symptom_Diagnosi> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Symptom_Diagnosi> _repo;
            
            if(db.TestMode){
                TBL_Symptom_Diagnosi.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Symptom_Diagnosi>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Symptom_Diagnosi> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Symptom_Diagnosi SingleOrDefault(Expression<Func<TBL_Symptom_Diagnosi, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Symptom_Diagnosi single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Symptom_Diagnosi SingleOrDefault(Expression<Func<TBL_Symptom_Diagnosi, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Symptom_Diagnosi single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Symptom_Diagnosi, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Symptom_Diagnosi, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Symptom_Diagnosi> Find(Expression<Func<TBL_Symptom_Diagnosi, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Symptom_Diagnosi> Find(Expression<Func<TBL_Symptom_Diagnosi, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Symptom_Diagnosi> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Symptom_Diagnosi> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Symptom_Diagnosi> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Symptom_Diagnosi> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Symptom_Diagnosi> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Symptom_Diagnosi> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "SymptomId";
        }

        public object KeyValue()
        {
            return this.SymptomId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.DiagnosisId.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Symptom_Diagnosi)){
                TBL_Symptom_Diagnosi compare=(TBL_Symptom_Diagnosi)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.SymptomId;
        }
        
        public string DescriptorValue()
        {
                            return this.DiagnosisId.ToString();
                    }

        public string DescriptorColumn() {
            return "DiagnosisId";
        }
        public static string GetKeyColumn()
        {
            return "SymptomId";
        }        
        public static string GetDescriptorColumn()
        {
            return "DiagnosisId";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int? _SymptomId;
        public int? SymptomId
        {
            get { return _SymptomId; }
            set
            {
                if(_SymptomId!=value){
                    _SymptomId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SymptomId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _DiagnosisId;
        public int? DiagnosisId
        {
            get { return _DiagnosisId; }
            set
            {
                if(_DiagnosisId!=value){
                    _DiagnosisId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DiagnosisId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Symptom_Diagnosi, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_Diagnosis_Department table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Diagnosis_Department: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Diagnosis_Department> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Diagnosis_Department>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Diagnosis_Department> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Diagnosis_Department item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Diagnosis_Department item=new TBL_Diagnosis_Department();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Diagnosis_Department> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Diagnosis_Department(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Diagnosis_Department.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Diagnosis_Department>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Diagnosis_Department(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Diagnosis_Department(Expression<Func<TBL_Diagnosis_Department, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Diagnosis_Department> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Diagnosis_Department> _repo;
            
            if(db.TestMode){
                TBL_Diagnosis_Department.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Diagnosis_Department>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Diagnosis_Department> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Diagnosis_Department SingleOrDefault(Expression<Func<TBL_Diagnosis_Department, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Diagnosis_Department single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Diagnosis_Department SingleOrDefault(Expression<Func<TBL_Diagnosis_Department, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Diagnosis_Department single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Diagnosis_Department, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Diagnosis_Department, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Diagnosis_Department> Find(Expression<Func<TBL_Diagnosis_Department, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Diagnosis_Department> Find(Expression<Func<TBL_Diagnosis_Department, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Diagnosis_Department> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Diagnosis_Department> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Diagnosis_Department> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Diagnosis_Department> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Diagnosis_Department> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Diagnosis_Department> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "DiagnosisId";
        }

        public object KeyValue()
        {
            return this.DiagnosisId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.DepartmentId.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Diagnosis_Department)){
                TBL_Diagnosis_Department compare=(TBL_Diagnosis_Department)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.DiagnosisId;
        }
        
        public string DescriptorValue()
        {
                            return this.DepartmentId.ToString();
                    }

        public string DescriptorColumn() {
            return "DepartmentId";
        }
        public static string GetKeyColumn()
        {
            return "DiagnosisId";
        }        
        public static string GetDescriptorColumn()
        {
            return "DepartmentId";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int? _DiagnosisId;
        public int? DiagnosisId
        {
            get { return _DiagnosisId; }
            set
            {
                if(_DiagnosisId!=value){
                    _DiagnosisId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DiagnosisId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _DepartmentId;
        public int? DepartmentId
        {
            get { return _DepartmentId; }
            set
            {
                if(_DepartmentId!=value){
                    _DepartmentId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DepartmentId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Diagnosis_Department, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_Question table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Question: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Question> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Question>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Question> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Question item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Question item=new TBL_Question();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Question> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Question(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Question.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Question>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Question(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Question(Expression<Func<TBL_Question, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Question> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Question> _repo;
            
            if(db.TestMode){
                TBL_Question.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Question>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Question> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Question SingleOrDefault(Expression<Func<TBL_Question, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Question single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Question SingleOrDefault(Expression<Func<TBL_Question, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Question single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Question, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Question, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Question> Find(Expression<Func<TBL_Question, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Question> Find(Expression<Func<TBL_Question, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Question> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Question> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Question> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Question> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Question> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Question> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "QuestionId";
        }

        public object KeyValue()
        {
            return this.QuestionId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Question.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Question)){
                TBL_Question compare=(TBL_Question)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.QuestionId;
        }
        
        public string DescriptorValue()
        {
                            return this.Question.ToString();
                    }

        public string DescriptorColumn() {
            return "Question";
        }
        public static string GetKeyColumn()
        {
            return "QuestionId";
        }        
        public static string GetDescriptorColumn()
        {
            return "Question";
        }
        
        #region ' Foreign Keys '
        public IQueryable<TBL_Answer> TBL_Answers
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_Answer.GetRepo();
                  return from items in repo.GetAll()
                       where items.QuestionId == _QuestionId
                       select items;
            }
        }

        public IQueryable<TBL_Patient> TBL_Patients
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_Patient.GetRepo();
                  return from items in repo.GetAll()
                       where items.PatientId == _PatientId
                       select items;
            }
        }

        public IQueryable<TBL_Patient> TBL_Patients2
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_Patient.GetRepo();
                  return from items in repo.GetAll()
                       where items.PatientId == _PatientId
                       select items;
            }
        }

        #endregion
        

        int _QuestionId;
        public int QuestionId
        {
            get { return _QuestionId; }
            set
            {
                if(_QuestionId!=value){
                    _QuestionId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="QuestionId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _PatientId;
        public int? PatientId
        {
            get { return _PatientId; }
            set
            {
                if(_PatientId!=value){
                    _PatientId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PatientId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Question;
        public string Question
        {
            get { return _Question; }
            set
            {
                if(_Question!=value){
                    _Question=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Question");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreatedOn;
        public DateTime? CreatedOn
        {
            get { return _CreatedOn; }
            set
            {
                if(_CreatedOn!=value){
                    _CreatedOn=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOn");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsDeleted;
        public bool? IsDeleted
        {
            get { return _IsDeleted; }
            set
            {
                if(_IsDeleted!=value){
                    _IsDeleted=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsDeleted");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            this.CreatedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                         
             this.IsDeleted=true;
            _repo.Update(this,provider);
                
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Question, bool>> expression) {
            var repo = GetRepo();
            
            
            List<TBL_Question> items=repo.GetAll().Where(expression).ToList();
            items.ForEach(x=>x.IsDeleted=true);
            repo.Update(items);
            
        }

                
        public static void Destroy(Func<TBL_Question, bool> expression) {
            var repo = GetRepo();
            repo.Delete(expression);
        }
        
        public static void Destroy(object key) {
            var repo = GetRepo();
            repo.Delete(key);
        }
        
        public static void Destroy(object key, IDataProvider provider) {
        
            var repo = GetRepo();
            repo.Delete(key,provider);
            
        }        
        
        public void Destroy() {
            _repo.Delete(KeyValue());
        }        
        public void Destroy(IDataProvider provider) {
            _repo.Delete(KeyValue(), provider);
        }         
        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_Doctor_Diagnosis table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Doctor_Diagnosi: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Doctor_Diagnosi> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Doctor_Diagnosi>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Doctor_Diagnosi> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Doctor_Diagnosi item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Doctor_Diagnosi item=new TBL_Doctor_Diagnosi();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Doctor_Diagnosi> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Doctor_Diagnosi(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Doctor_Diagnosi.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Doctor_Diagnosi>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Doctor_Diagnosi(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Doctor_Diagnosi(Expression<Func<TBL_Doctor_Diagnosi, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Doctor_Diagnosi> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Doctor_Diagnosi> _repo;
            
            if(db.TestMode){
                TBL_Doctor_Diagnosi.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Doctor_Diagnosi>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Doctor_Diagnosi> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Doctor_Diagnosi SingleOrDefault(Expression<Func<TBL_Doctor_Diagnosi, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Doctor_Diagnosi single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Doctor_Diagnosi SingleOrDefault(Expression<Func<TBL_Doctor_Diagnosi, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Doctor_Diagnosi single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Doctor_Diagnosi, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Doctor_Diagnosi, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Doctor_Diagnosi> Find(Expression<Func<TBL_Doctor_Diagnosi, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Doctor_Diagnosi> Find(Expression<Func<TBL_Doctor_Diagnosi, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Doctor_Diagnosi> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Doctor_Diagnosi> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Doctor_Diagnosi> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Doctor_Diagnosi> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Doctor_Diagnosi> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Doctor_Diagnosi> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "DoctorId";
        }

        public object KeyValue()
        {
            return this.DoctorId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.DiagnosisId.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Doctor_Diagnosi)){
                TBL_Doctor_Diagnosi compare=(TBL_Doctor_Diagnosi)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.DoctorId;
        }
        
        public string DescriptorValue()
        {
                            return this.DiagnosisId.ToString();
                    }

        public string DescriptorColumn() {
            return "DiagnosisId";
        }
        public static string GetKeyColumn()
        {
            return "DoctorId";
        }        
        public static string GetDescriptorColumn()
        {
            return "DiagnosisId";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int? _DoctorId;
        public int? DoctorId
        {
            get { return _DoctorId; }
            set
            {
                if(_DoctorId!=value){
                    _DoctorId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DoctorId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _DiagnosisId;
        public int? DiagnosisId
        {
            get { return _DiagnosisId; }
            set
            {
                if(_DiagnosisId!=value){
                    _DiagnosisId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DiagnosisId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Doctor_Diagnosi, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_Feedback table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Feedback: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Feedback> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Feedback>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Feedback> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Feedback item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Feedback item=new TBL_Feedback();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Feedback> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Feedback(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Feedback.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Feedback>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Feedback(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Feedback(Expression<Func<TBL_Feedback, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Feedback> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Feedback> _repo;
            
            if(db.TestMode){
                TBL_Feedback.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Feedback>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Feedback> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Feedback SingleOrDefault(Expression<Func<TBL_Feedback, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Feedback single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Feedback SingleOrDefault(Expression<Func<TBL_Feedback, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Feedback single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Feedback, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Feedback, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Feedback> Find(Expression<Func<TBL_Feedback, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Feedback> Find(Expression<Func<TBL_Feedback, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Feedback> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Feedback> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Feedback> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Feedback> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Feedback> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Feedback> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "FeedbackId";
        }

        public object KeyValue()
        {
            return this.FeedbackId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Name.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Feedback)){
                TBL_Feedback compare=(TBL_Feedback)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.FeedbackId;
        }
        
        public string DescriptorValue()
        {
                            return this.Name.ToString();
                    }

        public string DescriptorColumn() {
            return "Name";
        }
        public static string GetKeyColumn()
        {
            return "FeedbackId";
        }        
        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _FeedbackId;
        public int FeedbackId
        {
            get { return _FeedbackId; }
            set
            {
                if(_FeedbackId!=value){
                    _FeedbackId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FeedbackId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Email;
        public string Email
        {
            get { return _Email; }
            set
            {
                if(_Email!=value){
                    _Email=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Email");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Feedback;
        public string Feedback
        {
            get { return _Feedback; }
            set
            {
                if(_Feedback!=value){
                    _Feedback=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Feedback");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreatedOn;
        public DateTime? CreatedOn
        {
            get { return _CreatedOn; }
            set
            {
                if(_CreatedOn!=value){
                    _CreatedOn=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOn");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsDeleted;
        public bool? IsDeleted
        {
            get { return _IsDeleted; }
            set
            {
                if(_IsDeleted!=value){
                    _IsDeleted=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsDeleted");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            this.CreatedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                         
             this.IsDeleted=true;
            _repo.Update(this,provider);
                
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Feedback, bool>> expression) {
            var repo = GetRepo();
            
            
            List<TBL_Feedback> items=repo.GetAll().Where(expression).ToList();
            items.ForEach(x=>x.IsDeleted=true);
            repo.Update(items);
            
        }

                
        public static void Destroy(Func<TBL_Feedback, bool> expression) {
            var repo = GetRepo();
            repo.Delete(expression);
        }
        
        public static void Destroy(object key) {
            var repo = GetRepo();
            repo.Delete(key);
        }
        
        public static void Destroy(object key, IDataProvider provider) {
        
            var repo = GetRepo();
            repo.Delete(key,provider);
            
        }        
        
        public void Destroy() {
            _repo.Delete(KeyValue());
        }        
        public void Destroy(IDataProvider provider) {
            _repo.Delete(KeyValue(), provider);
        }         
        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_KeywordSMS table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_KeywordSM: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_KeywordSM> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_KeywordSM>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_KeywordSM> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_KeywordSM item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_KeywordSM item=new TBL_KeywordSM();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_KeywordSM> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_KeywordSM(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_KeywordSM.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_KeywordSM>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_KeywordSM(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_KeywordSM(Expression<Func<TBL_KeywordSM, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_KeywordSM> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_KeywordSM> _repo;
            
            if(db.TestMode){
                TBL_KeywordSM.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_KeywordSM>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_KeywordSM> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_KeywordSM SingleOrDefault(Expression<Func<TBL_KeywordSM, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_KeywordSM single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_KeywordSM SingleOrDefault(Expression<Func<TBL_KeywordSM, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_KeywordSM single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_KeywordSM, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_KeywordSM, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_KeywordSM> Find(Expression<Func<TBL_KeywordSM, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_KeywordSM> Find(Expression<Func<TBL_KeywordSM, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_KeywordSM> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_KeywordSM> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_KeywordSM> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_KeywordSM> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_KeywordSM> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_KeywordSM> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "KeywordSMSId";
        }

        public object KeyValue()
        {
            return this.KeywordSMSId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.PhoneCode.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_KeywordSM)){
                TBL_KeywordSM compare=(TBL_KeywordSM)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.KeywordSMSId;
        }
        
        public string DescriptorValue()
        {
                            return this.PhoneCode.ToString();
                    }

        public string DescriptorColumn() {
            return "PhoneCode";
        }
        public static string GetKeyColumn()
        {
            return "KeywordSMSId";
        }        
        public static string GetDescriptorColumn()
        {
            return "PhoneCode";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _KeywordSMSId;
        public int KeywordSMSId
        {
            get { return _KeywordSMSId; }
            set
            {
                if(_KeywordSMSId!=value){
                    _KeywordSMSId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="KeywordSMSId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _PhoneCode;
        public string PhoneCode
        {
            get { return _PhoneCode; }
            set
            {
                if(_PhoneCode!=value){
                    _PhoneCode=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PhoneCode");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Keyword;
        public string Keyword
        {
            get { return _Keyword; }
            set
            {
                if(_Keyword!=value){
                    _Keyword=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Keyword");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Location;
        public string Location
        {
            get { return _Location; }
            set
            {
                if(_Location!=value){
                    _Location=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Location");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Carrier;
        public string Carrier
        {
            get { return _Carrier; }
            set
            {
                if(_Carrier!=value){
                    _Carrier=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Carrier");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Contents;
        public string Contents
        {
            get { return _Contents; }
            set
            {
                if(_Contents!=value){
                    _Contents=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Contents");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _PhoneNo;
        public string PhoneNo
        {
            get { return _PhoneNo; }
            set
            {
                if(_PhoneNo!=value){
                    _PhoneNo=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PhoneNo");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Time;
        public string Time
        {
            get { return _Time; }
            set
            {
                if(_Time!=value){
                    _Time=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Time");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreatedOn;
        public DateTime? CreatedOn
        {
            get { return _CreatedOn; }
            set
            {
                if(_CreatedOn!=value){
                    _CreatedOn=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOn");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            this.CreatedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_KeywordSM, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_Master_FamilyHistory table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Master_FamilyHistory: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Master_FamilyHistory> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Master_FamilyHistory>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Master_FamilyHistory> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Master_FamilyHistory item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Master_FamilyHistory item=new TBL_Master_FamilyHistory();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Master_FamilyHistory> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Master_FamilyHistory(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Master_FamilyHistory.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Master_FamilyHistory>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Master_FamilyHistory(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Master_FamilyHistory(Expression<Func<TBL_Master_FamilyHistory, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Master_FamilyHistory> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Master_FamilyHistory> _repo;
            
            if(db.TestMode){
                TBL_Master_FamilyHistory.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Master_FamilyHistory>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Master_FamilyHistory> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Master_FamilyHistory SingleOrDefault(Expression<Func<TBL_Master_FamilyHistory, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Master_FamilyHistory single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Master_FamilyHistory SingleOrDefault(Expression<Func<TBL_Master_FamilyHistory, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Master_FamilyHistory single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Master_FamilyHistory, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Master_FamilyHistory, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Master_FamilyHistory> Find(Expression<Func<TBL_Master_FamilyHistory, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Master_FamilyHistory> Find(Expression<Func<TBL_Master_FamilyHistory, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Master_FamilyHistory> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Master_FamilyHistory> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Master_FamilyHistory> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Master_FamilyHistory> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Master_FamilyHistory> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Master_FamilyHistory> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "FamilyHistoryId";
        }

        public object KeyValue()
        {
            return this.FamilyHistoryId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.FamilyHistoryName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Master_FamilyHistory)){
                TBL_Master_FamilyHistory compare=(TBL_Master_FamilyHistory)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.FamilyHistoryId;
        }
        
        public string DescriptorValue()
        {
                            return this.FamilyHistoryName.ToString();
                    }

        public string DescriptorColumn() {
            return "FamilyHistoryName";
        }
        public static string GetKeyColumn()
        {
            return "FamilyHistoryId";
        }        
        public static string GetDescriptorColumn()
        {
            return "FamilyHistoryName";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _FamilyHistoryId;
        public int FamilyHistoryId
        {
            get { return _FamilyHistoryId; }
            set
            {
                if(_FamilyHistoryId!=value){
                    _FamilyHistoryId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FamilyHistoryId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _FamilyHistoryName;
        public string FamilyHistoryName
        {
            get { return _FamilyHistoryName; }
            set
            {
                if(_FamilyHistoryName!=value){
                    _FamilyHistoryName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FamilyHistoryName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Master_FamilyHistory, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_Appointment_Winservice table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Appointment_Winservice: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Appointment_Winservice> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Appointment_Winservice>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Appointment_Winservice> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Appointment_Winservice item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Appointment_Winservice item=new TBL_Appointment_Winservice();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Appointment_Winservice> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Appointment_Winservice(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Appointment_Winservice.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Appointment_Winservice>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Appointment_Winservice(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Appointment_Winservice(Expression<Func<TBL_Appointment_Winservice, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Appointment_Winservice> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Appointment_Winservice> _repo;
            
            if(db.TestMode){
                TBL_Appointment_Winservice.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Appointment_Winservice>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Appointment_Winservice> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Appointment_Winservice SingleOrDefault(Expression<Func<TBL_Appointment_Winservice, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Appointment_Winservice single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Appointment_Winservice SingleOrDefault(Expression<Func<TBL_Appointment_Winservice, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Appointment_Winservice single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Appointment_Winservice, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Appointment_Winservice, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Appointment_Winservice> Find(Expression<Func<TBL_Appointment_Winservice, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Appointment_Winservice> Find(Expression<Func<TBL_Appointment_Winservice, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Appointment_Winservice> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Appointment_Winservice> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Appointment_Winservice> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Appointment_Winservice> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Appointment_Winservice> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Appointment_Winservice> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "WinServiceId";
        }

        public object KeyValue()
        {
            return this.WinServiceId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.EmailId.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Appointment_Winservice)){
                TBL_Appointment_Winservice compare=(TBL_Appointment_Winservice)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.WinServiceId;
        }
        
        public string DescriptorValue()
        {
                            return this.EmailId.ToString();
                    }

        public string DescriptorColumn() {
            return "EmailId";
        }
        public static string GetKeyColumn()
        {
            return "WinServiceId";
        }        
        public static string GetDescriptorColumn()
        {
            return "EmailId";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _WinServiceId;
        public int WinServiceId
        {
            get { return _WinServiceId; }
            set
            {
                if(_WinServiceId!=value){
                    _WinServiceId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="WinServiceId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _AppointmentId;
        public int? AppointmentId
        {
            get { return _AppointmentId; }
            set
            {
                if(_AppointmentId!=value){
                    _AppointmentId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AppointmentId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _OrganizationId;
        public int? OrganizationId
        {
            get { return _OrganizationId; }
            set
            {
                if(_OrganizationId!=value){
                    _OrganizationId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrganizationId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _PatientId;
        public int? PatientId
        {
            get { return _PatientId; }
            set
            {
                if(_PatientId!=value){
                    _PatientId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PatientId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _DoctorId;
        public int? DoctorId
        {
            get { return _DoctorId; }
            set
            {
                if(_DoctorId!=value){
                    _DoctorId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DoctorId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _DoctorTimingId;
        public int? DoctorTimingId
        {
            get { return _DoctorTimingId; }
            set
            {
                if(_DoctorTimingId!=value){
                    _DoctorTimingId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DoctorTimingId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _ServiceId;
        public int? ServiceId
        {
            get { return _ServiceId; }
            set
            {
                if(_ServiceId!=value){
                    _ServiceId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ServiceId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _ServiceTimingId;
        public int? ServiceTimingId
        {
            get { return _ServiceTimingId; }
            set
            {
                if(_ServiceTimingId!=value){
                    _ServiceTimingId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ServiceTimingId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _EmailId;
        public string EmailId
        {
            get { return _EmailId; }
            set
            {
                if(_EmailId!=value){
                    _EmailId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EmailId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _MobileId;
        public string MobileId
        {
            get { return _MobileId; }
            set
            {
                if(_MobileId!=value){
                    _MobileId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MobileId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _AppointmentDate;
        public DateTime? AppointmentDate
        {
            get { return _AppointmentDate; }
            set
            {
                if(_AppointmentDate!=value){
                    _AppointmentDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AppointmentDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _MessageDescription;
        public string MessageDescription
        {
            get { return _MessageDescription; }
            set
            {
                if(_MessageDescription!=value){
                    _MessageDescription=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MessageDescription");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _AccountTypeId;
        public int? AccountTypeId
        {
            get { return _AccountTypeId; }
            set
            {
                if(_AccountTypeId!=value){
                    _AccountTypeId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AccountTypeId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsSmsSent;
        public bool? IsSmsSent
        {
            get { return _IsSmsSent; }
            set
            {
                if(_IsSmsSent!=value){
                    _IsSmsSent=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsSmsSent");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsEmailSent;
        public bool? IsEmailSent
        {
            get { return _IsEmailSent; }
            set
            {
                if(_IsEmailSent!=value){
                    _IsEmailSent=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsEmailSent");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Mobile;
        public string Mobile
        {
            get { return _Mobile; }
            set
            {
                if(_Mobile!=value){
                    _Mobile=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Mobile");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ExternalId;
        public string ExternalId
        {
            get { return _ExternalId; }
            set
            {
                if(_ExternalId!=value){
                    _ExternalId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ExternalId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreatedOn;
        public DateTime? CreatedOn
        {
            get { return _CreatedOn; }
            set
            {
                if(_CreatedOn!=value){
                    _CreatedOn=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOn");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            this.CreatedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Appointment_Winservice, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_Master_Relationship table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Master_Relationship: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Master_Relationship> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Master_Relationship>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Master_Relationship> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Master_Relationship item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Master_Relationship item=new TBL_Master_Relationship();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Master_Relationship> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Master_Relationship(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Master_Relationship.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Master_Relationship>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Master_Relationship(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Master_Relationship(Expression<Func<TBL_Master_Relationship, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Master_Relationship> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Master_Relationship> _repo;
            
            if(db.TestMode){
                TBL_Master_Relationship.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Master_Relationship>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Master_Relationship> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Master_Relationship SingleOrDefault(Expression<Func<TBL_Master_Relationship, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Master_Relationship single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Master_Relationship SingleOrDefault(Expression<Func<TBL_Master_Relationship, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Master_Relationship single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Master_Relationship, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Master_Relationship, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Master_Relationship> Find(Expression<Func<TBL_Master_Relationship, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Master_Relationship> Find(Expression<Func<TBL_Master_Relationship, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Master_Relationship> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Master_Relationship> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Master_Relationship> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Master_Relationship> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Master_Relationship> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Master_Relationship> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "RelationshipId";
        }

        public object KeyValue()
        {
            return this.RelationshipId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Relationship.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Master_Relationship)){
                TBL_Master_Relationship compare=(TBL_Master_Relationship)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.RelationshipId;
        }
        
        public string DescriptorValue()
        {
                            return this.Relationship.ToString();
                    }

        public string DescriptorColumn() {
            return "Relationship";
        }
        public static string GetKeyColumn()
        {
            return "RelationshipId";
        }        
        public static string GetDescriptorColumn()
        {
            return "Relationship";
        }
        
        #region ' Foreign Keys '
        public IQueryable<TBL_Patient> TBL_Patients
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_Patient.GetRepo();
                  return from items in repo.GetAll()
                       where items.RelationshipId == _RelationshipId
                       select items;
            }
        }

        #endregion
        

        int _RelationshipId;
        public int RelationshipId
        {
            get { return _RelationshipId; }
            set
            {
                if(_RelationshipId!=value){
                    _RelationshipId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RelationshipId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Relationship;
        public string Relationship
        {
            get { return _Relationship; }
            set
            {
                if(_Relationship!=value){
                    _Relationship=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Relationship");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Master_Relationship, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_Master_Status table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Master_Status: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Master_Status> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Master_Status>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Master_Status> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Master_Status item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Master_Status item=new TBL_Master_Status();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Master_Status> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Master_Status(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Master_Status.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Master_Status>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Master_Status(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Master_Status(Expression<Func<TBL_Master_Status, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Master_Status> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Master_Status> _repo;
            
            if(db.TestMode){
                TBL_Master_Status.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Master_Status>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Master_Status> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Master_Status SingleOrDefault(Expression<Func<TBL_Master_Status, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Master_Status single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Master_Status SingleOrDefault(Expression<Func<TBL_Master_Status, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Master_Status single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Master_Status, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Master_Status, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Master_Status> Find(Expression<Func<TBL_Master_Status, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Master_Status> Find(Expression<Func<TBL_Master_Status, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Master_Status> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Master_Status> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Master_Status> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Master_Status> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Master_Status> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Master_Status> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "StatusId";
        }

        public object KeyValue()
        {
            return this.StatusId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.StatusName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Master_Status)){
                TBL_Master_Status compare=(TBL_Master_Status)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.StatusId;
        }
        
        public string DescriptorValue()
        {
                            return this.StatusName.ToString();
                    }

        public string DescriptorColumn() {
            return "StatusName";
        }
        public static string GetKeyColumn()
        {
            return "StatusId";
        }        
        public static string GetDescriptorColumn()
        {
            return "StatusName";
        }
        
        #region ' Foreign Keys '
        public IQueryable<TBL_Appointment> TBL_Appointments
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_Appointment.GetRepo();
                  return from items in repo.GetAll()
                       where items.StatusId == _StatusId
                       select items;
            }
        }

        #endregion
        

        int _StatusId;
        public int StatusId
        {
            get { return _StatusId; }
            set
            {
                if(_StatusId!=value){
                    _StatusId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StatusId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _StatusName;
        public string StatusName
        {
            get { return _StatusName; }
            set
            {
                if(_StatusName!=value){
                    _StatusName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StatusName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Master_Status, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_Doctor_Experience table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Doctor_Experience: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Doctor_Experience> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Doctor_Experience>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Doctor_Experience> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Doctor_Experience item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Doctor_Experience item=new TBL_Doctor_Experience();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Doctor_Experience> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Doctor_Experience(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Doctor_Experience.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Doctor_Experience>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Doctor_Experience(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Doctor_Experience(Expression<Func<TBL_Doctor_Experience, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Doctor_Experience> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Doctor_Experience> _repo;
            
            if(db.TestMode){
                TBL_Doctor_Experience.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Doctor_Experience>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Doctor_Experience> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Doctor_Experience SingleOrDefault(Expression<Func<TBL_Doctor_Experience, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Doctor_Experience single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Doctor_Experience SingleOrDefault(Expression<Func<TBL_Doctor_Experience, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Doctor_Experience single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Doctor_Experience, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Doctor_Experience, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Doctor_Experience> Find(Expression<Func<TBL_Doctor_Experience, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Doctor_Experience> Find(Expression<Func<TBL_Doctor_Experience, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Doctor_Experience> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Doctor_Experience> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Doctor_Experience> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Doctor_Experience> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Doctor_Experience> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Doctor_Experience> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ExperienceId";
        }

        public object KeyValue()
        {
            return this.ExperienceId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.MedicalServiceName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Doctor_Experience)){
                TBL_Doctor_Experience compare=(TBL_Doctor_Experience)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.ExperienceId;
        }
        
        public string DescriptorValue()
        {
                            return this.MedicalServiceName.ToString();
                    }

        public string DescriptorColumn() {
            return "MedicalServiceName";
        }
        public static string GetKeyColumn()
        {
            return "ExperienceId";
        }        
        public static string GetDescriptorColumn()
        {
            return "MedicalServiceName";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _ExperienceId;
        public int ExperienceId
        {
            get { return _ExperienceId; }
            set
            {
                if(_ExperienceId!=value){
                    _ExperienceId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ExperienceId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _MedicalServiceName;
        public string MedicalServiceName
        {
            get { return _MedicalServiceName; }
            set
            {
                if(_MedicalServiceName!=value){
                    _MedicalServiceName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MedicalServiceName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Title;
        public string Title
        {
            get { return _Title; }
            set
            {
                if(_Title!=value){
                    _Title=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Title");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _CountryId;
        public int? CountryId
        {
            get { return _CountryId; }
            set
            {
                if(_CountryId!=value){
                    _CountryId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CountryId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _StateId;
        public int? StateId
        {
            get { return _StateId; }
            set
            {
                if(_StateId!=value){
                    _StateId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StateId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _CityId;
        public int? CityId
        {
            get { return _CityId; }
            set
            {
                if(_CityId!=value){
                    _CityId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CityId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _YearFrom;
        public int? YearFrom
        {
            get { return _YearFrom; }
            set
            {
                if(_YearFrom!=value){
                    _YearFrom=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="YearFrom");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _MonthFrom;
        public int? MonthFrom
        {
            get { return _MonthFrom; }
            set
            {
                if(_MonthFrom!=value){
                    _MonthFrom=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MonthFrom");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _YearTo;
        public int? YearTo
        {
            get { return _YearTo; }
            set
            {
                if(_YearTo!=value){
                    _YearTo=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="YearTo");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _MonthTo;
        public int? MonthTo
        {
            get { return _MonthTo; }
            set
            {
                if(_MonthTo!=value){
                    _MonthTo=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MonthTo");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Notes;
        public string Notes
        {
            get { return _Notes; }
            set
            {
                if(_Notes!=value){
                    _Notes=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Notes");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _DoctorId;
        public int? DoctorId
        {
            get { return _DoctorId; }
            set
            {
                if(_DoctorId!=value){
                    _DoctorId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DoctorId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Doctor_Experience, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_Master_PersonalHistory table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Master_PersonalHistory: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Master_PersonalHistory> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Master_PersonalHistory>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Master_PersonalHistory> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Master_PersonalHistory item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Master_PersonalHistory item=new TBL_Master_PersonalHistory();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Master_PersonalHistory> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Master_PersonalHistory(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Master_PersonalHistory.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Master_PersonalHistory>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Master_PersonalHistory(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Master_PersonalHistory(Expression<Func<TBL_Master_PersonalHistory, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Master_PersonalHistory> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Master_PersonalHistory> _repo;
            
            if(db.TestMode){
                TBL_Master_PersonalHistory.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Master_PersonalHistory>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Master_PersonalHistory> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Master_PersonalHistory SingleOrDefault(Expression<Func<TBL_Master_PersonalHistory, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Master_PersonalHistory single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Master_PersonalHistory SingleOrDefault(Expression<Func<TBL_Master_PersonalHistory, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Master_PersonalHistory single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Master_PersonalHistory, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Master_PersonalHistory, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Master_PersonalHistory> Find(Expression<Func<TBL_Master_PersonalHistory, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Master_PersonalHistory> Find(Expression<Func<TBL_Master_PersonalHistory, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Master_PersonalHistory> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Master_PersonalHistory> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Master_PersonalHistory> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Master_PersonalHistory> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Master_PersonalHistory> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Master_PersonalHistory> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "PersonalHistoryId";
        }

        public object KeyValue()
        {
            return this.PersonalHistoryId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.PersonalHistoryName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Master_PersonalHistory)){
                TBL_Master_PersonalHistory compare=(TBL_Master_PersonalHistory)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.PersonalHistoryId;
        }
        
        public string DescriptorValue()
        {
                            return this.PersonalHistoryName.ToString();
                    }

        public string DescriptorColumn() {
            return "PersonalHistoryName";
        }
        public static string GetKeyColumn()
        {
            return "PersonalHistoryId";
        }        
        public static string GetDescriptorColumn()
        {
            return "PersonalHistoryName";
        }
        
        #region ' Foreign Keys '
        public IQueryable<TBL_Patient_PersonalHistory> TBL_Patient_PersonalHistories
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_Patient_PersonalHistory.GetRepo();
                  return from items in repo.GetAll()
                       where items.PersonalHistoryId == _PersonalHistoryId
                       select items;
            }
        }

        #endregion
        

        int _PersonalHistoryId;
        public int PersonalHistoryId
        {
            get { return _PersonalHistoryId; }
            set
            {
                if(_PersonalHistoryId!=value){
                    _PersonalHistoryId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PersonalHistoryId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _PersonalHistoryName;
        public string PersonalHistoryName
        {
            get { return _PersonalHistoryName; }
            set
            {
                if(_PersonalHistoryName!=value){
                    _PersonalHistoryName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PersonalHistoryName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Master_PersonalHistory, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_Patient_SearchCount table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Patient_SearchCount: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Patient_SearchCount> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Patient_SearchCount>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Patient_SearchCount> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Patient_SearchCount item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Patient_SearchCount item=new TBL_Patient_SearchCount();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Patient_SearchCount> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Patient_SearchCount(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Patient_SearchCount.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Patient_SearchCount>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Patient_SearchCount(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Patient_SearchCount(Expression<Func<TBL_Patient_SearchCount, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Patient_SearchCount> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Patient_SearchCount> _repo;
            
            if(db.TestMode){
                TBL_Patient_SearchCount.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Patient_SearchCount>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Patient_SearchCount> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Patient_SearchCount SingleOrDefault(Expression<Func<TBL_Patient_SearchCount, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Patient_SearchCount single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Patient_SearchCount SingleOrDefault(Expression<Func<TBL_Patient_SearchCount, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Patient_SearchCount single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Patient_SearchCount, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Patient_SearchCount, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Patient_SearchCount> Find(Expression<Func<TBL_Patient_SearchCount, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Patient_SearchCount> Find(Expression<Func<TBL_Patient_SearchCount, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Patient_SearchCount> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Patient_SearchCount> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Patient_SearchCount> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Patient_SearchCount> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Patient_SearchCount> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Patient_SearchCount> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "SearchId";
        }

        public object KeyValue()
        {
            return this.SearchId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.CountryName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Patient_SearchCount)){
                TBL_Patient_SearchCount compare=(TBL_Patient_SearchCount)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.SearchId;
        }
        
        public string DescriptorValue()
        {
                            return this.CountryName.ToString();
                    }

        public string DescriptorColumn() {
            return "CountryName";
        }
        public static string GetKeyColumn()
        {
            return "SearchId";
        }        
        public static string GetDescriptorColumn()
        {
            return "CountryName";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _SearchId;
        public int SearchId
        {
            get { return _SearchId; }
            set
            {
                if(_SearchId!=value){
                    _SearchId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SearchId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _PatientId;
        public int? PatientId
        {
            get { return _PatientId; }
            set
            {
                if(_PatientId!=value){
                    _PatientId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PatientId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CountryName;
        public string CountryName
        {
            get { return _CountryName; }
            set
            {
                if(_CountryName!=value){
                    _CountryName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CountryName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _StateName;
        public string StateName
        {
            get { return _StateName; }
            set
            {
                if(_StateName!=value){
                    _StateName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StateName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CityName;
        public string CityName
        {
            get { return _CityName; }
            set
            {
                if(_CityName!=value){
                    _CityName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CityName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Speciality;
        public string Speciality
        {
            get { return _Speciality; }
            set
            {
                if(_Speciality!=value){
                    _Speciality=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Speciality");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _SpecialityType;
        public int? SpecialityType
        {
            get { return _SpecialityType; }
            set
            {
                if(_SpecialityType!=value){
                    _SpecialityType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SpecialityType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _SearchCount;
        public int? SearchCount
        {
            get { return _SearchCount; }
            set
            {
                if(_SearchCount!=value){
                    _SearchCount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SearchCount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _SearchType;
        public int? SearchType
        {
            get { return _SearchType; }
            set
            {
                if(_SearchType!=value){
                    _SearchType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SearchType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreatedOn;
        public DateTime? CreatedOn
        {
            get { return _CreatedOn; }
            set
            {
                if(_CreatedOn!=value){
                    _CreatedOn=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOn");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            this.CreatedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Patient_SearchCount, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_Patient_FamilyHistory table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Patient_FamilyHistory: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Patient_FamilyHistory> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Patient_FamilyHistory>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Patient_FamilyHistory> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Patient_FamilyHistory item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Patient_FamilyHistory item=new TBL_Patient_FamilyHistory();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Patient_FamilyHistory> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Patient_FamilyHistory(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Patient_FamilyHistory.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Patient_FamilyHistory>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Patient_FamilyHistory(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Patient_FamilyHistory(Expression<Func<TBL_Patient_FamilyHistory, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Patient_FamilyHistory> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Patient_FamilyHistory> _repo;
            
            if(db.TestMode){
                TBL_Patient_FamilyHistory.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Patient_FamilyHistory>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Patient_FamilyHistory> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Patient_FamilyHistory SingleOrDefault(Expression<Func<TBL_Patient_FamilyHistory, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Patient_FamilyHistory single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Patient_FamilyHistory SingleOrDefault(Expression<Func<TBL_Patient_FamilyHistory, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Patient_FamilyHistory single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Patient_FamilyHistory, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Patient_FamilyHistory, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Patient_FamilyHistory> Find(Expression<Func<TBL_Patient_FamilyHistory, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Patient_FamilyHistory> Find(Expression<Func<TBL_Patient_FamilyHistory, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Patient_FamilyHistory> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Patient_FamilyHistory> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Patient_FamilyHistory> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Patient_FamilyHistory> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Patient_FamilyHistory> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Patient_FamilyHistory> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "PatientId";
        }

        public object KeyValue()
        {
            return this.PatientId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.FamilyHistoryId.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Patient_FamilyHistory)){
                TBL_Patient_FamilyHistory compare=(TBL_Patient_FamilyHistory)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.PatientId;
        }
        
        public string DescriptorValue()
        {
                            return this.FamilyHistoryId.ToString();
                    }

        public string DescriptorColumn() {
            return "FamilyHistoryId";
        }
        public static string GetKeyColumn()
        {
            return "PatientId";
        }        
        public static string GetDescriptorColumn()
        {
            return "FamilyHistoryId";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int? _PatientId;
        public int? PatientId
        {
            get { return _PatientId; }
            set
            {
                if(_PatientId!=value){
                    _PatientId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PatientId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _FamilyHistoryId;
        public int? FamilyHistoryId
        {
            get { return _FamilyHistoryId; }
            set
            {
                if(_FamilyHistoryId!=value){
                    _FamilyHistoryId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FamilyHistoryId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Patient_FamilyHistory, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_Master_PastHistory table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Master_PastHistory: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Master_PastHistory> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Master_PastHistory>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Master_PastHistory> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Master_PastHistory item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Master_PastHistory item=new TBL_Master_PastHistory();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Master_PastHistory> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Master_PastHistory(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Master_PastHistory.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Master_PastHistory>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Master_PastHistory(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Master_PastHistory(Expression<Func<TBL_Master_PastHistory, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Master_PastHistory> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Master_PastHistory> _repo;
            
            if(db.TestMode){
                TBL_Master_PastHistory.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Master_PastHistory>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Master_PastHistory> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Master_PastHistory SingleOrDefault(Expression<Func<TBL_Master_PastHistory, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Master_PastHistory single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Master_PastHistory SingleOrDefault(Expression<Func<TBL_Master_PastHistory, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Master_PastHistory single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Master_PastHistory, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Master_PastHistory, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Master_PastHistory> Find(Expression<Func<TBL_Master_PastHistory, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Master_PastHistory> Find(Expression<Func<TBL_Master_PastHistory, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Master_PastHistory> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Master_PastHistory> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Master_PastHistory> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Master_PastHistory> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Master_PastHistory> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Master_PastHistory> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "PastHistoryId";
        }

        public object KeyValue()
        {
            return this.PastHistoryId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.PastHistoryName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Master_PastHistory)){
                TBL_Master_PastHistory compare=(TBL_Master_PastHistory)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.PastHistoryId;
        }
        
        public string DescriptorValue()
        {
                            return this.PastHistoryName.ToString();
                    }

        public string DescriptorColumn() {
            return "PastHistoryName";
        }
        public static string GetKeyColumn()
        {
            return "PastHistoryId";
        }        
        public static string GetDescriptorColumn()
        {
            return "PastHistoryName";
        }
        
        #region ' Foreign Keys '
        public IQueryable<TBL_Patient_PastHistory> TBL_Patient_PastHistories
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_Patient_PastHistory.GetRepo();
                  return from items in repo.GetAll()
                       where items.PastHistoryId == _PastHistoryId
                       select items;
            }
        }

        #endregion
        

        int _PastHistoryId;
        public int PastHistoryId
        {
            get { return _PastHistoryId; }
            set
            {
                if(_PastHistoryId!=value){
                    _PastHistoryId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PastHistoryId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _PastHistoryName;
        public string PastHistoryName
        {
            get { return _PastHistoryName; }
            set
            {
                if(_PastHistoryName!=value){
                    _PastHistoryName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PastHistoryName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Master_PastHistory, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_Patient table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Patient: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Patient> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Patient>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Patient> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Patient item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Patient item=new TBL_Patient();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Patient> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Patient(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Patient.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Patient>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Patient(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Patient(Expression<Func<TBL_Patient, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Patient> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Patient> _repo;
            
            if(db.TestMode){
                TBL_Patient.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Patient>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Patient> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Patient SingleOrDefault(Expression<Func<TBL_Patient, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Patient single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Patient SingleOrDefault(Expression<Func<TBL_Patient, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Patient single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Patient, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Patient, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Patient> Find(Expression<Func<TBL_Patient, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Patient> Find(Expression<Func<TBL_Patient, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Patient> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Patient> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Patient> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Patient> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Patient> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Patient> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "PatientId";
        }

        public object KeyValue()
        {
            return this.PatientId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.FirstName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Patient)){
                TBL_Patient compare=(TBL_Patient)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.PatientId;
        }
        
        public string DescriptorValue()
        {
                            return this.FirstName.ToString();
                    }

        public string DescriptorColumn() {
            return "FirstName";
        }
        public static string GetKeyColumn()
        {
            return "PatientId";
        }        
        public static string GetDescriptorColumn()
        {
            return "FirstName";
        }
        
        #region ' Foreign Keys '
        public IQueryable<TBL_Appointment> TBL_Appointments
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_Appointment.GetRepo();
                  return from items in repo.GetAll()
                       where items.PatientId == _PatientId
                       select items;
            }
        }

        public IQueryable<TBL_Patient_PastHistory> TBL_Patient_PastHistories
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_Patient_PastHistory.GetRepo();
                  return from items in repo.GetAll()
                       where items.PatientId == _PatientId
                       select items;
            }
        }

        public IQueryable<TBL_Patient_PersonalHistory> TBL_Patient_PersonalHistories
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_Patient_PersonalHistory.GetRepo();
                  return from items in repo.GetAll()
                       where items.PatientId == _PatientId
                       select items;
            }
        }

        public IQueryable<TBL_Login> TBL_Logins
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_Login.GetRepo();
                  return from items in repo.GetAll()
                       where items.LoginId == _LoginId
                       select items;
            }
        }

        public IQueryable<TBL_Master_City_old> TBL_Master_City_olds
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_Master_City_old.GetRepo();
                  return from items in repo.GetAll()
                       where items.CityId == _CityId
                       select items;
            }
        }

        public IQueryable<TBL_Master_Country_old> TBL_Master_Country_olds
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_Master_Country_old.GetRepo();
                  return from items in repo.GetAll()
                       where items.CountryId == _CountryId
                       select items;
            }
        }

        public IQueryable<TBL_Master_Relationship> TBL_Master_Relationships
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_Master_Relationship.GetRepo();
                  return from items in repo.GetAll()
                       where items.RelationshipId == _RelationshipId
                       select items;
            }
        }

        public IQueryable<TBL_Master_State_old> TBL_Master_State_olds
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_Master_State_old.GetRepo();
                  return from items in repo.GetAll()
                       where items.StateId == _StateId
                       select items;
            }
        }

        public IQueryable<TBL_Question> TBL_Questions
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_Question.GetRepo();
                  return from items in repo.GetAll()
                       where items.PatientId == _PatientId
                       select items;
            }
        }

        public IQueryable<TBL_Question> TBL_Questions9
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_Question.GetRepo();
                  return from items in repo.GetAll()
                       where items.PatientId == _PatientId
                       select items;
            }
        }

        public IQueryable<TBL_Reference> TBL_References
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_Reference.GetRepo();
                  return from items in repo.GetAll()
                       where items.PatientId == _PatientId
                       select items;
            }
        }

        #endregion
        

        int _PatientId;
        public int PatientId
        {
            get { return _PatientId; }
            set
            {
                if(_PatientId!=value){
                    _PatientId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PatientId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _LoginId;
        public int? LoginId
        {
            get { return _LoginId; }
            set
            {
                if(_LoginId!=value){
                    _LoginId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LoginId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _FirstName;
        public string FirstName
        {
            get { return _FirstName; }
            set
            {
                if(_FirstName!=value){
                    _FirstName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FirstName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _LastName;
        public string LastName
        {
            get { return _LastName; }
            set
            {
                if(_LastName!=value){
                    _LastName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LastName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _DateofBirth;
        public DateTime? DateofBirth
        {
            get { return _DateofBirth; }
            set
            {
                if(_DateofBirth!=value){
                    _DateofBirth=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DateofBirth");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _Gender;
        public bool? Gender
        {
            get { return _Gender; }
            set
            {
                if(_Gender!=value){
                    _Gender=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Gender");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _CountryId;
        public int? CountryId
        {
            get { return _CountryId; }
            set
            {
                if(_CountryId!=value){
                    _CountryId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CountryId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _StateId;
        public int? StateId
        {
            get { return _StateId; }
            set
            {
                if(_StateId!=value){
                    _StateId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StateId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _CityId;
        public int? CityId
        {
            get { return _CityId; }
            set
            {
                if(_CityId!=value){
                    _CityId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CityId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Address;
        public string Address
        {
            get { return _Address; }
            set
            {
                if(_Address!=value){
                    _Address=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Address");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _AddressLine1;
        public string AddressLine1
        {
            get { return _AddressLine1; }
            set
            {
                if(_AddressLine1!=value){
                    _AddressLine1=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AddressLine1");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _AddressLine2;
        public string AddressLine2
        {
            get { return _AddressLine2; }
            set
            {
                if(_AddressLine2!=value){
                    _AddressLine2=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AddressLine2");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _PostalCode;
        public string PostalCode
        {
            get { return _PostalCode; }
            set
            {
                if(_PostalCode!=value){
                    _PostalCode=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PostalCode");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Phone;
        public string Phone
        {
            get { return _Phone; }
            set
            {
                if(_Phone!=value){
                    _Phone=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Phone");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Mobile;
        public string Mobile
        {
            get { return _Mobile; }
            set
            {
                if(_Mobile!=value){
                    _Mobile=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Mobile");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _RelationshipId;
        public int? RelationshipId
        {
            get { return _RelationshipId; }
            set
            {
                if(_RelationshipId!=value){
                    _RelationshipId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RelationshipId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _ParentId;
        public int? ParentId
        {
            get { return _ParentId; }
            set
            {
                if(_ParentId!=value){
                    _ParentId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ParentId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ReferenceToken;
        public string ReferenceToken
        {
            get { return _ReferenceToken; }
            set
            {
                if(_ReferenceToken!=value){
                    _ReferenceToken=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ReferenceToken");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _ReferedPatientId;
        public int? ReferedPatientId
        {
            get { return _ReferedPatientId; }
            set
            {
                if(_ReferedPatientId!=value){
                    _ReferedPatientId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ReferedPatientId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreatedOn;
        public DateTime? CreatedOn
        {
            get { return _CreatedOn; }
            set
            {
                if(_CreatedOn!=value){
                    _CreatedOn=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOn");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _ModifiedOn;
        public DateTime? ModifiedOn
        {
            get { return _ModifiedOn; }
            set
            {
                if(_ModifiedOn!=value){
                    _ModifiedOn=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ModifiedOn");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsActivated;
        public bool? IsActivated
        {
            get { return _IsActivated; }
            set
            {
                if(_IsActivated!=value){
                    _IsActivated=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsActivated");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsDeleted;
        public bool? IsDeleted
        {
            get { return _IsDeleted; }
            set
            {
                if(_IsDeleted!=value){
                    _IsDeleted=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsDeleted");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if (!_dirtyColumns.Any(x => x.Name.ToLower() == "modifiedon")) {
               this.ModifiedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            }            
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            this.ModifiedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            this.CreatedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            this.ModifiedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                         
             this.IsDeleted=true;
            _repo.Update(this,provider);
                
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Patient, bool>> expression) {
            var repo = GetRepo();
            
            
            List<TBL_Patient> items=repo.GetAll().Where(expression).ToList();
            items.ForEach(x=>x.IsDeleted=true);
            repo.Update(items);
            
        }

                
        public static void Destroy(Func<TBL_Patient, bool> expression) {
            var repo = GetRepo();
            repo.Delete(expression);
        }
        
        public static void Destroy(object key) {
            var repo = GetRepo();
            repo.Delete(key);
        }
        
        public static void Destroy(object key, IDataProvider provider) {
        
            var repo = GetRepo();
            repo.Delete(key,provider);
            
        }        
        
        public void Destroy() {
            _repo.Delete(KeyValue());
        }        
        public void Destroy(IDataProvider provider) {
            _repo.Delete(KeyValue(), provider);
        }         
        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_Master_AccountType table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Master_AccountType: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Master_AccountType> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Master_AccountType>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Master_AccountType> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Master_AccountType item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Master_AccountType item=new TBL_Master_AccountType();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Master_AccountType> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Master_AccountType(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Master_AccountType.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Master_AccountType>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Master_AccountType(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Master_AccountType(Expression<Func<TBL_Master_AccountType, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Master_AccountType> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Master_AccountType> _repo;
            
            if(db.TestMode){
                TBL_Master_AccountType.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Master_AccountType>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Master_AccountType> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Master_AccountType SingleOrDefault(Expression<Func<TBL_Master_AccountType, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Master_AccountType single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Master_AccountType SingleOrDefault(Expression<Func<TBL_Master_AccountType, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Master_AccountType single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Master_AccountType, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Master_AccountType, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Master_AccountType> Find(Expression<Func<TBL_Master_AccountType, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Master_AccountType> Find(Expression<Func<TBL_Master_AccountType, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Master_AccountType> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Master_AccountType> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Master_AccountType> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Master_AccountType> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Master_AccountType> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Master_AccountType> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "AccountTypeId";
        }

        public object KeyValue()
        {
            return this.AccountTypeId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.AccountTypeName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Master_AccountType)){
                TBL_Master_AccountType compare=(TBL_Master_AccountType)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.AccountTypeId;
        }
        
        public string DescriptorValue()
        {
                            return this.AccountTypeName.ToString();
                    }

        public string DescriptorColumn() {
            return "AccountTypeName";
        }
        public static string GetKeyColumn()
        {
            return "AccountTypeId";
        }        
        public static string GetDescriptorColumn()
        {
            return "AccountTypeName";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _AccountTypeId;
        public int AccountTypeId
        {
            get { return _AccountTypeId; }
            set
            {
                if(_AccountTypeId!=value){
                    _AccountTypeId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AccountTypeId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _AccountTypeName;
        public string AccountTypeName
        {
            get { return _AccountTypeName; }
            set
            {
                if(_AccountTypeName!=value){
                    _AccountTypeName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AccountTypeName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Prefix;
        public string Prefix
        {
            get { return _Prefix; }
            set
            {
                if(_Prefix!=value){
                    _Prefix=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Prefix");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreatedOn;
        public DateTime? CreatedOn
        {
            get { return _CreatedOn; }
            set
            {
                if(_CreatedOn!=value){
                    _CreatedOn=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOn");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IsDeleted;
        public bool IsDeleted
        {
            get { return _IsDeleted; }
            set
            {
                if(_IsDeleted!=value){
                    _IsDeleted=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsDeleted");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            this.CreatedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                         
             this.IsDeleted=true;
            _repo.Update(this,provider);
                
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Master_AccountType, bool>> expression) {
            var repo = GetRepo();
            
            
            List<TBL_Master_AccountType> items=repo.GetAll().Where(expression).ToList();
            items.ForEach(x=>x.IsDeleted=true);
            repo.Update(items);
            
        }

                
        public static void Destroy(Func<TBL_Master_AccountType, bool> expression) {
            var repo = GetRepo();
            repo.Delete(expression);
        }
        
        public static void Destroy(object key) {
            var repo = GetRepo();
            repo.Delete(key);
        }
        
        public static void Destroy(object key, IDataProvider provider) {
        
            var repo = GetRepo();
            repo.Delete(key,provider);
            
        }        
        
        public void Destroy() {
            _repo.Delete(KeyValue());
        }        
        public void Destroy(IDataProvider provider) {
            _repo.Delete(KeyValue(), provider);
        }         
        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_Reference table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Reference: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Reference> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Reference>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Reference> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Reference item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Reference item=new TBL_Reference();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Reference> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Reference(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Reference.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Reference>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Reference(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Reference(Expression<Func<TBL_Reference, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Reference> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Reference> _repo;
            
            if(db.TestMode){
                TBL_Reference.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Reference>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Reference> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Reference SingleOrDefault(Expression<Func<TBL_Reference, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Reference single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Reference SingleOrDefault(Expression<Func<TBL_Reference, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Reference single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Reference, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Reference, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Reference> Find(Expression<Func<TBL_Reference, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Reference> Find(Expression<Func<TBL_Reference, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Reference> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Reference> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Reference> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Reference> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Reference> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Reference> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ReferenceId";
        }

        public object KeyValue()
        {
            return this.ReferenceId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Reason.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Reference)){
                TBL_Reference compare=(TBL_Reference)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.ReferenceId;
        }
        
        public string DescriptorValue()
        {
                            return this.Reason.ToString();
                    }

        public string DescriptorColumn() {
            return "Reason";
        }
        public static string GetKeyColumn()
        {
            return "ReferenceId";
        }        
        public static string GetDescriptorColumn()
        {
            return "Reason";
        }
        
        #region ' Foreign Keys '
        public IQueryable<TBL_Doctor> TBL_Doctors
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_Doctor.GetRepo();
                  return from items in repo.GetAll()
                       where items.DoctorId == _ReferedBy
                       select items;
            }
        }

        public IQueryable<TBL_Doctor> TBL_Doctors1
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_Doctor.GetRepo();
                  return from items in repo.GetAll()
                       where items.DoctorId == _ReferedTo
                       select items;
            }
        }

        public IQueryable<TBL_Patient> TBL_Patients
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_Patient.GetRepo();
                  return from items in repo.GetAll()
                       where items.PatientId == _PatientId
                       select items;
            }
        }

        #endregion
        

        int _ReferenceId;
        public int ReferenceId
        {
            get { return _ReferenceId; }
            set
            {
                if(_ReferenceId!=value){
                    _ReferenceId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ReferenceId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _PatientId;
        public int? PatientId
        {
            get { return _PatientId; }
            set
            {
                if(_PatientId!=value){
                    _PatientId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PatientId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _ReferedBy;
        public int? ReferedBy
        {
            get { return _ReferedBy; }
            set
            {
                if(_ReferedBy!=value){
                    _ReferedBy=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ReferedBy");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _ReferedTo;
        public int? ReferedTo
        {
            get { return _ReferedTo; }
            set
            {
                if(_ReferedTo!=value){
                    _ReferedTo=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ReferedTo");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Reason;
        public string Reason
        {
            get { return _Reason; }
            set
            {
                if(_Reason!=value){
                    _Reason=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Reason");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreatedOn;
        public DateTime? CreatedOn
        {
            get { return _CreatedOn; }
            set
            {
                if(_CreatedOn!=value){
                    _CreatedOn=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOn");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsDeleted;
        public bool? IsDeleted
        {
            get { return _IsDeleted; }
            set
            {
                if(_IsDeleted!=value){
                    _IsDeleted=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsDeleted");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            this.CreatedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                         
             this.IsDeleted=true;
            _repo.Update(this,provider);
                
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Reference, bool>> expression) {
            var repo = GetRepo();
            
            
            List<TBL_Reference> items=repo.GetAll().Where(expression).ToList();
            items.ForEach(x=>x.IsDeleted=true);
            repo.Update(items);
            
        }

                
        public static void Destroy(Func<TBL_Reference, bool> expression) {
            var repo = GetRepo();
            repo.Delete(expression);
        }
        
        public static void Destroy(object key) {
            var repo = GetRepo();
            repo.Delete(key);
        }
        
        public static void Destroy(object key, IDataProvider provider) {
        
            var repo = GetRepo();
            repo.Delete(key,provider);
            
        }        
        
        public void Destroy() {
            _repo.Delete(KeyValue());
        }        
        public void Destroy(IDataProvider provider) {
            _repo.Delete(KeyValue(), provider);
        }         
        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_Patient_PersonalHistory table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Patient_PersonalHistory: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Patient_PersonalHistory> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Patient_PersonalHistory>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Patient_PersonalHistory> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Patient_PersonalHistory item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Patient_PersonalHistory item=new TBL_Patient_PersonalHistory();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Patient_PersonalHistory> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Patient_PersonalHistory(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Patient_PersonalHistory.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Patient_PersonalHistory>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Patient_PersonalHistory(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Patient_PersonalHistory(Expression<Func<TBL_Patient_PersonalHistory, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Patient_PersonalHistory> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Patient_PersonalHistory> _repo;
            
            if(db.TestMode){
                TBL_Patient_PersonalHistory.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Patient_PersonalHistory>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Patient_PersonalHistory> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Patient_PersonalHistory SingleOrDefault(Expression<Func<TBL_Patient_PersonalHistory, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Patient_PersonalHistory single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Patient_PersonalHistory SingleOrDefault(Expression<Func<TBL_Patient_PersonalHistory, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Patient_PersonalHistory single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Patient_PersonalHistory, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Patient_PersonalHistory, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Patient_PersonalHistory> Find(Expression<Func<TBL_Patient_PersonalHistory, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Patient_PersonalHistory> Find(Expression<Func<TBL_Patient_PersonalHistory, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Patient_PersonalHistory> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Patient_PersonalHistory> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Patient_PersonalHistory> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Patient_PersonalHistory> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Patient_PersonalHistory> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Patient_PersonalHistory> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "PatientId";
        }

        public object KeyValue()
        {
            return this.PatientId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.PersonalHistoryId.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Patient_PersonalHistory)){
                TBL_Patient_PersonalHistory compare=(TBL_Patient_PersonalHistory)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.PatientId;
        }
        
        public string DescriptorValue()
        {
                            return this.PersonalHistoryId.ToString();
                    }

        public string DescriptorColumn() {
            return "PersonalHistoryId";
        }
        public static string GetKeyColumn()
        {
            return "PatientId";
        }        
        public static string GetDescriptorColumn()
        {
            return "PersonalHistoryId";
        }
        
        #region ' Foreign Keys '
        public IQueryable<TBL_Master_PersonalHistory> TBL_Master_PersonalHistories
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_Master_PersonalHistory.GetRepo();
                  return from items in repo.GetAll()
                       where items.PersonalHistoryId == _PersonalHistoryId
                       select items;
            }
        }

        public IQueryable<TBL_Patient> TBL_Patients
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_Patient.GetRepo();
                  return from items in repo.GetAll()
                       where items.PatientId == _PatientId
                       select items;
            }
        }

        #endregion
        

        int? _PatientId;
        public int? PatientId
        {
            get { return _PatientId; }
            set
            {
                if(_PatientId!=value){
                    _PatientId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PatientId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _PersonalHistoryId;
        public int? PersonalHistoryId
        {
            get { return _PersonalHistoryId; }
            set
            {
                if(_PersonalHistoryId!=value){
                    _PersonalHistoryId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PersonalHistoryId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Patient_PersonalHistory, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_Patient_PastHistory table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Patient_PastHistory: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Patient_PastHistory> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Patient_PastHistory>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Patient_PastHistory> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Patient_PastHistory item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Patient_PastHistory item=new TBL_Patient_PastHistory();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Patient_PastHistory> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Patient_PastHistory(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Patient_PastHistory.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Patient_PastHistory>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Patient_PastHistory(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Patient_PastHistory(Expression<Func<TBL_Patient_PastHistory, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Patient_PastHistory> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Patient_PastHistory> _repo;
            
            if(db.TestMode){
                TBL_Patient_PastHistory.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Patient_PastHistory>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Patient_PastHistory> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Patient_PastHistory SingleOrDefault(Expression<Func<TBL_Patient_PastHistory, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Patient_PastHistory single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Patient_PastHistory SingleOrDefault(Expression<Func<TBL_Patient_PastHistory, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Patient_PastHistory single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Patient_PastHistory, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Patient_PastHistory, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Patient_PastHistory> Find(Expression<Func<TBL_Patient_PastHistory, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Patient_PastHistory> Find(Expression<Func<TBL_Patient_PastHistory, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Patient_PastHistory> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Patient_PastHistory> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Patient_PastHistory> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Patient_PastHistory> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Patient_PastHistory> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Patient_PastHistory> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "PatientId";
        }

        public object KeyValue()
        {
            return this.PatientId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.PastHistoryId.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Patient_PastHistory)){
                TBL_Patient_PastHistory compare=(TBL_Patient_PastHistory)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.PatientId;
        }
        
        public string DescriptorValue()
        {
                            return this.PastHistoryId.ToString();
                    }

        public string DescriptorColumn() {
            return "PastHistoryId";
        }
        public static string GetKeyColumn()
        {
            return "PatientId";
        }        
        public static string GetDescriptorColumn()
        {
            return "PastHistoryId";
        }
        
        #region ' Foreign Keys '
        public IQueryable<TBL_Master_PastHistory> TBL_Master_PastHistories
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_Master_PastHistory.GetRepo();
                  return from items in repo.GetAll()
                       where items.PastHistoryId == _PastHistoryId
                       select items;
            }
        }

        public IQueryable<TBL_Patient> TBL_Patients
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_Patient.GetRepo();
                  return from items in repo.GetAll()
                       where items.PatientId == _PatientId
                       select items;
            }
        }

        #endregion
        

        int? _PatientId;
        public int? PatientId
        {
            get { return _PatientId; }
            set
            {
                if(_PatientId!=value){
                    _PatientId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PatientId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _PastHistoryId;
        public int? PastHistoryId
        {
            get { return _PastHistoryId; }
            set
            {
                if(_PastHistoryId!=value){
                    _PastHistoryId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PastHistoryId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Patient_PastHistory, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_Master_Department table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Master_Department: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Master_Department> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Master_Department>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Master_Department> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Master_Department item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Master_Department item=new TBL_Master_Department();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Master_Department> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Master_Department(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Master_Department.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Master_Department>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Master_Department(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Master_Department(Expression<Func<TBL_Master_Department, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Master_Department> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Master_Department> _repo;
            
            if(db.TestMode){
                TBL_Master_Department.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Master_Department>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Master_Department> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Master_Department SingleOrDefault(Expression<Func<TBL_Master_Department, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Master_Department single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Master_Department SingleOrDefault(Expression<Func<TBL_Master_Department, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Master_Department single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Master_Department, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Master_Department, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Master_Department> Find(Expression<Func<TBL_Master_Department, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Master_Department> Find(Expression<Func<TBL_Master_Department, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Master_Department> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Master_Department> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Master_Department> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Master_Department> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Master_Department> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Master_Department> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "DepartmentId";
        }

        public object KeyValue()
        {
            return this.DepartmentId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.DepartmentName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Master_Department)){
                TBL_Master_Department compare=(TBL_Master_Department)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.DepartmentId;
        }
        
        public string DescriptorValue()
        {
                            return this.DepartmentName.ToString();
                    }

        public string DescriptorColumn() {
            return "DepartmentName";
        }
        public static string GetKeyColumn()
        {
            return "DepartmentId";
        }        
        public static string GetDescriptorColumn()
        {
            return "DepartmentName";
        }
        
        #region ' Foreign Keys '
        public IQueryable<TBL_Doctor> TBL_Doctors
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_Doctor.GetRepo();
                  return from items in repo.GetAll()
                       where items.DepartmentId == _DepartmentId
                       select items;
            }
        }

        public IQueryable<TBL_Service> TBL_Services
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_Service.GetRepo();
                  return from items in repo.GetAll()
                       where items.DepartmentId == _DepartmentId
                       select items;
            }
        }

        #endregion
        

        int _DepartmentId;
        public int DepartmentId
        {
            get { return _DepartmentId; }
            set
            {
                if(_DepartmentId!=value){
                    _DepartmentId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DepartmentId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DepartmentName;
        public string DepartmentName
        {
            get { return _DepartmentName; }
            set
            {
                if(_DepartmentName!=value){
                    _DepartmentName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DepartmentName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Description;
        public string Description
        {
            get { return _Description; }
            set
            {
                if(_Description!=value){
                    _Description=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Description");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _RequestedBy;
        public int? RequestedBy
        {
            get { return _RequestedBy; }
            set
            {
                if(_RequestedBy!=value){
                    _RequestedBy=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RequestedBy");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsApproved;
        public bool? IsApproved
        {
            get { return _IsApproved; }
            set
            {
                if(_IsApproved!=value){
                    _IsApproved=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsApproved");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreatedOn;
        public DateTime? CreatedOn
        {
            get { return _CreatedOn; }
            set
            {
                if(_CreatedOn!=value){
                    _CreatedOn=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOn");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _IsDeleted;
        public int? IsDeleted
        {
            get { return _IsDeleted; }
            set
            {
                if(_IsDeleted!=value){
                    _IsDeleted=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsDeleted");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            this.CreatedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                         
             this.IsDeleted=true;
            _repo.Update(this,provider);
                
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Master_Department, bool>> expression) {
            var repo = GetRepo();
            
            
            List<TBL_Master_Department> items=repo.GetAll().Where(expression).ToList();
            items.ForEach(x=>x.IsDeleted=true);
            repo.Update(items);
            
        }

                
        public static void Destroy(Func<TBL_Master_Department, bool> expression) {
            var repo = GetRepo();
            repo.Delete(expression);
        }
        
        public static void Destroy(object key) {
            var repo = GetRepo();
            repo.Delete(key);
        }
        
        public static void Destroy(object key, IDataProvider provider) {
        
            var repo = GetRepo();
            repo.Delete(key,provider);
            
        }        
        
        public void Destroy() {
            _repo.Delete(KeyValue());
        }        
        public void Destroy(IDataProvider provider) {
            _repo.Delete(KeyValue(), provider);
        }         
        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_Master_City_old table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Master_City_old: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Master_City_old> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Master_City_old>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Master_City_old> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Master_City_old item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Master_City_old item=new TBL_Master_City_old();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Master_City_old> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Master_City_old(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Master_City_old.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Master_City_old>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Master_City_old(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Master_City_old(Expression<Func<TBL_Master_City_old, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Master_City_old> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Master_City_old> _repo;
            
            if(db.TestMode){
                TBL_Master_City_old.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Master_City_old>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Master_City_old> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Master_City_old SingleOrDefault(Expression<Func<TBL_Master_City_old, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Master_City_old single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Master_City_old SingleOrDefault(Expression<Func<TBL_Master_City_old, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Master_City_old single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Master_City_old, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Master_City_old, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Master_City_old> Find(Expression<Func<TBL_Master_City_old, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Master_City_old> Find(Expression<Func<TBL_Master_City_old, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Master_City_old> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Master_City_old> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Master_City_old> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Master_City_old> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Master_City_old> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Master_City_old> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "CityId";
        }

        public object KeyValue()
        {
            return this.CityId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.CityName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Master_City_old)){
                TBL_Master_City_old compare=(TBL_Master_City_old)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.CityId;
        }
        
        public string DescriptorValue()
        {
                            return this.CityName.ToString();
                    }

        public string DescriptorColumn() {
            return "CityName";
        }
        public static string GetKeyColumn()
        {
            return "CityId";
        }        
        public static string GetDescriptorColumn()
        {
            return "CityName";
        }
        
        #region ' Foreign Keys '
        public IQueryable<TBL_Master_State_old> TBL_Master_State_olds
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_Master_State_old.GetRepo();
                  return from items in repo.GetAll()
                       where items.StateId == _StateId
                       select items;
            }
        }

        public IQueryable<TBL_Patient> TBL_Patients
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_Patient.GetRepo();
                  return from items in repo.GetAll()
                       where items.CityId == _CityId
                       select items;
            }
        }

        #endregion
        

        int _CityId;
        public int CityId
        {
            get { return _CityId; }
            set
            {
                if(_CityId!=value){
                    _CityId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CityId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CityName;
        public string CityName
        {
            get { return _CityName; }
            set
            {
                if(_CityName!=value){
                    _CityName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CityName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _StateId;
        public int? StateId
        {
            get { return _StateId; }
            set
            {
                if(_StateId!=value){
                    _StateId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StateId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _LocationId;
        public string LocationId
        {
            get { return _LocationId; }
            set
            {
                if(_LocationId!=value){
                    _LocationId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LocationId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _CountryId;
        public int? CountryId
        {
            get { return _CountryId; }
            set
            {
                if(_CountryId!=value){
                    _CountryId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CountryId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Master_City_old, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_Master_State_old table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Master_State_old: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Master_State_old> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Master_State_old>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Master_State_old> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Master_State_old item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Master_State_old item=new TBL_Master_State_old();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Master_State_old> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Master_State_old(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Master_State_old.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Master_State_old>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Master_State_old(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Master_State_old(Expression<Func<TBL_Master_State_old, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Master_State_old> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Master_State_old> _repo;
            
            if(db.TestMode){
                TBL_Master_State_old.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Master_State_old>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Master_State_old> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Master_State_old SingleOrDefault(Expression<Func<TBL_Master_State_old, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Master_State_old single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Master_State_old SingleOrDefault(Expression<Func<TBL_Master_State_old, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Master_State_old single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Master_State_old, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Master_State_old, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Master_State_old> Find(Expression<Func<TBL_Master_State_old, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Master_State_old> Find(Expression<Func<TBL_Master_State_old, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Master_State_old> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Master_State_old> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Master_State_old> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Master_State_old> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Master_State_old> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Master_State_old> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "StateId";
        }

        public object KeyValue()
        {
            return this.StateId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.StateName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Master_State_old)){
                TBL_Master_State_old compare=(TBL_Master_State_old)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.StateId;
        }
        
        public string DescriptorValue()
        {
                            return this.StateName.ToString();
                    }

        public string DescriptorColumn() {
            return "StateName";
        }
        public static string GetKeyColumn()
        {
            return "StateId";
        }        
        public static string GetDescriptorColumn()
        {
            return "StateName";
        }
        
        #region ' Foreign Keys '
        public IQueryable<TBL_Master_City_old> TBL_Master_City_olds
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_Master_City_old.GetRepo();
                  return from items in repo.GetAll()
                       where items.StateId == _StateId
                       select items;
            }
        }

        public IQueryable<TBL_Master_Country_old> TBL_Master_Country_olds
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_Master_Country_old.GetRepo();
                  return from items in repo.GetAll()
                       where items.CountryId == _CountryId
                       select items;
            }
        }

        public IQueryable<TBL_Patient> TBL_Patients
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_Patient.GetRepo();
                  return from items in repo.GetAll()
                       where items.StateId == _StateId
                       select items;
            }
        }

        #endregion
        

        int _StateId;
        public int StateId
        {
            get { return _StateId; }
            set
            {
                if(_StateId!=value){
                    _StateId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StateId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _StateName;
        public string StateName
        {
            get { return _StateName; }
            set
            {
                if(_StateName!=value){
                    _StateName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StateName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _CountryId;
        public int? CountryId
        {
            get { return _CountryId; }
            set
            {
                if(_CountryId!=value){
                    _CountryId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CountryId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _StateCode;
        public string StateCode
        {
            get { return _StateCode; }
            set
            {
                if(_StateCode!=value){
                    _StateCode=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StateCode");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Master_State_old, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_GeoPostcodes table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_GeoPostcode: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_GeoPostcode> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_GeoPostcode>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_GeoPostcode> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_GeoPostcode item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_GeoPostcode item=new TBL_GeoPostcode();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_GeoPostcode> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_GeoPostcode(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_GeoPostcode.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_GeoPostcode>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_GeoPostcode(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_GeoPostcode(Expression<Func<TBL_GeoPostcode, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_GeoPostcode> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_GeoPostcode> _repo;
            
            if(db.TestMode){
                TBL_GeoPostcode.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_GeoPostcode>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_GeoPostcode> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_GeoPostcode SingleOrDefault(Expression<Func<TBL_GeoPostcode, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_GeoPostcode single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_GeoPostcode SingleOrDefault(Expression<Func<TBL_GeoPostcode, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_GeoPostcode single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_GeoPostcode, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_GeoPostcode, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_GeoPostcode> Find(Expression<Func<TBL_GeoPostcode, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_GeoPostcode> Find(Expression<Func<TBL_GeoPostcode, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_GeoPostcode> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_GeoPostcode> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_GeoPostcode> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_GeoPostcode> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_GeoPostcode> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_GeoPostcode> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Country";
        }

        public object KeyValue()
        {
            return this.Country;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Country.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_GeoPostcode)){
                TBL_GeoPostcode compare=(TBL_GeoPostcode)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.Country.ToString();
                    }

        public string DescriptorColumn() {
            return "Country";
        }
        public static string GetKeyColumn()
        {
            return "Country";
        }        
        public static string GetDescriptorColumn()
        {
            return "Country";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _Country;
        public string Country
        {
            get { return _Country; }
            set
            {
                if(_Country!=value){
                    _Country=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Country");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Language;
        public string Language
        {
            get { return _Language; }
            set
            {
                if(_Language!=value){
                    _Language=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Language");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        long _ID;
        public long ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _RegISO2;
        public string RegISO2
        {
            get { return _RegISO2; }
            set
            {
                if(_RegISO2!=value){
                    _RegISO2=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RegISO2");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Region1;
        public string Region1
        {
            get { return _Region1; }
            set
            {
                if(_Region1!=value){
                    _Region1=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Region1");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Region2;
        public string Region2
        {
            get { return _Region2; }
            set
            {
                if(_Region2!=value){
                    _Region2=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Region2");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Region3;
        public string Region3
        {
            get { return _Region3; }
            set
            {
                if(_Region3!=value){
                    _Region3=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Region3");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Region4;
        public string Region4
        {
            get { return _Region4; }
            set
            {
                if(_Region4!=value){
                    _Region4=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Region4");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ZIP;
        public string ZIP
        {
            get { return _ZIP; }
            set
            {
                if(_ZIP!=value){
                    _ZIP=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ZIP");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _City;
        public string City
        {
            get { return _City; }
            set
            {
                if(_City!=value){
                    _City=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="City");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Area1;
        public string Area1
        {
            get { return _Area1; }
            set
            {
                if(_Area1!=value){
                    _Area1=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Area1");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Area2;
        public string Area2
        {
            get { return _Area2; }
            set
            {
                if(_Area2!=value){
                    _Area2=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Area2");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        double? _Lat;
        public double? Lat
        {
            get { return _Lat; }
            set
            {
                if(_Lat!=value){
                    _Lat=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Lat");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        double? _Lng;
        public double? Lng
        {
            get { return _Lng; }
            set
            {
                if(_Lng!=value){
                    _Lng=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Lng");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _TZ;
        public string TZ
        {
            get { return _TZ; }
            set
            {
                if(_TZ!=value){
                    _TZ=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TZ");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _UTC;
        public string UTC
        {
            get { return _UTC; }
            set
            {
                if(_UTC!=value){
                    _UTC=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UTC");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DST;
        public string DST
        {
            get { return _DST; }
            set
            {
                if(_DST!=value){
                    _DST=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DST");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_GeoPostcode, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_Master_Country_old table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Master_Country_old: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Master_Country_old> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Master_Country_old>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Master_Country_old> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Master_Country_old item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Master_Country_old item=new TBL_Master_Country_old();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Master_Country_old> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Master_Country_old(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Master_Country_old.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Master_Country_old>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Master_Country_old(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Master_Country_old(Expression<Func<TBL_Master_Country_old, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Master_Country_old> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Master_Country_old> _repo;
            
            if(db.TestMode){
                TBL_Master_Country_old.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Master_Country_old>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Master_Country_old> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Master_Country_old SingleOrDefault(Expression<Func<TBL_Master_Country_old, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Master_Country_old single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Master_Country_old SingleOrDefault(Expression<Func<TBL_Master_Country_old, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Master_Country_old single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Master_Country_old, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Master_Country_old, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Master_Country_old> Find(Expression<Func<TBL_Master_Country_old, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Master_Country_old> Find(Expression<Func<TBL_Master_Country_old, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Master_Country_old> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Master_Country_old> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Master_Country_old> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Master_Country_old> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Master_Country_old> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Master_Country_old> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "CountryId";
        }

        public object KeyValue()
        {
            return this.CountryId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.CountryName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Master_Country_old)){
                TBL_Master_Country_old compare=(TBL_Master_Country_old)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.CountryId;
        }
        
        public string DescriptorValue()
        {
                            return this.CountryName.ToString();
                    }

        public string DescriptorColumn() {
            return "CountryName";
        }
        public static string GetKeyColumn()
        {
            return "CountryId";
        }        
        public static string GetDescriptorColumn()
        {
            return "CountryName";
        }
        
        #region ' Foreign Keys '
        public IQueryable<TBL_Master_State_old> TBL_Master_State_olds
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_Master_State_old.GetRepo();
                  return from items in repo.GetAll()
                       where items.CountryId == _CountryId
                       select items;
            }
        }

        public IQueryable<TBL_Patient> TBL_Patients
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_Patient.GetRepo();
                  return from items in repo.GetAll()
                       where items.CountryId == _CountryId
                       select items;
            }
        }

        #endregion
        

        int _CountryId;
        public int CountryId
        {
            get { return _CountryId; }
            set
            {
                if(_CountryId!=value){
                    _CountryId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CountryId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CountryName;
        public string CountryName
        {
            get { return _CountryName; }
            set
            {
                if(_CountryName!=value){
                    _CountryName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CountryName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CountryCode;
        public string CountryCode
        {
            get { return _CountryCode; }
            set
            {
                if(_CountryCode!=value){
                    _CountryCode=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CountryCode");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _InternationalCode;
        public int? InternationalCode
        {
            get { return _InternationalCode; }
            set
            {
                if(_InternationalCode!=value){
                    _InternationalCode=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="InternationalCode");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Master_Country_old, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_Mapping_Status table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Mapping_Status: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Mapping_Status> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Mapping_Status>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Mapping_Status> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Mapping_Status item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Mapping_Status item=new TBL_Mapping_Status();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Mapping_Status> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Mapping_Status(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Mapping_Status.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Mapping_Status>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Mapping_Status(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Mapping_Status(Expression<Func<TBL_Mapping_Status, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Mapping_Status> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Mapping_Status> _repo;
            
            if(db.TestMode){
                TBL_Mapping_Status.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Mapping_Status>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Mapping_Status> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Mapping_Status SingleOrDefault(Expression<Func<TBL_Mapping_Status, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Mapping_Status single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Mapping_Status SingleOrDefault(Expression<Func<TBL_Mapping_Status, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Mapping_Status single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Mapping_Status, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Mapping_Status, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Mapping_Status> Find(Expression<Func<TBL_Mapping_Status, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Mapping_Status> Find(Expression<Func<TBL_Mapping_Status, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Mapping_Status> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Mapping_Status> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Mapping_Status> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Mapping_Status> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Mapping_Status> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Mapping_Status> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Type.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Mapping_Status)){
                TBL_Mapping_Status compare=(TBL_Mapping_Status)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Type.ToString();
                    }

        public string DescriptorColumn() {
            return "Type";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Type";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _Type;
        public int? Type
        {
            get { return _Type; }
            set
            {
                if(_Type!=value){
                    _Type=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Type");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _StatusId;
        public int? StatusId
        {
            get { return _StatusId; }
            set
            {
                if(_StatusId!=value){
                    _StatusId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StatusId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _ParentStatusId;
        public int? ParentStatusId
        {
            get { return _ParentStatusId; }
            set
            {
                if(_ParentStatusId!=value){
                    _ParentStatusId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ParentStatusId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsDeleted;
        public bool? IsDeleted
        {
            get { return _IsDeleted; }
            set
            {
                if(_IsDeleted!=value){
                    _IsDeleted=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsDeleted");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                         
             this.IsDeleted=true;
            _repo.Update(this,provider);
                
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Mapping_Status, bool>> expression) {
            var repo = GetRepo();
            
            
            List<TBL_Mapping_Status> items=repo.GetAll().Where(expression).ToList();
            items.ForEach(x=>x.IsDeleted=true);
            repo.Update(items);
            
        }

                
        public static void Destroy(Func<TBL_Mapping_Status, bool> expression) {
            var repo = GetRepo();
            repo.Delete(expression);
        }
        
        public static void Destroy(object key) {
            var repo = GetRepo();
            repo.Delete(key);
        }
        
        public static void Destroy(object key, IDataProvider provider) {
        
            var repo = GetRepo();
            repo.Delete(key,provider);
            
        }        
        
        public void Destroy() {
            _repo.Delete(KeyValue());
        }        
        public void Destroy(IDataProvider provider) {
            _repo.Delete(KeyValue(), provider);
        }         
        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_GeoPostcodes_Country table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_GeoPostcodes_Country: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_GeoPostcodes_Country> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_GeoPostcodes_Country>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_GeoPostcodes_Country> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_GeoPostcodes_Country item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_GeoPostcodes_Country item=new TBL_GeoPostcodes_Country();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_GeoPostcodes_Country> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_GeoPostcodes_Country(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_GeoPostcodes_Country.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_GeoPostcodes_Country>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_GeoPostcodes_Country(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_GeoPostcodes_Country(Expression<Func<TBL_GeoPostcodes_Country, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_GeoPostcodes_Country> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_GeoPostcodes_Country> _repo;
            
            if(db.TestMode){
                TBL_GeoPostcodes_Country.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_GeoPostcodes_Country>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_GeoPostcodes_Country> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_GeoPostcodes_Country SingleOrDefault(Expression<Func<TBL_GeoPostcodes_Country, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_GeoPostcodes_Country single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_GeoPostcodes_Country SingleOrDefault(Expression<Func<TBL_GeoPostcodes_Country, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_GeoPostcodes_Country single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_GeoPostcodes_Country, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_GeoPostcodes_Country, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_GeoPostcodes_Country> Find(Expression<Func<TBL_GeoPostcodes_Country, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_GeoPostcodes_Country> Find(Expression<Func<TBL_GeoPostcodes_Country, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_GeoPostcodes_Country> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_GeoPostcodes_Country> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_GeoPostcodes_Country> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_GeoPostcodes_Country> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_GeoPostcodes_Country> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_GeoPostcodes_Country> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "CountryCode";
        }

        public object KeyValue()
        {
            return this.CountryCode;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.CountryCode.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_GeoPostcodes_Country)){
                TBL_GeoPostcodes_Country compare=(TBL_GeoPostcodes_Country)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.CountryCode.ToString();
                    }

        public string DescriptorColumn() {
            return "CountryCode";
        }
        public static string GetKeyColumn()
        {
            return "CountryCode";
        }        
        public static string GetDescriptorColumn()
        {
            return "CountryCode";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _CountryId;
        public int CountryId
        {
            get { return _CountryId; }
            set
            {
                if(_CountryId!=value){
                    _CountryId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CountryId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CountryCode;
        public string CountryCode
        {
            get { return _CountryCode; }
            set
            {
                if(_CountryCode!=value){
                    _CountryCode=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CountryCode");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CountryName;
        public string CountryName
        {
            get { return _CountryName; }
            set
            {
                if(_CountryName!=value){
                    _CountryName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CountryName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _InternationalCode;
        public int? InternationalCode
        {
            get { return _InternationalCode; }
            set
            {
                if(_InternationalCode!=value){
                    _InternationalCode=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="InternationalCode");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_GeoPostcodes_Country, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_Mapping_Bed table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Mapping_Bed: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Mapping_Bed> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Mapping_Bed>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Mapping_Bed> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Mapping_Bed item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Mapping_Bed item=new TBL_Mapping_Bed();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Mapping_Bed> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Mapping_Bed(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Mapping_Bed.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Mapping_Bed>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Mapping_Bed(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Mapping_Bed(Expression<Func<TBL_Mapping_Bed, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Mapping_Bed> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Mapping_Bed> _repo;
            
            if(db.TestMode){
                TBL_Mapping_Bed.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Mapping_Bed>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Mapping_Bed> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Mapping_Bed SingleOrDefault(Expression<Func<TBL_Mapping_Bed, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Mapping_Bed single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Mapping_Bed SingleOrDefault(Expression<Func<TBL_Mapping_Bed, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Mapping_Bed single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Mapping_Bed, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Mapping_Bed, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Mapping_Bed> Find(Expression<Func<TBL_Mapping_Bed, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Mapping_Bed> Find(Expression<Func<TBL_Mapping_Bed, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Mapping_Bed> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Mapping_Bed> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Mapping_Bed> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Mapping_Bed> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Mapping_Bed> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Mapping_Bed> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.AppointmentId.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Mapping_Bed)){
                TBL_Mapping_Bed compare=(TBL_Mapping_Bed)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.AppointmentId.ToString();
                    }

        public string DescriptorColumn() {
            return "AppointmentId";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "AppointmentId";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _AppointmentId;
        public int? AppointmentId
        {
            get { return _AppointmentId; }
            set
            {
                if(_AppointmentId!=value){
                    _AppointmentId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AppointmentId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _ActionId;
        public int? ActionId
        {
            get { return _ActionId; }
            set
            {
                if(_ActionId!=value){
                    _ActionId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ActionId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _BedId;
        public int? BedId
        {
            get { return _BedId; }
            set
            {
                if(_BedId!=value){
                    _BedId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BedId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _StatusId;
        public int? StatusId
        {
            get { return _StatusId; }
            set
            {
                if(_StatusId!=value){
                    _StatusId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StatusId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreatedOn;
        public DateTime? CreatedOn
        {
            get { return _CreatedOn; }
            set
            {
                if(_CreatedOn!=value){
                    _CreatedOn=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOn");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _ModifiedOn;
        public DateTime? ModifiedOn
        {
            get { return _ModifiedOn; }
            set
            {
                if(_ModifiedOn!=value){
                    _ModifiedOn=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ModifiedOn");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsDeleted;
        public bool? IsDeleted
        {
            get { return _IsDeleted; }
            set
            {
                if(_IsDeleted!=value){
                    _IsDeleted=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsDeleted");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _EventTime;
        public DateTime? EventTime
        {
            get { return _EventTime; }
            set
            {
                if(_EventTime!=value){
                    _EventTime=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EventTime");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsTransfer;
        public bool? IsTransfer
        {
            get { return _IsTransfer; }
            set
            {
                if(_IsTransfer!=value){
                    _IsTransfer=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsTransfer");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _ActionTypeId;
        public int? ActionTypeId
        {
            get { return _ActionTypeId; }
            set
            {
                if(_ActionTypeId!=value){
                    _ActionTypeId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ActionTypeId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _DoctorId;
        public int? DoctorId
        {
            get { return _DoctorId; }
            set
            {
                if(_DoctorId!=value){
                    _DoctorId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DoctorId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if (!_dirtyColumns.Any(x => x.Name.ToLower() == "modifiedon")) {
               this.ModifiedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            }            
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            this.ModifiedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            this.CreatedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            this.ModifiedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                         
             this.IsDeleted=true;
            _repo.Update(this,provider);
                
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Mapping_Bed, bool>> expression) {
            var repo = GetRepo();
            
            
            List<TBL_Mapping_Bed> items=repo.GetAll().Where(expression).ToList();
            items.ForEach(x=>x.IsDeleted=true);
            repo.Update(items);
            
        }

                
        public static void Destroy(Func<TBL_Mapping_Bed, bool> expression) {
            var repo = GetRepo();
            repo.Delete(expression);
        }
        
        public static void Destroy(object key) {
            var repo = GetRepo();
            repo.Delete(key);
        }
        
        public static void Destroy(object key, IDataProvider provider) {
        
            var repo = GetRepo();
            repo.Delete(key,provider);
            
        }        
        
        public void Destroy() {
            _repo.Delete(KeyValue());
        }        
        public void Destroy(IDataProvider provider) {
            _repo.Delete(KeyValue(), provider);
        }         
        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_Doctor_Timing table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Doctor_Timing: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Doctor_Timing> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Doctor_Timing>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Doctor_Timing> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Doctor_Timing item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Doctor_Timing item=new TBL_Doctor_Timing();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Doctor_Timing> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Doctor_Timing(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Doctor_Timing.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Doctor_Timing>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Doctor_Timing(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Doctor_Timing(Expression<Func<TBL_Doctor_Timing, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Doctor_Timing> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Doctor_Timing> _repo;
            
            if(db.TestMode){
                TBL_Doctor_Timing.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Doctor_Timing>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Doctor_Timing> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Doctor_Timing SingleOrDefault(Expression<Func<TBL_Doctor_Timing, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Doctor_Timing single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Doctor_Timing SingleOrDefault(Expression<Func<TBL_Doctor_Timing, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Doctor_Timing single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Doctor_Timing, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Doctor_Timing, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Doctor_Timing> Find(Expression<Func<TBL_Doctor_Timing, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Doctor_Timing> Find(Expression<Func<TBL_Doctor_Timing, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Doctor_Timing> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Doctor_Timing> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Doctor_Timing> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Doctor_Timing> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Doctor_Timing> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Doctor_Timing> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "DoctorTimingId";
        }

        public object KeyValue()
        {
            return this.DoctorTimingId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ScheduleName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Doctor_Timing)){
                TBL_Doctor_Timing compare=(TBL_Doctor_Timing)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.DoctorTimingId;
        }
        
        public string DescriptorValue()
        {
                            return this.ScheduleName.ToString();
                    }

        public string DescriptorColumn() {
            return "ScheduleName";
        }
        public static string GetKeyColumn()
        {
            return "DoctorTimingId";
        }        
        public static string GetDescriptorColumn()
        {
            return "ScheduleName";
        }
        
        #region ' Foreign Keys '
        public IQueryable<TBL_BlockCalendar> TBL_BlockCalendars
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_BlockCalendar.GetRepo();
                  return from items in repo.GetAll()
                       where items.DoctorTimingId == _DoctorTimingId
                       select items;
            }
        }

        public IQueryable<TBL_Doctor> TBL_Doctors
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_Doctor.GetRepo();
                  return from items in repo.GetAll()
                       where items.DoctorId == _DoctorId
                       select items;
            }
        }

        #endregion
        

        int _DoctorTimingId;
        public int DoctorTimingId
        {
            get { return _DoctorTimingId; }
            set
            {
                if(_DoctorTimingId!=value){
                    _DoctorTimingId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DoctorTimingId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _DoctorId;
        public int? DoctorId
        {
            get { return _DoctorId; }
            set
            {
                if(_DoctorId!=value){
                    _DoctorId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DoctorId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ScheduleName;
        public string ScheduleName
        {
            get { return _ScheduleName; }
            set
            {
                if(_ScheduleName!=value){
                    _ScheduleName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ScheduleName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Address;
        public string Address
        {
            get { return _Address; }
            set
            {
                if(_Address!=value){
                    _Address=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Address");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _Sunday;
        public bool? Sunday
        {
            get { return _Sunday; }
            set
            {
                if(_Sunday!=value){
                    _Sunday=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Sunday");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _Monday;
        public bool? Monday
        {
            get { return _Monday; }
            set
            {
                if(_Monday!=value){
                    _Monday=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Monday");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _Tuesday;
        public bool? Tuesday
        {
            get { return _Tuesday; }
            set
            {
                if(_Tuesday!=value){
                    _Tuesday=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Tuesday");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _Wednesday;
        public bool? Wednesday
        {
            get { return _Wednesday; }
            set
            {
                if(_Wednesday!=value){
                    _Wednesday=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Wednesday");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _Thursday;
        public bool? Thursday
        {
            get { return _Thursday; }
            set
            {
                if(_Thursday!=value){
                    _Thursday=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Thursday");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _Friday;
        public bool? Friday
        {
            get { return _Friday; }
            set
            {
                if(_Friday!=value){
                    _Friday=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Friday");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _Saturday;
        public bool? Saturday
        {
            get { return _Saturday; }
            set
            {
                if(_Saturday!=value){
                    _Saturday=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Saturday");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _StartTime;
        public string StartTime
        {
            get { return _StartTime; }
            set
            {
                if(_StartTime!=value){
                    _StartTime=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StartTime");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _EndTime;
        public string EndTime
        {
            get { return _EndTime; }
            set
            {
                if(_EndTime!=value){
                    _EndTime=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EndTime");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _PatientDuration;
        public int? PatientDuration
        {
            get { return _PatientDuration; }
            set
            {
                if(_PatientDuration!=value){
                    _PatientDuration=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PatientDuration");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsApprovalSystem;
        public bool? IsApprovalSystem
        {
            get { return _IsApprovalSystem; }
            set
            {
                if(_IsApprovalSystem!=value){
                    _IsApprovalSystem=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsApprovalSystem");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsApprovalNotificationSMS;
        public bool? IsApprovalNotificationSMS
        {
            get { return _IsApprovalNotificationSMS; }
            set
            {
                if(_IsApprovalNotificationSMS!=value){
                    _IsApprovalNotificationSMS=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsApprovalNotificationSMS");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsApprovalNotificationEmail;
        public bool? IsApprovalNotificationEmail
        {
            get { return _IsApprovalNotificationEmail; }
            set
            {
                if(_IsApprovalNotificationEmail!=value){
                    _IsApprovalNotificationEmail=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsApprovalNotificationEmail");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _MaxAppointmentDays;
        public int? MaxAppointmentDays
        {
            get { return _MaxAppointmentDays; }
            set
            {
                if(_MaxAppointmentDays!=value){
                    _MaxAppointmentDays=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MaxAppointmentDays");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsDefaultAddress;
        public bool? IsDefaultAddress
        {
            get { return _IsDefaultAddress; }
            set
            {
                if(_IsDefaultAddress!=value){
                    _IsDefaultAddress=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsDefaultAddress");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsCarParkFacility;
        public bool? IsCarParkFacility
        {
            get { return _IsCarParkFacility; }
            set
            {
                if(_IsCarParkFacility!=value){
                    _IsCarParkFacility=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsCarParkFacility");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsFCFS;
        public bool? IsFCFS
        {
            get { return _IsFCFS; }
            set
            {
                if(_IsFCFS!=value){
                    _IsFCFS=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsFCFS");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _MaxApps;
        public int? MaxApps
        {
            get { return _MaxApps; }
            set
            {
                if(_MaxApps!=value){
                    _MaxApps=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MaxApps");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _AppointmentType;
        public int? AppointmentType
        {
            get { return _AppointmentType; }
            set
            {
                if(_AppointmentType!=value){
                    _AppointmentType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AppointmentType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Conditions;
        public string Conditions
        {
            get { return _Conditions; }
            set
            {
                if(_Conditions!=value){
                    _Conditions=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Conditions");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreatedOn;
        public DateTime? CreatedOn
        {
            get { return _CreatedOn; }
            set
            {
                if(_CreatedOn!=value){
                    _CreatedOn=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOn");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _ModifiedOn;
        public DateTime? ModifiedOn
        {
            get { return _ModifiedOn; }
            set
            {
                if(_ModifiedOn!=value){
                    _ModifiedOn=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ModifiedOn");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsDeleted;
        public bool? IsDeleted
        {
            get { return _IsDeleted; }
            set
            {
                if(_IsDeleted!=value){
                    _IsDeleted=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsDeleted");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if (!_dirtyColumns.Any(x => x.Name.ToLower() == "modifiedon")) {
               this.ModifiedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            }            
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            this.ModifiedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            this.CreatedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            this.ModifiedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                         
             this.IsDeleted=true;
            _repo.Update(this,provider);
                
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Doctor_Timing, bool>> expression) {
            var repo = GetRepo();
            
            
            List<TBL_Doctor_Timing> items=repo.GetAll().Where(expression).ToList();
            items.ForEach(x=>x.IsDeleted=true);
            repo.Update(items);
            
        }

                
        public static void Destroy(Func<TBL_Doctor_Timing, bool> expression) {
            var repo = GetRepo();
            repo.Delete(expression);
        }
        
        public static void Destroy(object key) {
            var repo = GetRepo();
            repo.Delete(key);
        }
        
        public static void Destroy(object key, IDataProvider provider) {
        
            var repo = GetRepo();
            repo.Delete(key,provider);
            
        }        
        
        public void Destroy() {
            _repo.Delete(KeyValue());
        }        
        public void Destroy(IDataProvider provider) {
            _repo.Delete(KeyValue(), provider);
        }         
        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Tbl_Temp_State table in the mobilesitedesigner Database.
    /// </summary>
    public partial class Tbl_Temp_State: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Tbl_Temp_State> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Tbl_Temp_State>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Tbl_Temp_State> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Tbl_Temp_State item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Tbl_Temp_State item=new Tbl_Temp_State();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Tbl_Temp_State> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public Tbl_Temp_State(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Tbl_Temp_State.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Tbl_Temp_State>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Tbl_Temp_State(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Tbl_Temp_State(Expression<Func<Tbl_Temp_State, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Tbl_Temp_State> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<Tbl_Temp_State> _repo;
            
            if(db.TestMode){
                Tbl_Temp_State.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Tbl_Temp_State>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Tbl_Temp_State> GetRepo(){
            return GetRepo("","");
        }
        
        public static Tbl_Temp_State SingleOrDefault(Expression<Func<Tbl_Temp_State, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Tbl_Temp_State single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Tbl_Temp_State SingleOrDefault(Expression<Func<Tbl_Temp_State, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Tbl_Temp_State single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Tbl_Temp_State, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Tbl_Temp_State, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Tbl_Temp_State> Find(Expression<Func<Tbl_Temp_State, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Tbl_Temp_State> Find(Expression<Func<Tbl_Temp_State, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Tbl_Temp_State> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Tbl_Temp_State> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Tbl_Temp_State> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Tbl_Temp_State> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Tbl_Temp_State> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Tbl_Temp_State> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "StateUnionTerritory";
        }

        public object KeyValue()
        {
            return this.StateUnionTerritory;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.StateUnionTerritory.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Tbl_Temp_State)){
                Tbl_Temp_State compare=(Tbl_Temp_State)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.StateUnionTerritory.ToString();
                    }

        public string DescriptorColumn() {
            return "StateUnionTerritory";
        }
        public static string GetKeyColumn()
        {
            return "StateUnionTerritory";
        }        
        public static string GetDescriptorColumn()
        {
            return "StateUnionTerritory";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _StateUnionTerritory;
        public string StateUnionTerritory
        {
            get { return _StateUnionTerritory; }
            set
            {
                if(_StateUnionTerritory!=value){
                    _StateUnionTerritory=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StateUnionTerritory");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _City;
        public string City
        {
            get { return _City; }
            set
            {
                if(_City!=value){
                    _City=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="City");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<Tbl_Temp_State, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_GeoPostcodes_State table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_GeoPostcodes_State: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_GeoPostcodes_State> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_GeoPostcodes_State>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_GeoPostcodes_State> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_GeoPostcodes_State item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_GeoPostcodes_State item=new TBL_GeoPostcodes_State();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_GeoPostcodes_State> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_GeoPostcodes_State(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_GeoPostcodes_State.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_GeoPostcodes_State>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_GeoPostcodes_State(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_GeoPostcodes_State(Expression<Func<TBL_GeoPostcodes_State, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_GeoPostcodes_State> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_GeoPostcodes_State> _repo;
            
            if(db.TestMode){
                TBL_GeoPostcodes_State.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_GeoPostcodes_State>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_GeoPostcodes_State> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_GeoPostcodes_State SingleOrDefault(Expression<Func<TBL_GeoPostcodes_State, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_GeoPostcodes_State single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_GeoPostcodes_State SingleOrDefault(Expression<Func<TBL_GeoPostcodes_State, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_GeoPostcodes_State single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_GeoPostcodes_State, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_GeoPostcodes_State, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_GeoPostcodes_State> Find(Expression<Func<TBL_GeoPostcodes_State, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_GeoPostcodes_State> Find(Expression<Func<TBL_GeoPostcodes_State, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_GeoPostcodes_State> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_GeoPostcodes_State> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_GeoPostcodes_State> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_GeoPostcodes_State> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_GeoPostcodes_State> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_GeoPostcodes_State> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "StateId";
        }

        public object KeyValue()
        {
            return this.StateId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.StateName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_GeoPostcodes_State)){
                TBL_GeoPostcodes_State compare=(TBL_GeoPostcodes_State)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.StateId;
        }
        
        public string DescriptorValue()
        {
                            return this.StateName.ToString();
                    }

        public string DescriptorColumn() {
            return "StateName";
        }
        public static string GetKeyColumn()
        {
            return "StateId";
        }        
        public static string GetDescriptorColumn()
        {
            return "StateName";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _StateId;
        public int StateId
        {
            get { return _StateId; }
            set
            {
                if(_StateId!=value){
                    _StateId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StateId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _StateName;
        public string StateName
        {
            get { return _StateName; }
            set
            {
                if(_StateName!=value){
                    _StateName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StateName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _StateCode;
        public string StateCode
        {
            get { return _StateCode; }
            set
            {
                if(_StateCode!=value){
                    _StateCode=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StateCode");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CountryCode;
        public string CountryCode
        {
            get { return _CountryCode; }
            set
            {
                if(_CountryCode!=value){
                    _CountryCode=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CountryCode");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_GeoPostcodes_State, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_Job_SubAdminLogin table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Job_SubAdminLogin: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Job_SubAdminLogin> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Job_SubAdminLogin>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Job_SubAdminLogin> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Job_SubAdminLogin item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Job_SubAdminLogin item=new TBL_Job_SubAdminLogin();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Job_SubAdminLogin> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Job_SubAdminLogin(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Job_SubAdminLogin.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Job_SubAdminLogin>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Job_SubAdminLogin(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Job_SubAdminLogin(Expression<Func<TBL_Job_SubAdminLogin, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Job_SubAdminLogin> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Job_SubAdminLogin> _repo;
            
            if(db.TestMode){
                TBL_Job_SubAdminLogin.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Job_SubAdminLogin>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Job_SubAdminLogin> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Job_SubAdminLogin SingleOrDefault(Expression<Func<TBL_Job_SubAdminLogin, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Job_SubAdminLogin single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Job_SubAdminLogin SingleOrDefault(Expression<Func<TBL_Job_SubAdminLogin, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Job_SubAdminLogin single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Job_SubAdminLogin, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Job_SubAdminLogin, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Job_SubAdminLogin> Find(Expression<Func<TBL_Job_SubAdminLogin, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Job_SubAdminLogin> Find(Expression<Func<TBL_Job_SubAdminLogin, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Job_SubAdminLogin> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Job_SubAdminLogin> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Job_SubAdminLogin> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Job_SubAdminLogin> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Job_SubAdminLogin> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Job_SubAdminLogin> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Sid";
        }

        public object KeyValue()
        {
            return this.Sid;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.UserName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Job_SubAdminLogin)){
                TBL_Job_SubAdminLogin compare=(TBL_Job_SubAdminLogin)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Sid;
        }
        
        public string DescriptorValue()
        {
                            return this.UserName.ToString();
                    }

        public string DescriptorColumn() {
            return "UserName";
        }
        public static string GetKeyColumn()
        {
            return "Sid";
        }        
        public static string GetDescriptorColumn()
        {
            return "UserName";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _Sid;
        public int Sid
        {
            get { return _Sid; }
            set
            {
                if(_Sid!=value){
                    _Sid=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Sid");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _UserName;
        public string UserName
        {
            get { return _UserName; }
            set
            {
                if(_UserName!=value){
                    _UserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Password;
        public string Password
        {
            get { return _Password; }
            set
            {
                if(_Password!=value){
                    _Password=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Password");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _ClientId;
        public int? ClientId
        {
            get { return _ClientId; }
            set
            {
                if(_ClientId!=value){
                    _ClientId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ClientId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreatedDate;
        public DateTime? CreatedDate
        {
            get { return _CreatedDate; }
            set
            {
                if(_CreatedDate!=value){
                    _CreatedDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _UpdatedDate;
        public DateTime? UpdatedDate
        {
            get { return _UpdatedDate; }
            set
            {
                if(_UpdatedDate!=value){
                    _UpdatedDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UpdatedDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _WhoCreated;
        public string WhoCreated
        {
            get { return _WhoCreated; }
            set
            {
                if(_WhoCreated!=value){
                    _WhoCreated=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="WhoCreated");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _WhoUpdated;
        public string WhoUpdated
        {
            get { return _WhoUpdated; }
            set
            {
                if(_WhoUpdated!=value){
                    _WhoUpdated=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="WhoUpdated");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Job_SubAdminLogin, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_Patient_UHID table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Patient_UHID: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Patient_UHID> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Patient_UHID>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Patient_UHID> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Patient_UHID item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Patient_UHID item=new TBL_Patient_UHID();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Patient_UHID> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Patient_UHID(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Patient_UHID.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Patient_UHID>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Patient_UHID(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Patient_UHID(Expression<Func<TBL_Patient_UHID, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Patient_UHID> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Patient_UHID> _repo;
            
            if(db.TestMode){
                TBL_Patient_UHID.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Patient_UHID>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Patient_UHID> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Patient_UHID SingleOrDefault(Expression<Func<TBL_Patient_UHID, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Patient_UHID single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Patient_UHID SingleOrDefault(Expression<Func<TBL_Patient_UHID, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Patient_UHID single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Patient_UHID, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Patient_UHID, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Patient_UHID> Find(Expression<Func<TBL_Patient_UHID, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Patient_UHID> Find(Expression<Func<TBL_Patient_UHID, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Patient_UHID> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Patient_UHID> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Patient_UHID> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Patient_UHID> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Patient_UHID> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Patient_UHID> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.UHID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Patient_UHID)){
                TBL_Patient_UHID compare=(TBL_Patient_UHID)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.UHID.ToString();
                    }

        public string DescriptorColumn() {
            return "UHID";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "UHID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _UHID;
        public string UHID
        {
            get { return _UHID; }
            set
            {
                if(_UHID!=value){
                    _UHID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UHID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _PatientId;
        public int? PatientId
        {
            get { return _PatientId; }
            set
            {
                if(_PatientId!=value){
                    _PatientId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PatientId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _OrganizationId;
        public int? OrganizationId
        {
            get { return _OrganizationId; }
            set
            {
                if(_OrganizationId!=value){
                    _OrganizationId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrganizationId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreatedOn;
        public DateTime? CreatedOn
        {
            get { return _CreatedOn; }
            set
            {
                if(_CreatedOn!=value){
                    _CreatedOn=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOn");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _ModifiedOn;
        public DateTime? ModifiedOn
        {
            get { return _ModifiedOn; }
            set
            {
                if(_ModifiedOn!=value){
                    _ModifiedOn=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ModifiedOn");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsDeleted;
        public bool? IsDeleted
        {
            get { return _IsDeleted; }
            set
            {
                if(_IsDeleted!=value){
                    _IsDeleted=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsDeleted");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if (!_dirtyColumns.Any(x => x.Name.ToLower() == "modifiedon")) {
               this.ModifiedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            }            
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            this.ModifiedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            this.CreatedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            this.ModifiedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                         
             this.IsDeleted=true;
            _repo.Update(this,provider);
                
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Patient_UHID, bool>> expression) {
            var repo = GetRepo();
            
            
            List<TBL_Patient_UHID> items=repo.GetAll().Where(expression).ToList();
            items.ForEach(x=>x.IsDeleted=true);
            repo.Update(items);
            
        }

                
        public static void Destroy(Func<TBL_Patient_UHID, bool> expression) {
            var repo = GetRepo();
            repo.Delete(expression);
        }
        
        public static void Destroy(object key) {
            var repo = GetRepo();
            repo.Delete(key);
        }
        
        public static void Destroy(object key, IDataProvider provider) {
        
            var repo = GetRepo();
            repo.Delete(key,provider);
            
        }        
        
        public void Destroy() {
            _repo.Delete(KeyValue());
        }        
        public void Destroy(IDataProvider provider) {
            _repo.Delete(KeyValue(), provider);
        }         
        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_GeoPostcodes_City table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_GeoPostcodes_City: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_GeoPostcodes_City> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_GeoPostcodes_City>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_GeoPostcodes_City> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_GeoPostcodes_City item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_GeoPostcodes_City item=new TBL_GeoPostcodes_City();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_GeoPostcodes_City> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_GeoPostcodes_City(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_GeoPostcodes_City.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_GeoPostcodes_City>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_GeoPostcodes_City(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_GeoPostcodes_City(Expression<Func<TBL_GeoPostcodes_City, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_GeoPostcodes_City> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_GeoPostcodes_City> _repo;
            
            if(db.TestMode){
                TBL_GeoPostcodes_City.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_GeoPostcodes_City>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_GeoPostcodes_City> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_GeoPostcodes_City SingleOrDefault(Expression<Func<TBL_GeoPostcodes_City, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_GeoPostcodes_City single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_GeoPostcodes_City SingleOrDefault(Expression<Func<TBL_GeoPostcodes_City, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_GeoPostcodes_City single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_GeoPostcodes_City, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_GeoPostcodes_City, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_GeoPostcodes_City> Find(Expression<Func<TBL_GeoPostcodes_City, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_GeoPostcodes_City> Find(Expression<Func<TBL_GeoPostcodes_City, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_GeoPostcodes_City> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_GeoPostcodes_City> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_GeoPostcodes_City> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_GeoPostcodes_City> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_GeoPostcodes_City> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_GeoPostcodes_City> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "CityId";
        }

        public object KeyValue()
        {
            return this.CityId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.CityName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_GeoPostcodes_City)){
                TBL_GeoPostcodes_City compare=(TBL_GeoPostcodes_City)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.CityId;
        }
        
        public string DescriptorValue()
        {
                            return this.CityName.ToString();
                    }

        public string DescriptorColumn() {
            return "CityName";
        }
        public static string GetKeyColumn()
        {
            return "CityId";
        }        
        public static string GetDescriptorColumn()
        {
            return "CityName";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _CityId;
        public int CityId
        {
            get { return _CityId; }
            set
            {
                if(_CityId!=value){
                    _CityId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CityId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CityName;
        public string CityName
        {
            get { return _CityName; }
            set
            {
                if(_CityName!=value){
                    _CityName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CityName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _StateCode;
        public string StateCode
        {
            get { return _StateCode; }
            set
            {
                if(_StateCode!=value){
                    _StateCode=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StateCode");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CountryCode;
        public string CountryCode
        {
            get { return _CountryCode; }
            set
            {
                if(_CountryCode!=value){
                    _CountryCode=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CountryCode");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_GeoPostcodes_City, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_Job_Speciality table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Job_Speciality: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Job_Speciality> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Job_Speciality>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Job_Speciality> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Job_Speciality item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Job_Speciality item=new TBL_Job_Speciality();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Job_Speciality> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Job_Speciality(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Job_Speciality.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Job_Speciality>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Job_Speciality(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Job_Speciality(Expression<Func<TBL_Job_Speciality, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Job_Speciality> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Job_Speciality> _repo;
            
            if(db.TestMode){
                TBL_Job_Speciality.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Job_Speciality>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Job_Speciality> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Job_Speciality SingleOrDefault(Expression<Func<TBL_Job_Speciality, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Job_Speciality single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Job_Speciality SingleOrDefault(Expression<Func<TBL_Job_Speciality, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Job_Speciality single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Job_Speciality, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Job_Speciality, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Job_Speciality> Find(Expression<Func<TBL_Job_Speciality, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Job_Speciality> Find(Expression<Func<TBL_Job_Speciality, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Job_Speciality> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Job_Speciality> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Job_Speciality> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Job_Speciality> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Job_Speciality> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Job_Speciality> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "SpcId";
        }

        public object KeyValue()
        {
            return this.SpcId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.WhoCreated.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Job_Speciality)){
                TBL_Job_Speciality compare=(TBL_Job_Speciality)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.SpcId;
        }
        
        public string DescriptorValue()
        {
                            return this.WhoCreated.ToString();
                    }

        public string DescriptorColumn() {
            return "WhoCreated";
        }
        public static string GetKeyColumn()
        {
            return "SpcId";
        }        
        public static string GetDescriptorColumn()
        {
            return "WhoCreated";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _SpcId;
        public int SpcId
        {
            get { return _SpcId; }
            set
            {
                if(_SpcId!=value){
                    _SpcId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SpcId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _SpecialityId;
        public int? SpecialityId
        {
            get { return _SpecialityId; }
            set
            {
                if(_SpecialityId!=value){
                    _SpecialityId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SpecialityId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _Visibility;
        public bool? Visibility
        {
            get { return _Visibility; }
            set
            {
                if(_Visibility!=value){
                    _Visibility=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Visibility");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _ClientId;
        public int? ClientId
        {
            get { return _ClientId; }
            set
            {
                if(_ClientId!=value){
                    _ClientId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ClientId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreatedDate;
        public DateTime? CreatedDate
        {
            get { return _CreatedDate; }
            set
            {
                if(_CreatedDate!=value){
                    _CreatedDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _UpdatedDate;
        public DateTime? UpdatedDate
        {
            get { return _UpdatedDate; }
            set
            {
                if(_UpdatedDate!=value){
                    _UpdatedDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UpdatedDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _WhoCreated;
        public string WhoCreated
        {
            get { return _WhoCreated; }
            set
            {
                if(_WhoCreated!=value){
                    _WhoCreated=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="WhoCreated");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _WhoUpdated;
        public string WhoUpdated
        {
            get { return _WhoUpdated; }
            set
            {
                if(_WhoUpdated!=value){
                    _WhoUpdated=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="WhoUpdated");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Job_Speciality, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_Landing_MainTab table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Landing_MainTab: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Landing_MainTab> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Landing_MainTab>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Landing_MainTab> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Landing_MainTab item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Landing_MainTab item=new TBL_Landing_MainTab();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Landing_MainTab> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Landing_MainTab(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Landing_MainTab.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Landing_MainTab>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Landing_MainTab(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Landing_MainTab(Expression<Func<TBL_Landing_MainTab, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Landing_MainTab> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Landing_MainTab> _repo;
            
            if(db.TestMode){
                TBL_Landing_MainTab.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Landing_MainTab>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Landing_MainTab> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Landing_MainTab SingleOrDefault(Expression<Func<TBL_Landing_MainTab, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Landing_MainTab single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Landing_MainTab SingleOrDefault(Expression<Func<TBL_Landing_MainTab, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Landing_MainTab single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Landing_MainTab, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Landing_MainTab, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Landing_MainTab> Find(Expression<Func<TBL_Landing_MainTab, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Landing_MainTab> Find(Expression<Func<TBL_Landing_MainTab, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Landing_MainTab> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Landing_MainTab> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Landing_MainTab> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Landing_MainTab> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Landing_MainTab> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Landing_MainTab> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "MainTabId";
        }

        public object KeyValue()
        {
            return this.MainTabId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.MainTabName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Landing_MainTab)){
                TBL_Landing_MainTab compare=(TBL_Landing_MainTab)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.MainTabId;
        }
        
        public string DescriptorValue()
        {
                            return this.MainTabName.ToString();
                    }

        public string DescriptorColumn() {
            return "MainTabName";
        }
        public static string GetKeyColumn()
        {
            return "MainTabId";
        }        
        public static string GetDescriptorColumn()
        {
            return "MainTabName";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _MainTabId;
        public int MainTabId
        {
            get { return _MainTabId; }
            set
            {
                if(_MainTabId!=value){
                    _MainTabId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MainTabId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _MainTabName;
        public string MainTabName
        {
            get { return _MainTabName; }
            set
            {
                if(_MainTabName!=value){
                    _MainTabName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MainTabName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _MainTabContent;
        public string MainTabContent
        {
            get { return _MainTabContent; }
            set
            {
                if(_MainTabContent!=value){
                    _MainTabContent=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MainTabContent");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _LandingId;
        public int? LandingId
        {
            get { return _LandingId; }
            set
            {
                if(_LandingId!=value){
                    _LandingId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LandingId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Landing_MainTab, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_BlockCalendar table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_BlockCalendar: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_BlockCalendar> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_BlockCalendar>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_BlockCalendar> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_BlockCalendar item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_BlockCalendar item=new TBL_BlockCalendar();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_BlockCalendar> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_BlockCalendar(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_BlockCalendar.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_BlockCalendar>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_BlockCalendar(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_BlockCalendar(Expression<Func<TBL_BlockCalendar, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_BlockCalendar> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_BlockCalendar> _repo;
            
            if(db.TestMode){
                TBL_BlockCalendar.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_BlockCalendar>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_BlockCalendar> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_BlockCalendar SingleOrDefault(Expression<Func<TBL_BlockCalendar, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_BlockCalendar single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_BlockCalendar SingleOrDefault(Expression<Func<TBL_BlockCalendar, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_BlockCalendar single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_BlockCalendar, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_BlockCalendar, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_BlockCalendar> Find(Expression<Func<TBL_BlockCalendar, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_BlockCalendar> Find(Expression<Func<TBL_BlockCalendar, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_BlockCalendar> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_BlockCalendar> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_BlockCalendar> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_BlockCalendar> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_BlockCalendar> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_BlockCalendar> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "BlockId";
        }

        public object KeyValue()
        {
            return this.BlockId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Reason.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_BlockCalendar)){
                TBL_BlockCalendar compare=(TBL_BlockCalendar)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.BlockId;
        }
        
        public string DescriptorValue()
        {
                            return this.Reason.ToString();
                    }

        public string DescriptorColumn() {
            return "Reason";
        }
        public static string GetKeyColumn()
        {
            return "BlockId";
        }        
        public static string GetDescriptorColumn()
        {
            return "Reason";
        }
        
        #region ' Foreign Keys '
        public IQueryable<TBL_Doctor_Timing> TBL_Doctor_Timings
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_Doctor_Timing.GetRepo();
                  return from items in repo.GetAll()
                       where items.DoctorTimingId == _DoctorTimingId
                       select items;
            }
        }

        public IQueryable<TBL_Service_Timing> TBL_Service_Timings
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_Service_Timing.GetRepo();
                  return from items in repo.GetAll()
                       where items.ServiceTimingId == _ServiceTimingId
                       select items;
            }
        }

        #endregion
        

        int _BlockId;
        public int BlockId
        {
            get { return _BlockId; }
            set
            {
                if(_BlockId!=value){
                    _BlockId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BlockId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _BlockTypeId;
        public int? BlockTypeId
        {
            get { return _BlockTypeId; }
            set
            {
                if(_BlockTypeId!=value){
                    _BlockTypeId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BlockTypeId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _Type;
        public bool? Type
        {
            get { return _Type; }
            set
            {
                if(_Type!=value){
                    _Type=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Type");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _DoctorId;
        public int? DoctorId
        {
            get { return _DoctorId; }
            set
            {
                if(_DoctorId!=value){
                    _DoctorId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DoctorId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _ServiceId;
        public int? ServiceId
        {
            get { return _ServiceId; }
            set
            {
                if(_ServiceId!=value){
                    _ServiceId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ServiceId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _DoctorTimingId;
        public int? DoctorTimingId
        {
            get { return _DoctorTimingId; }
            set
            {
                if(_DoctorTimingId!=value){
                    _DoctorTimingId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DoctorTimingId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _ServiceTimingId;
        public int? ServiceTimingId
        {
            get { return _ServiceTimingId; }
            set
            {
                if(_ServiceTimingId!=value){
                    _ServiceTimingId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ServiceTimingId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _BlockStart;
        public DateTime? BlockStart
        {
            get { return _BlockStart; }
            set
            {
                if(_BlockStart!=value){
                    _BlockStart=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BlockStart");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _BlockEnd;
        public DateTime? BlockEnd
        {
            get { return _BlockEnd; }
            set
            {
                if(_BlockEnd!=value){
                    _BlockEnd=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BlockEnd");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Reason;
        public string Reason
        {
            get { return _Reason; }
            set
            {
                if(_Reason!=value){
                    _Reason=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Reason");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreatedOn;
        public DateTime? CreatedOn
        {
            get { return _CreatedOn; }
            set
            {
                if(_CreatedOn!=value){
                    _CreatedOn=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOn");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsDeleted;
        public bool? IsDeleted
        {
            get { return _IsDeleted; }
            set
            {
                if(_IsDeleted!=value){
                    _IsDeleted=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsDeleted");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            this.CreatedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                         
             this.IsDeleted=true;
            _repo.Update(this,provider);
                
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_BlockCalendar, bool>> expression) {
            var repo = GetRepo();
            
            
            List<TBL_BlockCalendar> items=repo.GetAll().Where(expression).ToList();
            items.ForEach(x=>x.IsDeleted=true);
            repo.Update(items);
            
        }

                
        public static void Destroy(Func<TBL_BlockCalendar, bool> expression) {
            var repo = GetRepo();
            repo.Delete(expression);
        }
        
        public static void Destroy(object key) {
            var repo = GetRepo();
            repo.Delete(key);
        }
        
        public static void Destroy(object key, IDataProvider provider) {
        
            var repo = GetRepo();
            repo.Delete(key,provider);
            
        }        
        
        public void Destroy() {
            _repo.Delete(KeyValue());
        }        
        public void Destroy(IDataProvider provider) {
            _repo.Delete(KeyValue(), provider);
        }         
        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_Job_SearchWidgetColVisible table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Job_SearchWidgetColVisible: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Job_SearchWidgetColVisible> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Job_SearchWidgetColVisible>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Job_SearchWidgetColVisible> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Job_SearchWidgetColVisible item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Job_SearchWidgetColVisible item=new TBL_Job_SearchWidgetColVisible();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Job_SearchWidgetColVisible> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Job_SearchWidgetColVisible(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Job_SearchWidgetColVisible.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Job_SearchWidgetColVisible>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Job_SearchWidgetColVisible(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Job_SearchWidgetColVisible(Expression<Func<TBL_Job_SearchWidgetColVisible, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Job_SearchWidgetColVisible> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Job_SearchWidgetColVisible> _repo;
            
            if(db.TestMode){
                TBL_Job_SearchWidgetColVisible.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Job_SearchWidgetColVisible>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Job_SearchWidgetColVisible> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Job_SearchWidgetColVisible SingleOrDefault(Expression<Func<TBL_Job_SearchWidgetColVisible, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Job_SearchWidgetColVisible single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Job_SearchWidgetColVisible SingleOrDefault(Expression<Func<TBL_Job_SearchWidgetColVisible, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Job_SearchWidgetColVisible single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Job_SearchWidgetColVisible, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Job_SearchWidgetColVisible, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Job_SearchWidgetColVisible> Find(Expression<Func<TBL_Job_SearchWidgetColVisible, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Job_SearchWidgetColVisible> Find(Expression<Func<TBL_Job_SearchWidgetColVisible, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Job_SearchWidgetColVisible> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Job_SearchWidgetColVisible> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Job_SearchWidgetColVisible> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Job_SearchWidgetColVisible> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Job_SearchWidgetColVisible> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Job_SearchWidgetColVisible> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "SwId";
        }

        public object KeyValue()
        {
            return this.SwId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.WhoCreated.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Job_SearchWidgetColVisible)){
                TBL_Job_SearchWidgetColVisible compare=(TBL_Job_SearchWidgetColVisible)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.SwId;
        }
        
        public string DescriptorValue()
        {
                            return this.WhoCreated.ToString();
                    }

        public string DescriptorColumn() {
            return "WhoCreated";
        }
        public static string GetKeyColumn()
        {
            return "SwId";
        }        
        public static string GetDescriptorColumn()
        {
            return "WhoCreated";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _SwId;
        public int SwId
        {
            get { return _SwId; }
            set
            {
                if(_SwId!=value){
                    _SwId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SwId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _Country;
        public bool? Country
        {
            get { return _Country; }
            set
            {
                if(_Country!=value){
                    _Country=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Country");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _State;
        public bool? State
        {
            get { return _State; }
            set
            {
                if(_State!=value){
                    _State=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="State");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _City;
        public bool? City
        {
            get { return _City; }
            set
            {
                if(_City!=value){
                    _City=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="City");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _Facility;
        public bool? Facility
        {
            get { return _Facility; }
            set
            {
                if(_Facility!=value){
                    _Facility=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Facility");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _ClientId;
        public int? ClientId
        {
            get { return _ClientId; }
            set
            {
                if(_ClientId!=value){
                    _ClientId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ClientId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreatedDate;
        public DateTime? CreatedDate
        {
            get { return _CreatedDate; }
            set
            {
                if(_CreatedDate!=value){
                    _CreatedDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _UpdatedDate;
        public DateTime? UpdatedDate
        {
            get { return _UpdatedDate; }
            set
            {
                if(_UpdatedDate!=value){
                    _UpdatedDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UpdatedDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _WhoCreated;
        public string WhoCreated
        {
            get { return _WhoCreated; }
            set
            {
                if(_WhoCreated!=value){
                    _WhoCreated=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="WhoCreated");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _WhoUpdated;
        public string WhoUpdated
        {
            get { return _WhoUpdated; }
            set
            {
                if(_WhoUpdated!=value){
                    _WhoUpdated=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="WhoUpdated");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Job_SearchWidgetColVisible, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_Service_Timing table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Service_Timing: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Service_Timing> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Service_Timing>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Service_Timing> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Service_Timing item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Service_Timing item=new TBL_Service_Timing();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Service_Timing> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Service_Timing(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Service_Timing.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Service_Timing>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Service_Timing(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Service_Timing(Expression<Func<TBL_Service_Timing, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Service_Timing> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Service_Timing> _repo;
            
            if(db.TestMode){
                TBL_Service_Timing.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Service_Timing>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Service_Timing> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Service_Timing SingleOrDefault(Expression<Func<TBL_Service_Timing, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Service_Timing single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Service_Timing SingleOrDefault(Expression<Func<TBL_Service_Timing, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Service_Timing single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Service_Timing, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Service_Timing, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Service_Timing> Find(Expression<Func<TBL_Service_Timing, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Service_Timing> Find(Expression<Func<TBL_Service_Timing, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Service_Timing> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Service_Timing> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Service_Timing> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Service_Timing> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Service_Timing> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Service_Timing> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ServiceTimingId";
        }

        public object KeyValue()
        {
            return this.ServiceTimingId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ScheduleName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Service_Timing)){
                TBL_Service_Timing compare=(TBL_Service_Timing)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.ServiceTimingId;
        }
        
        public string DescriptorValue()
        {
                            return this.ScheduleName.ToString();
                    }

        public string DescriptorColumn() {
            return "ScheduleName";
        }
        public static string GetKeyColumn()
        {
            return "ServiceTimingId";
        }        
        public static string GetDescriptorColumn()
        {
            return "ScheduleName";
        }
        
        #region ' Foreign Keys '
        public IQueryable<TBL_BlockCalendar> TBL_BlockCalendars
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_BlockCalendar.GetRepo();
                  return from items in repo.GetAll()
                       where items.ServiceTimingId == _ServiceTimingId
                       select items;
            }
        }

        public IQueryable<TBL_Service> TBL_Services
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_Service.GetRepo();
                  return from items in repo.GetAll()
                       where items.ServiceId == _ServiceId
                       select items;
            }
        }

        #endregion
        

        int _ServiceTimingId;
        public int ServiceTimingId
        {
            get { return _ServiceTimingId; }
            set
            {
                if(_ServiceTimingId!=value){
                    _ServiceTimingId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ServiceTimingId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _ServiceId;
        public int? ServiceId
        {
            get { return _ServiceId; }
            set
            {
                if(_ServiceId!=value){
                    _ServiceId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ServiceId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ScheduleName;
        public string ScheduleName
        {
            get { return _ScheduleName; }
            set
            {
                if(_ScheduleName!=value){
                    _ScheduleName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ScheduleName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Address;
        public string Address
        {
            get { return _Address; }
            set
            {
                if(_Address!=value){
                    _Address=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Address");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _Sunday;
        public bool? Sunday
        {
            get { return _Sunday; }
            set
            {
                if(_Sunday!=value){
                    _Sunday=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Sunday");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _Monday;
        public bool? Monday
        {
            get { return _Monday; }
            set
            {
                if(_Monday!=value){
                    _Monday=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Monday");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _Tuesday;
        public bool? Tuesday
        {
            get { return _Tuesday; }
            set
            {
                if(_Tuesday!=value){
                    _Tuesday=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Tuesday");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _Wednesday;
        public bool? Wednesday
        {
            get { return _Wednesday; }
            set
            {
                if(_Wednesday!=value){
                    _Wednesday=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Wednesday");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _Thursday;
        public bool? Thursday
        {
            get { return _Thursday; }
            set
            {
                if(_Thursday!=value){
                    _Thursday=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Thursday");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _Friday;
        public bool? Friday
        {
            get { return _Friday; }
            set
            {
                if(_Friday!=value){
                    _Friday=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Friday");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _Saturday;
        public bool? Saturday
        {
            get { return _Saturday; }
            set
            {
                if(_Saturday!=value){
                    _Saturday=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Saturday");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _StartTime;
        public string StartTime
        {
            get { return _StartTime; }
            set
            {
                if(_StartTime!=value){
                    _StartTime=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StartTime");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _EndTime;
        public string EndTime
        {
            get { return _EndTime; }
            set
            {
                if(_EndTime!=value){
                    _EndTime=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EndTime");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _PatientDuration;
        public string PatientDuration
        {
            get { return _PatientDuration; }
            set
            {
                if(_PatientDuration!=value){
                    _PatientDuration=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PatientDuration");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsApprovalSystem;
        public bool? IsApprovalSystem
        {
            get { return _IsApprovalSystem; }
            set
            {
                if(_IsApprovalSystem!=value){
                    _IsApprovalSystem=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsApprovalSystem");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsApprovalNotificationSMS;
        public bool? IsApprovalNotificationSMS
        {
            get { return _IsApprovalNotificationSMS; }
            set
            {
                if(_IsApprovalNotificationSMS!=value){
                    _IsApprovalNotificationSMS=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsApprovalNotificationSMS");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsApprovalNotificationEmail;
        public bool? IsApprovalNotificationEmail
        {
            get { return _IsApprovalNotificationEmail; }
            set
            {
                if(_IsApprovalNotificationEmail!=value){
                    _IsApprovalNotificationEmail=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsApprovalNotificationEmail");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _MaxAppointmentDays;
        public int? MaxAppointmentDays
        {
            get { return _MaxAppointmentDays; }
            set
            {
                if(_MaxAppointmentDays!=value){
                    _MaxAppointmentDays=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MaxAppointmentDays");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsDefaultAddress;
        public bool? IsDefaultAddress
        {
            get { return _IsDefaultAddress; }
            set
            {
                if(_IsDefaultAddress!=value){
                    _IsDefaultAddress=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsDefaultAddress");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsCarParkFacility;
        public bool? IsCarParkFacility
        {
            get { return _IsCarParkFacility; }
            set
            {
                if(_IsCarParkFacility!=value){
                    _IsCarParkFacility=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsCarParkFacility");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsFCFS;
        public bool? IsFCFS
        {
            get { return _IsFCFS; }
            set
            {
                if(_IsFCFS!=value){
                    _IsFCFS=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsFCFS");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _MaxApps;
        public int? MaxApps
        {
            get { return _MaxApps; }
            set
            {
                if(_MaxApps!=value){
                    _MaxApps=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MaxApps");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _AppointmentType;
        public int? AppointmentType
        {
            get { return _AppointmentType; }
            set
            {
                if(_AppointmentType!=value){
                    _AppointmentType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AppointmentType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Conditions;
        public string Conditions
        {
            get { return _Conditions; }
            set
            {
                if(_Conditions!=value){
                    _Conditions=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Conditions");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreatedOn;
        public DateTime? CreatedOn
        {
            get { return _CreatedOn; }
            set
            {
                if(_CreatedOn!=value){
                    _CreatedOn=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOn");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _ModifiedOn;
        public DateTime? ModifiedOn
        {
            get { return _ModifiedOn; }
            set
            {
                if(_ModifiedOn!=value){
                    _ModifiedOn=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ModifiedOn");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsDeleted;
        public bool? IsDeleted
        {
            get { return _IsDeleted; }
            set
            {
                if(_IsDeleted!=value){
                    _IsDeleted=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsDeleted");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if (!_dirtyColumns.Any(x => x.Name.ToLower() == "modifiedon")) {
               this.ModifiedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            }            
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            this.ModifiedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            this.CreatedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            this.ModifiedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                         
             this.IsDeleted=true;
            _repo.Update(this,provider);
                
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Service_Timing, bool>> expression) {
            var repo = GetRepo();
            
            
            List<TBL_Service_Timing> items=repo.GetAll().Where(expression).ToList();
            items.ForEach(x=>x.IsDeleted=true);
            repo.Update(items);
            
        }

                
        public static void Destroy(Func<TBL_Service_Timing, bool> expression) {
            var repo = GetRepo();
            repo.Delete(expression);
        }
        
        public static void Destroy(object key) {
            var repo = GetRepo();
            repo.Delete(key);
        }
        
        public static void Destroy(object key, IDataProvider provider) {
        
            var repo = GetRepo();
            repo.Delete(key,provider);
            
        }        
        
        public void Destroy() {
            _repo.Delete(KeyValue());
        }        
        public void Destroy(IDataProvider provider) {
            _repo.Delete(KeyValue(), provider);
        }         
        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_Job_SearchResultsColVisible table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Job_SearchResultsColVisible: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Job_SearchResultsColVisible> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Job_SearchResultsColVisible>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Job_SearchResultsColVisible> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Job_SearchResultsColVisible item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Job_SearchResultsColVisible item=new TBL_Job_SearchResultsColVisible();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Job_SearchResultsColVisible> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Job_SearchResultsColVisible(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Job_SearchResultsColVisible.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Job_SearchResultsColVisible>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Job_SearchResultsColVisible(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Job_SearchResultsColVisible(Expression<Func<TBL_Job_SearchResultsColVisible, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Job_SearchResultsColVisible> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Job_SearchResultsColVisible> _repo;
            
            if(db.TestMode){
                TBL_Job_SearchResultsColVisible.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Job_SearchResultsColVisible>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Job_SearchResultsColVisible> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Job_SearchResultsColVisible SingleOrDefault(Expression<Func<TBL_Job_SearchResultsColVisible, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Job_SearchResultsColVisible single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Job_SearchResultsColVisible SingleOrDefault(Expression<Func<TBL_Job_SearchResultsColVisible, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Job_SearchResultsColVisible single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Job_SearchResultsColVisible, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Job_SearchResultsColVisible, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Job_SearchResultsColVisible> Find(Expression<Func<TBL_Job_SearchResultsColVisible, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Job_SearchResultsColVisible> Find(Expression<Func<TBL_Job_SearchResultsColVisible, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Job_SearchResultsColVisible> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Job_SearchResultsColVisible> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Job_SearchResultsColVisible> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Job_SearchResultsColVisible> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Job_SearchResultsColVisible> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Job_SearchResultsColVisible> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "SrId";
        }

        public object KeyValue()
        {
            return this.SrId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.WhoCreated.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Job_SearchResultsColVisible)){
                TBL_Job_SearchResultsColVisible compare=(TBL_Job_SearchResultsColVisible)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.SrId;
        }
        
        public string DescriptorValue()
        {
                            return this.WhoCreated.ToString();
                    }

        public string DescriptorColumn() {
            return "WhoCreated";
        }
        public static string GetKeyColumn()
        {
            return "SrId";
        }        
        public static string GetDescriptorColumn()
        {
            return "WhoCreated";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _SrId;
        public int SrId
        {
            get { return _SrId; }
            set
            {
                if(_SrId!=value){
                    _SrId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SrId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _Country;
        public bool? Country
        {
            get { return _Country; }
            set
            {
                if(_Country!=value){
                    _Country=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Country");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _State;
        public bool? State
        {
            get { return _State; }
            set
            {
                if(_State!=value){
                    _State=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="State");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _City;
        public bool? City
        {
            get { return _City; }
            set
            {
                if(_City!=value){
                    _City=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="City");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _Facility;
        public bool? Facility
        {
            get { return _Facility; }
            set
            {
                if(_Facility!=value){
                    _Facility=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Facility");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _Speciality;
        public bool? Speciality
        {
            get { return _Speciality; }
            set
            {
                if(_Speciality!=value){
                    _Speciality=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Speciality");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _PostDate;
        public bool? PostDate
        {
            get { return _PostDate; }
            set
            {
                if(_PostDate!=value){
                    _PostDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PostDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _ClientId;
        public int? ClientId
        {
            get { return _ClientId; }
            set
            {
                if(_ClientId!=value){
                    _ClientId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ClientId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreatedDate;
        public DateTime? CreatedDate
        {
            get { return _CreatedDate; }
            set
            {
                if(_CreatedDate!=value){
                    _CreatedDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _UpdatedDate;
        public DateTime? UpdatedDate
        {
            get { return _UpdatedDate; }
            set
            {
                if(_UpdatedDate!=value){
                    _UpdatedDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UpdatedDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _WhoCreated;
        public string WhoCreated
        {
            get { return _WhoCreated; }
            set
            {
                if(_WhoCreated!=value){
                    _WhoCreated=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="WhoCreated");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _WhoUpdated;
        public string WhoUpdated
        {
            get { return _WhoUpdated; }
            set
            {
                if(_WhoUpdated!=value){
                    _WhoUpdated=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="WhoUpdated");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Job_SearchResultsColVisible, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_Landing_SubTab table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Landing_SubTab: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Landing_SubTab> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Landing_SubTab>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Landing_SubTab> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Landing_SubTab item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Landing_SubTab item=new TBL_Landing_SubTab();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Landing_SubTab> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Landing_SubTab(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Landing_SubTab.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Landing_SubTab>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Landing_SubTab(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Landing_SubTab(Expression<Func<TBL_Landing_SubTab, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Landing_SubTab> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Landing_SubTab> _repo;
            
            if(db.TestMode){
                TBL_Landing_SubTab.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Landing_SubTab>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Landing_SubTab> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Landing_SubTab SingleOrDefault(Expression<Func<TBL_Landing_SubTab, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Landing_SubTab single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Landing_SubTab SingleOrDefault(Expression<Func<TBL_Landing_SubTab, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Landing_SubTab single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Landing_SubTab, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Landing_SubTab, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Landing_SubTab> Find(Expression<Func<TBL_Landing_SubTab, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Landing_SubTab> Find(Expression<Func<TBL_Landing_SubTab, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Landing_SubTab> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Landing_SubTab> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Landing_SubTab> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Landing_SubTab> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Landing_SubTab> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Landing_SubTab> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "SubTabId";
        }

        public object KeyValue()
        {
            return this.SubTabId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.SubTabName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Landing_SubTab)){
                TBL_Landing_SubTab compare=(TBL_Landing_SubTab)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.SubTabId;
        }
        
        public string DescriptorValue()
        {
                            return this.SubTabName.ToString();
                    }

        public string DescriptorColumn() {
            return "SubTabName";
        }
        public static string GetKeyColumn()
        {
            return "SubTabId";
        }        
        public static string GetDescriptorColumn()
        {
            return "SubTabName";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _SubTabId;
        public int SubTabId
        {
            get { return _SubTabId; }
            set
            {
                if(_SubTabId!=value){
                    _SubTabId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SubTabId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _SubTabName;
        public string SubTabName
        {
            get { return _SubTabName; }
            set
            {
                if(_SubTabName!=value){
                    _SubTabName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SubTabName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _SubTabContent;
        public string SubTabContent
        {
            get { return _SubTabContent; }
            set
            {
                if(_SubTabContent!=value){
                    _SubTabContent=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SubTabContent");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _MainTabId;
        public int? MainTabId
        {
            get { return _MainTabId; }
            set
            {
                if(_MainTabId!=value){
                    _MainTabId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MainTabId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Landing_SubTab, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_Job_SearchDescriptionColVisible table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Job_SearchDescriptionColVisible: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Job_SearchDescriptionColVisible> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Job_SearchDescriptionColVisible>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Job_SearchDescriptionColVisible> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Job_SearchDescriptionColVisible item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Job_SearchDescriptionColVisible item=new TBL_Job_SearchDescriptionColVisible();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Job_SearchDescriptionColVisible> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Job_SearchDescriptionColVisible(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Job_SearchDescriptionColVisible.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Job_SearchDescriptionColVisible>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Job_SearchDescriptionColVisible(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Job_SearchDescriptionColVisible(Expression<Func<TBL_Job_SearchDescriptionColVisible, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Job_SearchDescriptionColVisible> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Job_SearchDescriptionColVisible> _repo;
            
            if(db.TestMode){
                TBL_Job_SearchDescriptionColVisible.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Job_SearchDescriptionColVisible>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Job_SearchDescriptionColVisible> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Job_SearchDescriptionColVisible SingleOrDefault(Expression<Func<TBL_Job_SearchDescriptionColVisible, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Job_SearchDescriptionColVisible single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Job_SearchDescriptionColVisible SingleOrDefault(Expression<Func<TBL_Job_SearchDescriptionColVisible, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Job_SearchDescriptionColVisible single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Job_SearchDescriptionColVisible, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Job_SearchDescriptionColVisible, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Job_SearchDescriptionColVisible> Find(Expression<Func<TBL_Job_SearchDescriptionColVisible, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Job_SearchDescriptionColVisible> Find(Expression<Func<TBL_Job_SearchDescriptionColVisible, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Job_SearchDescriptionColVisible> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Job_SearchDescriptionColVisible> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Job_SearchDescriptionColVisible> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Job_SearchDescriptionColVisible> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Job_SearchDescriptionColVisible> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Job_SearchDescriptionColVisible> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "SdId";
        }

        public object KeyValue()
        {
            return this.SdId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.WhoCreated.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Job_SearchDescriptionColVisible)){
                TBL_Job_SearchDescriptionColVisible compare=(TBL_Job_SearchDescriptionColVisible)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.SdId;
        }
        
        public string DescriptorValue()
        {
                            return this.WhoCreated.ToString();
                    }

        public string DescriptorColumn() {
            return "WhoCreated";
        }
        public static string GetKeyColumn()
        {
            return "SdId";
        }        
        public static string GetDescriptorColumn()
        {
            return "WhoCreated";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _SdId;
        public int SdId
        {
            get { return _SdId; }
            set
            {
                if(_SdId!=value){
                    _SdId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SdId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _JobId;
        public bool? JobId
        {
            get { return _JobId; }
            set
            {
                if(_JobId!=value){
                    _JobId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="JobId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _JobTitle;
        public bool? JobTitle
        {
            get { return _JobTitle; }
            set
            {
                if(_JobTitle!=value){
                    _JobTitle=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="JobTitle");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _Facility;
        public bool? Facility
        {
            get { return _Facility; }
            set
            {
                if(_Facility!=value){
                    _Facility=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Facility");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _Speciality;
        public bool? Speciality
        {
            get { return _Speciality; }
            set
            {
                if(_Speciality!=value){
                    _Speciality=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Speciality");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _Country;
        public bool? Country
        {
            get { return _Country; }
            set
            {
                if(_Country!=value){
                    _Country=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Country");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _State;
        public bool? State
        {
            get { return _State; }
            set
            {
                if(_State!=value){
                    _State=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="State");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _City;
        public bool? City
        {
            get { return _City; }
            set
            {
                if(_City!=value){
                    _City=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="City");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _Description;
        public bool? Description
        {
            get { return _Description; }
            set
            {
                if(_Description!=value){
                    _Description=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Description");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _PostedDate;
        public bool? PostedDate
        {
            get { return _PostedDate; }
            set
            {
                if(_PostedDate!=value){
                    _PostedDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PostedDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _ClientId;
        public int? ClientId
        {
            get { return _ClientId; }
            set
            {
                if(_ClientId!=value){
                    _ClientId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ClientId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreatedDate;
        public DateTime? CreatedDate
        {
            get { return _CreatedDate; }
            set
            {
                if(_CreatedDate!=value){
                    _CreatedDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _UpdatedDate;
        public DateTime? UpdatedDate
        {
            get { return _UpdatedDate; }
            set
            {
                if(_UpdatedDate!=value){
                    _UpdatedDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UpdatedDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _WhoCreated;
        public string WhoCreated
        {
            get { return _WhoCreated; }
            set
            {
                if(_WhoCreated!=value){
                    _WhoCreated=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="WhoCreated");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _WhoUpdated;
        public string WhoUpdated
        {
            get { return _WhoUpdated; }
            set
            {
                if(_WhoUpdated!=value){
                    _WhoUpdated=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="WhoUpdated");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Job_SearchDescriptionColVisible, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_Job_NewsLetter table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Job_NewsLetter: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Job_NewsLetter> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Job_NewsLetter>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Job_NewsLetter> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Job_NewsLetter item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Job_NewsLetter item=new TBL_Job_NewsLetter();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Job_NewsLetter> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Job_NewsLetter(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Job_NewsLetter.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Job_NewsLetter>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Job_NewsLetter(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Job_NewsLetter(Expression<Func<TBL_Job_NewsLetter, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Job_NewsLetter> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Job_NewsLetter> _repo;
            
            if(db.TestMode){
                TBL_Job_NewsLetter.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Job_NewsLetter>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Job_NewsLetter> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Job_NewsLetter SingleOrDefault(Expression<Func<TBL_Job_NewsLetter, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Job_NewsLetter single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Job_NewsLetter SingleOrDefault(Expression<Func<TBL_Job_NewsLetter, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Job_NewsLetter single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Job_NewsLetter, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Job_NewsLetter, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Job_NewsLetter> Find(Expression<Func<TBL_Job_NewsLetter, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Job_NewsLetter> Find(Expression<Func<TBL_Job_NewsLetter, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Job_NewsLetter> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Job_NewsLetter> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Job_NewsLetter> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Job_NewsLetter> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Job_NewsLetter> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Job_NewsLetter> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Nid";
        }

        public object KeyValue()
        {
            return this.Nid;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Name.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Job_NewsLetter)){
                TBL_Job_NewsLetter compare=(TBL_Job_NewsLetter)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Nid;
        }
        
        public string DescriptorValue()
        {
                            return this.Name.ToString();
                    }

        public string DescriptorColumn() {
            return "Name";
        }
        public static string GetKeyColumn()
        {
            return "Nid";
        }        
        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _Nid;
        public int Nid
        {
            get { return _Nid; }
            set
            {
                if(_Nid!=value){
                    _Nid=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Nid");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Email;
        public string Email
        {
            get { return _Email; }
            set
            {
                if(_Email!=value){
                    _Email=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Email");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _PostedDate;
        public DateTime? PostedDate
        {
            get { return _PostedDate; }
            set
            {
                if(_PostedDate!=value){
                    _PostedDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PostedDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _ClientId;
        public int? ClientId
        {
            get { return _ClientId; }
            set
            {
                if(_ClientId!=value){
                    _ClientId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ClientId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Job_NewsLetter, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Tbl_Appointment_Comments table in the mobilesitedesigner Database.
    /// </summary>
    public partial class Tbl_Appointment_Comment: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Tbl_Appointment_Comment> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Tbl_Appointment_Comment>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Tbl_Appointment_Comment> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Tbl_Appointment_Comment item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Tbl_Appointment_Comment item=new Tbl_Appointment_Comment();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Tbl_Appointment_Comment> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public Tbl_Appointment_Comment(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Tbl_Appointment_Comment.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Tbl_Appointment_Comment>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Tbl_Appointment_Comment(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Tbl_Appointment_Comment(Expression<Func<Tbl_Appointment_Comment, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Tbl_Appointment_Comment> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<Tbl_Appointment_Comment> _repo;
            
            if(db.TestMode){
                Tbl_Appointment_Comment.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Tbl_Appointment_Comment>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Tbl_Appointment_Comment> GetRepo(){
            return GetRepo("","");
        }
        
        public static Tbl_Appointment_Comment SingleOrDefault(Expression<Func<Tbl_Appointment_Comment, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Tbl_Appointment_Comment single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Tbl_Appointment_Comment SingleOrDefault(Expression<Func<Tbl_Appointment_Comment, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Tbl_Appointment_Comment single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Tbl_Appointment_Comment, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Tbl_Appointment_Comment, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Tbl_Appointment_Comment> Find(Expression<Func<Tbl_Appointment_Comment, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Tbl_Appointment_Comment> Find(Expression<Func<Tbl_Appointment_Comment, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Tbl_Appointment_Comment> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Tbl_Appointment_Comment> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Tbl_Appointment_Comment> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Tbl_Appointment_Comment> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Tbl_Appointment_Comment> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Tbl_Appointment_Comment> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Comment.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Tbl_Appointment_Comment)){
                Tbl_Appointment_Comment compare=(Tbl_Appointment_Comment)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Comment.ToString();
                    }

        public string DescriptorColumn() {
            return "Comment";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Comment";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _AppointmentId;
        public int? AppointmentId
        {
            get { return _AppointmentId; }
            set
            {
                if(_AppointmentId!=value){
                    _AppointmentId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AppointmentId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _StatusId;
        public int? StatusId
        {
            get { return _StatusId; }
            set
            {
                if(_StatusId!=value){
                    _StatusId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StatusId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _LoginId;
        public int? LoginId
        {
            get { return _LoginId; }
            set
            {
                if(_LoginId!=value){
                    _LoginId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LoginId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Comment;
        public string Comment
        {
            get { return _Comment; }
            set
            {
                if(_Comment!=value){
                    _Comment=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Comment");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreatedOn;
        public DateTime? CreatedOn
        {
            get { return _CreatedOn; }
            set
            {
                if(_CreatedOn!=value){
                    _CreatedOn=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOn");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _ModifiedOn;
        public DateTime? ModifiedOn
        {
            get { return _ModifiedOn; }
            set
            {
                if(_ModifiedOn!=value){
                    _ModifiedOn=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ModifiedOn");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsDeleted;
        public bool? IsDeleted
        {
            get { return _IsDeleted; }
            set
            {
                if(_IsDeleted!=value){
                    _IsDeleted=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsDeleted");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _ActionTypeId;
        public int? ActionTypeId
        {
            get { return _ActionTypeId; }
            set
            {
                if(_ActionTypeId!=value){
                    _ActionTypeId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ActionTypeId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _ActionId;
        public int? ActionId
        {
            get { return _ActionId; }
            set
            {
                if(_ActionId!=value){
                    _ActionId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ActionId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if (!_dirtyColumns.Any(x => x.Name.ToLower() == "modifiedon")) {
               this.ModifiedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            }            
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            this.ModifiedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            this.CreatedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            this.ModifiedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                         
             this.IsDeleted=true;
            _repo.Update(this,provider);
                
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<Tbl_Appointment_Comment, bool>> expression) {
            var repo = GetRepo();
            
            
            List<Tbl_Appointment_Comment> items=repo.GetAll().Where(expression).ToList();
            items.ForEach(x=>x.IsDeleted=true);
            repo.Update(items);
            
        }

                
        public static void Destroy(Func<Tbl_Appointment_Comment, bool> expression) {
            var repo = GetRepo();
            repo.Delete(expression);
        }
        
        public static void Destroy(object key) {
            var repo = GetRepo();
            repo.Delete(key);
        }
        
        public static void Destroy(object key, IDataProvider provider) {
        
            var repo = GetRepo();
            repo.Delete(key,provider);
            
        }        
        
        public void Destroy() {
            _repo.Delete(KeyValue());
        }        
        public void Destroy(IDataProvider provider) {
            _repo.Delete(KeyValue(), provider);
        }         
        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_Job_Jobs table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Job_Job: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Job_Job> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Job_Job>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Job_Job> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Job_Job item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Job_Job item=new TBL_Job_Job();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Job_Job> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Job_Job(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Job_Job.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Job_Job>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Job_Job(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Job_Job(Expression<Func<TBL_Job_Job, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Job_Job> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Job_Job> _repo;
            
            if(db.TestMode){
                TBL_Job_Job.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Job_Job>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Job_Job> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Job_Job SingleOrDefault(Expression<Func<TBL_Job_Job, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Job_Job single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Job_Job SingleOrDefault(Expression<Func<TBL_Job_Job, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Job_Job single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Job_Job, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Job_Job, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Job_Job> Find(Expression<Func<TBL_Job_Job, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Job_Job> Find(Expression<Func<TBL_Job_Job, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Job_Job> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Job_Job> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Job_Job> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Job_Job> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Job_Job> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Job_Job> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Jid";
        }

        public object KeyValue()
        {
            return this.Jid;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.JobId.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Job_Job)){
                TBL_Job_Job compare=(TBL_Job_Job)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Jid;
        }
        
        public string DescriptorValue()
        {
                            return this.JobId.ToString();
                    }

        public string DescriptorColumn() {
            return "JobId";
        }
        public static string GetKeyColumn()
        {
            return "Jid";
        }        
        public static string GetDescriptorColumn()
        {
            return "JobId";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _Jid;
        public int Jid
        {
            get { return _Jid; }
            set
            {
                if(_Jid!=value){
                    _Jid=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Jid");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _JobId;
        public string JobId
        {
            get { return _JobId; }
            set
            {
                if(_JobId!=value){
                    _JobId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="JobId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _JobTitle;
        public string JobTitle
        {
            get { return _JobTitle; }
            set
            {
                if(_JobTitle!=value){
                    _JobTitle=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="JobTitle");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _Facility;
        public int? Facility
        {
            get { return _Facility; }
            set
            {
                if(_Facility!=value){
                    _Facility=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Facility");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _Speciality;
        public int? Speciality
        {
            get { return _Speciality; }
            set
            {
                if(_Speciality!=value){
                    _Speciality=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Speciality");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _Location;
        public int? Location
        {
            get { return _Location; }
            set
            {
                if(_Location!=value){
                    _Location=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Location");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Description;
        public string Description
        {
            get { return _Description; }
            set
            {
                if(_Description!=value){
                    _Description=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Description");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _Visibility;
        public bool? Visibility
        {
            get { return _Visibility; }
            set
            {
                if(_Visibility!=value){
                    _Visibility=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Visibility");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _ClientId;
        public int? ClientId
        {
            get { return _ClientId; }
            set
            {
                if(_ClientId!=value){
                    _ClientId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ClientId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreatedDate;
        public DateTime? CreatedDate
        {
            get { return _CreatedDate; }
            set
            {
                if(_CreatedDate!=value){
                    _CreatedDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _UpdatedDate;
        public DateTime? UpdatedDate
        {
            get { return _UpdatedDate; }
            set
            {
                if(_UpdatedDate!=value){
                    _UpdatedDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UpdatedDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _WhoCreated;
        public string WhoCreated
        {
            get { return _WhoCreated; }
            set
            {
                if(_WhoCreated!=value){
                    _WhoCreated=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="WhoCreated");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _WhoUpdated;
        public string WhoUpdated
        {
            get { return _WhoUpdated; }
            set
            {
                if(_WhoUpdated!=value){
                    _WhoUpdated=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="WhoUpdated");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Job_Job, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_Login table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Login: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Login> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Login>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Login> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Login item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Login item=new TBL_Login();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Login> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Login(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Login.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Login>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Login(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Login(Expression<Func<TBL_Login, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Login> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Login> _repo;
            
            if(db.TestMode){
                TBL_Login.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Login>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Login> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Login SingleOrDefault(Expression<Func<TBL_Login, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Login single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Login SingleOrDefault(Expression<Func<TBL_Login, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Login single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Login, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Login, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Login> Find(Expression<Func<TBL_Login, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Login> Find(Expression<Func<TBL_Login, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Login> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Login> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Login> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Login> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Login> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Login> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "LoginId";
        }

        public object KeyValue()
        {
            return this.LoginId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.FirstName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Login)){
                TBL_Login compare=(TBL_Login)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.LoginId;
        }
        
        public string DescriptorValue()
        {
                            return this.FirstName.ToString();
                    }

        public string DescriptorColumn() {
            return "FirstName";
        }
        public static string GetKeyColumn()
        {
            return "LoginId";
        }        
        public static string GetDescriptorColumn()
        {
            return "FirstName";
        }
        
        #region ' Foreign Keys '
        public IQueryable<TBL_Doctor> TBL_Doctors
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_Doctor.GetRepo();
                  return from items in repo.GetAll()
                       where items.LoginId == _LoginId
                       select items;
            }
        }

        public IQueryable<TBL_Patient> TBL_Patients
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_Patient.GetRepo();
                  return from items in repo.GetAll()
                       where items.LoginId == _LoginId
                       select items;
            }
        }

        public IQueryable<TBL_Service> TBL_Services
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_Service.GetRepo();
                  return from items in repo.GetAll()
                       where items.LoginId == _LoginId
                       select items;
            }
        }

        #endregion
        

        int _LoginId;
        public int LoginId
        {
            get { return _LoginId; }
            set
            {
                if(_LoginId!=value){
                    _LoginId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LoginId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _FirstName;
        public string FirstName
        {
            get { return _FirstName; }
            set
            {
                if(_FirstName!=value){
                    _FirstName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FirstName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _LastName;
        public string LastName
        {
            get { return _LastName; }
            set
            {
                if(_LastName!=value){
                    _LastName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LastName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _MedAppId;
        public string MedAppId
        {
            get { return _MedAppId; }
            set
            {
                if(_MedAppId!=value){
                    _MedAppId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MedAppId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _CountryId;
        public int? CountryId
        {
            get { return _CountryId; }
            set
            {
                if(_CountryId!=value){
                    _CountryId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CountryId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _MobileId;
        public string MobileId
        {
            get { return _MobileId; }
            set
            {
                if(_MobileId!=value){
                    _MobileId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MobileId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _EmailId;
        public string EmailId
        {
            get { return _EmailId; }
            set
            {
                if(_EmailId!=value){
                    _EmailId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EmailId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Password;
        public string Password
        {
            get { return _Password; }
            set
            {
                if(_Password!=value){
                    _Password=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Password");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsDirect;
        public bool? IsDirect
        {
            get { return _IsDirect; }
            set
            {
                if(_IsDirect!=value){
                    _IsDirect=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsDirect");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsActivated;
        public bool? IsActivated
        {
            get { return _IsActivated; }
            set
            {
                if(_IsActivated!=value){
                    _IsActivated=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsActivated");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsEmailActivated;
        public bool? IsEmailActivated
        {
            get { return _IsEmailActivated; }
            set
            {
                if(_IsEmailActivated!=value){
                    _IsEmailActivated=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsEmailActivated");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _TransactionToken;
        public string TransactionToken
        {
            get { return _TransactionToken; }
            set
            {
                if(_TransactionToken!=value){
                    _TransactionToken=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TransactionToken");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsEmailNotification;
        public bool? IsEmailNotification
        {
            get { return _IsEmailNotification; }
            set
            {
                if(_IsEmailNotification!=value){
                    _IsEmailNotification=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsEmailNotification");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsSMSNotification;
        public bool? IsSMSNotification
        {
            get { return _IsSMSNotification; }
            set
            {
                if(_IsSMSNotification!=value){
                    _IsSMSNotification=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsSMSNotification");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreatedOn;
        public DateTime? CreatedOn
        {
            get { return _CreatedOn; }
            set
            {
                if(_CreatedOn!=value){
                    _CreatedOn=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOn");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _ModifiedOn;
        public DateTime? ModifiedOn
        {
            get { return _ModifiedOn; }
            set
            {
                if(_ModifiedOn!=value){
                    _ModifiedOn=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ModifiedOn");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsDeleted;
        public bool? IsDeleted
        {
            get { return _IsDeleted; }
            set
            {
                if(_IsDeleted!=value){
                    _IsDeleted=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsDeleted");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if (!_dirtyColumns.Any(x => x.Name.ToLower() == "modifiedon")) {
               this.ModifiedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            }            
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            this.ModifiedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            this.CreatedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            this.ModifiedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                         
             this.IsDeleted=true;
            _repo.Update(this,provider);
                
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Login, bool>> expression) {
            var repo = GetRepo();
            
            
            List<TBL_Login> items=repo.GetAll().Where(expression).ToList();
            items.ForEach(x=>x.IsDeleted=true);
            repo.Update(items);
            
        }

                
        public static void Destroy(Func<TBL_Login, bool> expression) {
            var repo = GetRepo();
            repo.Delete(expression);
        }
        
        public static void Destroy(object key) {
            var repo = GetRepo();
            repo.Delete(key);
        }
        
        public static void Destroy(object key, IDataProvider provider) {
        
            var repo = GetRepo();
            repo.Delete(key,provider);
            
        }        
        
        public void Destroy() {
            _repo.Delete(KeyValue());
        }        
        public void Destroy(IDataProvider provider) {
            _repo.Delete(KeyValue(), provider);
        }         
        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_Job_HrLogin table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Job_HrLogin: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Job_HrLogin> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Job_HrLogin>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Job_HrLogin> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Job_HrLogin item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Job_HrLogin item=new TBL_Job_HrLogin();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Job_HrLogin> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Job_HrLogin(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Job_HrLogin.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Job_HrLogin>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Job_HrLogin(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Job_HrLogin(Expression<Func<TBL_Job_HrLogin, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Job_HrLogin> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Job_HrLogin> _repo;
            
            if(db.TestMode){
                TBL_Job_HrLogin.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Job_HrLogin>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Job_HrLogin> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Job_HrLogin SingleOrDefault(Expression<Func<TBL_Job_HrLogin, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Job_HrLogin single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Job_HrLogin SingleOrDefault(Expression<Func<TBL_Job_HrLogin, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Job_HrLogin single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Job_HrLogin, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Job_HrLogin, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Job_HrLogin> Find(Expression<Func<TBL_Job_HrLogin, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Job_HrLogin> Find(Expression<Func<TBL_Job_HrLogin, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Job_HrLogin> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Job_HrLogin> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Job_HrLogin> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Job_HrLogin> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Job_HrLogin> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Job_HrLogin> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Hid";
        }

        public object KeyValue()
        {
            return this.Hid;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.UserName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Job_HrLogin)){
                TBL_Job_HrLogin compare=(TBL_Job_HrLogin)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Hid;
        }
        
        public string DescriptorValue()
        {
                            return this.UserName.ToString();
                    }

        public string DescriptorColumn() {
            return "UserName";
        }
        public static string GetKeyColumn()
        {
            return "Hid";
        }        
        public static string GetDescriptorColumn()
        {
            return "UserName";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _Hid;
        public int Hid
        {
            get { return _Hid; }
            set
            {
                if(_Hid!=value){
                    _Hid=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Hid");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _UserName;
        public string UserName
        {
            get { return _UserName; }
            set
            {
                if(_UserName!=value){
                    _UserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Password;
        public string Password
        {
            get { return _Password; }
            set
            {
                if(_Password!=value){
                    _Password=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Password");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _ClientId;
        public int? ClientId
        {
            get { return _ClientId; }
            set
            {
                if(_ClientId!=value){
                    _ClientId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ClientId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreatedDate;
        public DateTime? CreatedDate
        {
            get { return _CreatedDate; }
            set
            {
                if(_CreatedDate!=value){
                    _CreatedDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _UpdatedDate;
        public DateTime? UpdatedDate
        {
            get { return _UpdatedDate; }
            set
            {
                if(_UpdatedDate!=value){
                    _UpdatedDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UpdatedDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _WhoCreated;
        public string WhoCreated
        {
            get { return _WhoCreated; }
            set
            {
                if(_WhoCreated!=value){
                    _WhoCreated=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="WhoCreated");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _WhoUpdated;
        public string WhoUpdated
        {
            get { return _WhoUpdated; }
            set
            {
                if(_WhoUpdated!=value){
                    _WhoUpdated=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="WhoUpdated");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Job_HrLogin, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_Job_HotOppsColVisible table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Job_HotOppsColVisible: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Job_HotOppsColVisible> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Job_HotOppsColVisible>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Job_HotOppsColVisible> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Job_HotOppsColVisible item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Job_HotOppsColVisible item=new TBL_Job_HotOppsColVisible();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Job_HotOppsColVisible> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Job_HotOppsColVisible(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Job_HotOppsColVisible.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Job_HotOppsColVisible>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Job_HotOppsColVisible(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Job_HotOppsColVisible(Expression<Func<TBL_Job_HotOppsColVisible, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Job_HotOppsColVisible> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Job_HotOppsColVisible> _repo;
            
            if(db.TestMode){
                TBL_Job_HotOppsColVisible.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Job_HotOppsColVisible>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Job_HotOppsColVisible> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Job_HotOppsColVisible SingleOrDefault(Expression<Func<TBL_Job_HotOppsColVisible, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Job_HotOppsColVisible single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Job_HotOppsColVisible SingleOrDefault(Expression<Func<TBL_Job_HotOppsColVisible, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Job_HotOppsColVisible single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Job_HotOppsColVisible, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Job_HotOppsColVisible, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Job_HotOppsColVisible> Find(Expression<Func<TBL_Job_HotOppsColVisible, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Job_HotOppsColVisible> Find(Expression<Func<TBL_Job_HotOppsColVisible, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Job_HotOppsColVisible> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Job_HotOppsColVisible> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Job_HotOppsColVisible> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Job_HotOppsColVisible> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Job_HotOppsColVisible> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Job_HotOppsColVisible> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "HId";
        }

        public object KeyValue()
        {
            return this.HId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.WhoCreated.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Job_HotOppsColVisible)){
                TBL_Job_HotOppsColVisible compare=(TBL_Job_HotOppsColVisible)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.HId;
        }
        
        public string DescriptorValue()
        {
                            return this.WhoCreated.ToString();
                    }

        public string DescriptorColumn() {
            return "WhoCreated";
        }
        public static string GetKeyColumn()
        {
            return "HId";
        }        
        public static string GetDescriptorColumn()
        {
            return "WhoCreated";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _HId;
        public int HId
        {
            get { return _HId; }
            set
            {
                if(_HId!=value){
                    _HId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="HId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _Country;
        public bool? Country
        {
            get { return _Country; }
            set
            {
                if(_Country!=value){
                    _Country=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Country");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _State;
        public bool? State
        {
            get { return _State; }
            set
            {
                if(_State!=value){
                    _State=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="State");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _City;
        public bool? City
        {
            get { return _City; }
            set
            {
                if(_City!=value){
                    _City=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="City");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _Facility;
        public bool? Facility
        {
            get { return _Facility; }
            set
            {
                if(_Facility!=value){
                    _Facility=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Facility");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _Speciality;
        public bool? Speciality
        {
            get { return _Speciality; }
            set
            {
                if(_Speciality!=value){
                    _Speciality=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Speciality");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _PostedDate;
        public bool? PostedDate
        {
            get { return _PostedDate; }
            set
            {
                if(_PostedDate!=value){
                    _PostedDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PostedDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _ClientId;
        public int? ClientId
        {
            get { return _ClientId; }
            set
            {
                if(_ClientId!=value){
                    _ClientId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ClientId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreatedDate;
        public DateTime? CreatedDate
        {
            get { return _CreatedDate; }
            set
            {
                if(_CreatedDate!=value){
                    _CreatedDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _UpdatedDate;
        public DateTime? UpdatedDate
        {
            get { return _UpdatedDate; }
            set
            {
                if(_UpdatedDate!=value){
                    _UpdatedDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UpdatedDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _WhoCreated;
        public string WhoCreated
        {
            get { return _WhoCreated; }
            set
            {
                if(_WhoCreated!=value){
                    _WhoCreated=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="WhoCreated");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _WhoUpdated;
        public string WhoUpdated
        {
            get { return _WhoUpdated; }
            set
            {
                if(_WhoUpdated!=value){
                    _WhoUpdated=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="WhoUpdated");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Job_HotOppsColVisible, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_Job_Facility table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Job_Facility: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Job_Facility> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Job_Facility>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Job_Facility> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Job_Facility item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Job_Facility item=new TBL_Job_Facility();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Job_Facility> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Job_Facility(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Job_Facility.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Job_Facility>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Job_Facility(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Job_Facility(Expression<Func<TBL_Job_Facility, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Job_Facility> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Job_Facility> _repo;
            
            if(db.TestMode){
                TBL_Job_Facility.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Job_Facility>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Job_Facility> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Job_Facility SingleOrDefault(Expression<Func<TBL_Job_Facility, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Job_Facility single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Job_Facility SingleOrDefault(Expression<Func<TBL_Job_Facility, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Job_Facility single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Job_Facility, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Job_Facility, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Job_Facility> Find(Expression<Func<TBL_Job_Facility, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Job_Facility> Find(Expression<Func<TBL_Job_Facility, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Job_Facility> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Job_Facility> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Job_Facility> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Job_Facility> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Job_Facility> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Job_Facility> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "FacId";
        }

        public object KeyValue()
        {
            return this.FacId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Facility.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Job_Facility)){
                TBL_Job_Facility compare=(TBL_Job_Facility)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.FacId;
        }
        
        public string DescriptorValue()
        {
                            return this.Facility.ToString();
                    }

        public string DescriptorColumn() {
            return "Facility";
        }
        public static string GetKeyColumn()
        {
            return "FacId";
        }        
        public static string GetDescriptorColumn()
        {
            return "Facility";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _FacId;
        public int FacId
        {
            get { return _FacId; }
            set
            {
                if(_FacId!=value){
                    _FacId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FacId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Facility;
        public string Facility
        {
            get { return _Facility; }
            set
            {
                if(_Facility!=value){
                    _Facility=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Facility");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _Visibility;
        public bool? Visibility
        {
            get { return _Visibility; }
            set
            {
                if(_Visibility!=value){
                    _Visibility=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Visibility");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _ClientId;
        public int? ClientId
        {
            get { return _ClientId; }
            set
            {
                if(_ClientId!=value){
                    _ClientId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ClientId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreatedDate;
        public DateTime? CreatedDate
        {
            get { return _CreatedDate; }
            set
            {
                if(_CreatedDate!=value){
                    _CreatedDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _UpdatedDate;
        public DateTime? UpdatedDate
        {
            get { return _UpdatedDate; }
            set
            {
                if(_UpdatedDate!=value){
                    _UpdatedDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UpdatedDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _WhoCreated;
        public string WhoCreated
        {
            get { return _WhoCreated; }
            set
            {
                if(_WhoCreated!=value){
                    _WhoCreated=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="WhoCreated");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _WhoUpdated;
        public string WhoUpdated
        {
            get { return _WhoUpdated; }
            set
            {
                if(_WhoUpdated!=value){
                    _WhoUpdated=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="WhoUpdated");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Job_Facility, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_Service_Diagnosis table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Service_Diagnosi: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Service_Diagnosi> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Service_Diagnosi>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Service_Diagnosi> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Service_Diagnosi item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Service_Diagnosi item=new TBL_Service_Diagnosi();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Service_Diagnosi> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Service_Diagnosi(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Service_Diagnosi.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Service_Diagnosi>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Service_Diagnosi(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Service_Diagnosi(Expression<Func<TBL_Service_Diagnosi, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Service_Diagnosi> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Service_Diagnosi> _repo;
            
            if(db.TestMode){
                TBL_Service_Diagnosi.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Service_Diagnosi>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Service_Diagnosi> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Service_Diagnosi SingleOrDefault(Expression<Func<TBL_Service_Diagnosi, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Service_Diagnosi single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Service_Diagnosi SingleOrDefault(Expression<Func<TBL_Service_Diagnosi, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Service_Diagnosi single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Service_Diagnosi, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Service_Diagnosi, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Service_Diagnosi> Find(Expression<Func<TBL_Service_Diagnosi, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Service_Diagnosi> Find(Expression<Func<TBL_Service_Diagnosi, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Service_Diagnosi> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Service_Diagnosi> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Service_Diagnosi> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Service_Diagnosi> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Service_Diagnosi> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Service_Diagnosi> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ServiceId";
        }

        public object KeyValue()
        {
            return this.ServiceId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.DiagnosisId.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Service_Diagnosi)){
                TBL_Service_Diagnosi compare=(TBL_Service_Diagnosi)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.ServiceId;
        }
        
        public string DescriptorValue()
        {
                            return this.DiagnosisId.ToString();
                    }

        public string DescriptorColumn() {
            return "DiagnosisId";
        }
        public static string GetKeyColumn()
        {
            return "ServiceId";
        }        
        public static string GetDescriptorColumn()
        {
            return "DiagnosisId";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int? _ServiceId;
        public int? ServiceId
        {
            get { return _ServiceId; }
            set
            {
                if(_ServiceId!=value){
                    _ServiceId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ServiceId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _DiagnosisId;
        public int? DiagnosisId
        {
            get { return _DiagnosisId; }
            set
            {
                if(_DiagnosisId!=value){
                    _DiagnosisId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DiagnosisId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Service_Diagnosi, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_Job_Apply table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Job_Apply: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Job_Apply> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Job_Apply>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Job_Apply> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Job_Apply item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Job_Apply item=new TBL_Job_Apply();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Job_Apply> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Job_Apply(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Job_Apply.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Job_Apply>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Job_Apply(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Job_Apply(Expression<Func<TBL_Job_Apply, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Job_Apply> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Job_Apply> _repo;
            
            if(db.TestMode){
                TBL_Job_Apply.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Job_Apply>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Job_Apply> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Job_Apply SingleOrDefault(Expression<Func<TBL_Job_Apply, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Job_Apply single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Job_Apply SingleOrDefault(Expression<Func<TBL_Job_Apply, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Job_Apply single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Job_Apply, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Job_Apply, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Job_Apply> Find(Expression<Func<TBL_Job_Apply, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Job_Apply> Find(Expression<Func<TBL_Job_Apply, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Job_Apply> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Job_Apply> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Job_Apply> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Job_Apply> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Job_Apply> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Job_Apply> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Aid";
        }

        public object KeyValue()
        {
            return this.Aid;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.JobId.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Job_Apply)){
                TBL_Job_Apply compare=(TBL_Job_Apply)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Aid;
        }
        
        public string DescriptorValue()
        {
                            return this.JobId.ToString();
                    }

        public string DescriptorColumn() {
            return "JobId";
        }
        public static string GetKeyColumn()
        {
            return "Aid";
        }        
        public static string GetDescriptorColumn()
        {
            return "JobId";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _Aid;
        public int Aid
        {
            get { return _Aid; }
            set
            {
                if(_Aid!=value){
                    _Aid=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Aid");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _JobId;
        public string JobId
        {
            get { return _JobId; }
            set
            {
                if(_JobId!=value){
                    _JobId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="JobId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CandidateName;
        public string CandidateName
        {
            get { return _CandidateName; }
            set
            {
                if(_CandidateName!=value){
                    _CandidateName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CandidateName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Age;
        public string Age
        {
            get { return _Age; }
            set
            {
                if(_Age!=value){
                    _Age=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Age");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Sex;
        public string Sex
        {
            get { return _Sex; }
            set
            {
                if(_Sex!=value){
                    _Sex=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Sex");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _PermanentAddress;
        public string PermanentAddress
        {
            get { return _PermanentAddress; }
            set
            {
                if(_PermanentAddress!=value){
                    _PermanentAddress=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PermanentAddress");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Email;
        public string Email
        {
            get { return _Email; }
            set
            {
                if(_Email!=value){
                    _Email=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Email");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _City;
        public string City
        {
            get { return _City; }
            set
            {
                if(_City!=value){
                    _City=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="City");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _District;
        public string District
        {
            get { return _District; }
            set
            {
                if(_District!=value){
                    _District=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="District");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _State;
        public string State
        {
            get { return _State; }
            set
            {
                if(_State!=value){
                    _State=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="State");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Country;
        public string Country
        {
            get { return _Country; }
            set
            {
                if(_Country!=value){
                    _Country=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Country");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _AboutUs;
        public string AboutUs
        {
            get { return _AboutUs; }
            set
            {
                if(_AboutUs!=value){
                    _AboutUs=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AboutUs");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ContactPhone;
        public string ContactPhone
        {
            get { return _ContactPhone; }
            set
            {
                if(_ContactPhone!=value){
                    _ContactPhone=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ContactPhone");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ContactMobile;
        public string ContactMobile
        {
            get { return _ContactMobile; }
            set
            {
                if(_ContactMobile!=value){
                    _ContactMobile=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ContactMobile");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _BestTime;
        public string BestTime
        {
            get { return _BestTime; }
            set
            {
                if(_BestTime!=value){
                    _BestTime=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BestTime");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Specialization;
        public string Specialization
        {
            get { return _Specialization; }
            set
            {
                if(_Specialization!=value){
                    _Specialization=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Specialization");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Experience;
        public string Experience
        {
            get { return _Experience; }
            set
            {
                if(_Experience!=value){
                    _Experience=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Experience");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _HighestQualification;
        public string HighestQualification
        {
            get { return _HighestQualification; }
            set
            {
                if(_HighestQualification!=value){
                    _HighestQualification=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="HighestQualification");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _HighestDegree;
        public string HighestDegree
        {
            get { return _HighestDegree; }
            set
            {
                if(_HighestDegree!=value){
                    _HighestDegree=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="HighestDegree");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CurrentEmployer;
        public string CurrentEmployer
        {
            get { return _CurrentEmployer; }
            set
            {
                if(_CurrentEmployer!=value){
                    _CurrentEmployer=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CurrentEmployer");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ExistingPay;
        public string ExistingPay
        {
            get { return _ExistingPay; }
            set
            {
                if(_ExistingPay!=value){
                    _ExistingPay=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ExistingPay");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DesiredPay;
        public string DesiredPay
        {
            get { return _DesiredPay; }
            set
            {
                if(_DesiredPay!=value){
                    _DesiredPay=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DesiredPay");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Willing;
        public string Willing
        {
            get { return _Willing; }
            set
            {
                if(_Willing!=value){
                    _Willing=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Willing");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _UploadResume;
        public string UploadResume
        {
            get { return _UploadResume; }
            set
            {
                if(_UploadResume!=value){
                    _UploadResume=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UploadResume");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _AppliedDate;
        public DateTime? AppliedDate
        {
            get { return _AppliedDate; }
            set
            {
                if(_AppliedDate!=value){
                    _AppliedDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AppliedDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _HrStatus;
        public string HrStatus
        {
            get { return _HrStatus; }
            set
            {
                if(_HrStatus!=value){
                    _HrStatus=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="HrStatus");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _HrDateUpdated;
        public DateTime? HrDateUpdated
        {
            get { return _HrDateUpdated; }
            set
            {
                if(_HrDateUpdated!=value){
                    _HrDateUpdated=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="HrDateUpdated");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _FinalStatus;
        public string FinalStatus
        {
            get { return _FinalStatus; }
            set
            {
                if(_FinalStatus!=value){
                    _FinalStatus=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FinalStatus");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Notes;
        public string Notes
        {
            get { return _Notes; }
            set
            {
                if(_Notes!=value){
                    _Notes=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Notes");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _ClientId;
        public int? ClientId
        {
            get { return _ClientId; }
            set
            {
                if(_ClientId!=value){
                    _ClientId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ClientId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Job_Apply, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_GupShup table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_GupShup: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_GupShup> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_GupShup>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_GupShup> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_GupShup item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_GupShup item=new TBL_GupShup();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_GupShup> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_GupShup(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_GupShup.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_GupShup>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_GupShup(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_GupShup(Expression<Func<TBL_GupShup, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_GupShup> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_GupShup> _repo;
            
            if(db.TestMode){
                TBL_GupShup.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_GupShup>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_GupShup> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_GupShup SingleOrDefault(Expression<Func<TBL_GupShup, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_GupShup single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_GupShup SingleOrDefault(Expression<Func<TBL_GupShup, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_GupShup single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_GupShup, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_GupShup, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_GupShup> Find(Expression<Func<TBL_GupShup, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_GupShup> Find(Expression<Func<TBL_GupShup, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_GupShup> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_GupShup> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_GupShup> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_GupShup> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_GupShup> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_GupShup> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ExternalId";
        }

        public object KeyValue()
        {
            return this.ExternalId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ExternalId.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_GupShup)){
                TBL_GupShup compare=(TBL_GupShup)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.ExternalId.ToString();
                    }

        public string DescriptorColumn() {
            return "ExternalId";
        }
        public static string GetKeyColumn()
        {
            return "ExternalId";
        }        
        public static string GetDescriptorColumn()
        {
            return "ExternalId";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _ExternalId;
        public string ExternalId
        {
            get { return _ExternalId; }
            set
            {
                if(_ExternalId!=value){
                    _ExternalId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ExternalId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DeliveredTS;
        public string DeliveredTS
        {
            get { return _DeliveredTS; }
            set
            {
                if(_DeliveredTS!=value){
                    _DeliveredTS=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DeliveredTS");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Status;
        public string Status
        {
            get { return _Status; }
            set
            {
                if(_Status!=value){
                    _Status=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Status");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _PhoneNo;
        public string PhoneNo
        {
            get { return _PhoneNo; }
            set
            {
                if(_PhoneNo!=value){
                    _PhoneNo=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PhoneNo");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Cause;
        public string Cause
        {
            get { return _Cause; }
            set
            {
                if(_Cause!=value){
                    _Cause=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Cause");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_GupShup, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_Landing_ImageGallery table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Landing_ImageGallery: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Landing_ImageGallery> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Landing_ImageGallery>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Landing_ImageGallery> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Landing_ImageGallery item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Landing_ImageGallery item=new TBL_Landing_ImageGallery();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Landing_ImageGallery> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Landing_ImageGallery(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Landing_ImageGallery.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Landing_ImageGallery>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Landing_ImageGallery(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Landing_ImageGallery(Expression<Func<TBL_Landing_ImageGallery, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Landing_ImageGallery> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Landing_ImageGallery> _repo;
            
            if(db.TestMode){
                TBL_Landing_ImageGallery.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Landing_ImageGallery>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Landing_ImageGallery> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Landing_ImageGallery SingleOrDefault(Expression<Func<TBL_Landing_ImageGallery, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Landing_ImageGallery single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Landing_ImageGallery SingleOrDefault(Expression<Func<TBL_Landing_ImageGallery, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Landing_ImageGallery single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Landing_ImageGallery, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Landing_ImageGallery, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Landing_ImageGallery> Find(Expression<Func<TBL_Landing_ImageGallery, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Landing_ImageGallery> Find(Expression<Func<TBL_Landing_ImageGallery, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Landing_ImageGallery> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Landing_ImageGallery> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Landing_ImageGallery> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Landing_ImageGallery> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Landing_ImageGallery> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Landing_ImageGallery> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ImageId";
        }

        public object KeyValue()
        {
            return this.ImageId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ImageName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Landing_ImageGallery)){
                TBL_Landing_ImageGallery compare=(TBL_Landing_ImageGallery)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.ImageId;
        }
        
        public string DescriptorValue()
        {
                            return this.ImageName.ToString();
                    }

        public string DescriptorColumn() {
            return "ImageName";
        }
        public static string GetKeyColumn()
        {
            return "ImageId";
        }        
        public static string GetDescriptorColumn()
        {
            return "ImageName";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _ImageId;
        public int ImageId
        {
            get { return _ImageId; }
            set
            {
                if(_ImageId!=value){
                    _ImageId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ImageId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _AccountId;
        public int? AccountId
        {
            get { return _AccountId; }
            set
            {
                if(_AccountId!=value){
                    _AccountId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AccountId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _AccountTypeId;
        public int? AccountTypeId
        {
            get { return _AccountTypeId; }
            set
            {
                if(_AccountTypeId!=value){
                    _AccountTypeId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AccountTypeId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _Version;
        public int? Version
        {
            get { return _Version; }
            set
            {
                if(_Version!=value){
                    _Version=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Version");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ImageName;
        public string ImageName
        {
            get { return _ImageName; }
            set
            {
                if(_ImageName!=value){
                    _ImageName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ImageName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ImageDescription;
        public string ImageDescription
        {
            get { return _ImageDescription; }
            set
            {
                if(_ImageDescription!=value){
                    _ImageDescription=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ImageDescription");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        byte[] _Images;
        public byte[] Images
        {
            get { return _Images; }
            set
            {
                if(_Images!=value){
                    _Images=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Images");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _Selected;
        public bool? Selected
        {
            get { return _Selected; }
            set
            {
                if(_Selected!=value){
                    _Selected=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Selected");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Landing_ImageGallery, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_Organization table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Organization: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Organization> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Organization>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Organization> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Organization item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Organization item=new TBL_Organization();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Organization> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Organization(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Organization.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Organization>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Organization(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Organization(Expression<Func<TBL_Organization, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Organization> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Organization> _repo;
            
            if(db.TestMode){
                TBL_Organization.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Organization>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Organization> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Organization SingleOrDefault(Expression<Func<TBL_Organization, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Organization single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Organization SingleOrDefault(Expression<Func<TBL_Organization, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Organization single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Organization, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Organization, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Organization> Find(Expression<Func<TBL_Organization, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Organization> Find(Expression<Func<TBL_Organization, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Organization> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Organization> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Organization> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Organization> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Organization> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Organization> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "OrganizationId";
        }

        public object KeyValue()
        {
            return this.OrganizationId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.OrganizationName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Organization)){
                TBL_Organization compare=(TBL_Organization)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.OrganizationId;
        }
        
        public string DescriptorValue()
        {
                            return this.OrganizationName.ToString();
                    }

        public string DescriptorColumn() {
            return "OrganizationName";
        }
        public static string GetKeyColumn()
        {
            return "OrganizationId";
        }        
        public static string GetDescriptorColumn()
        {
            return "OrganizationName";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _OrganizationId;
        public int OrganizationId
        {
            get { return _OrganizationId; }
            set
            {
                if(_OrganizationId!=value){
                    _OrganizationId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrganizationId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OrganizationName;
        public string OrganizationName
        {
            get { return _OrganizationName; }
            set
            {
                if(_OrganizationName!=value){
                    _OrganizationName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrganizationName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreatedOn;
        public DateTime? CreatedOn
        {
            get { return _CreatedOn; }
            set
            {
                if(_CreatedOn!=value){
                    _CreatedOn=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOn");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsDeleted;
        public bool? IsDeleted
        {
            get { return _IsDeleted; }
            set
            {
                if(_IsDeleted!=value){
                    _IsDeleted=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsDeleted");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            this.CreatedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                         
             this.IsDeleted=true;
            _repo.Update(this,provider);
                
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Organization, bool>> expression) {
            var repo = GetRepo();
            
            
            List<TBL_Organization> items=repo.GetAll().Where(expression).ToList();
            items.ForEach(x=>x.IsDeleted=true);
            repo.Update(items);
            
        }

                
        public static void Destroy(Func<TBL_Organization, bool> expression) {
            var repo = GetRepo();
            repo.Delete(expression);
        }
        
        public static void Destroy(object key) {
            var repo = GetRepo();
            repo.Delete(key);
        }
        
        public static void Destroy(object key, IDataProvider provider) {
        
            var repo = GetRepo();
            repo.Delete(key,provider);
            
        }        
        
        public void Destroy() {
            _repo.Delete(KeyValue());
        }        
        public void Destroy(IDataProvider provider) {
            _repo.Delete(KeyValue(), provider);
        }         
        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_Token table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Token: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Token> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Token>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Token> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Token item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Token item=new TBL_Token();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Token> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Token(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Token.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Token>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Token(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Token(Expression<Func<TBL_Token, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Token> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Token> _repo;
            
            if(db.TestMode){
                TBL_Token.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Token>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Token> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Token SingleOrDefault(Expression<Func<TBL_Token, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Token single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Token SingleOrDefault(Expression<Func<TBL_Token, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Token single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Token, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Token, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Token> Find(Expression<Func<TBL_Token, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Token> Find(Expression<Func<TBL_Token, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Token> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Token> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Token> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Token> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Token> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Token> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "TokenId";
        }

        public object KeyValue()
        {
            return this.TokenId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.TokenNumber.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Token)){
                TBL_Token compare=(TBL_Token)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.TokenId;
        }
        
        public string DescriptorValue()
        {
                            return this.TokenNumber.ToString();
                    }

        public string DescriptorColumn() {
            return "TokenNumber";
        }
        public static string GetKeyColumn()
        {
            return "TokenId";
        }        
        public static string GetDescriptorColumn()
        {
            return "TokenNumber";
        }
        
        #region ' Foreign Keys '
        public IQueryable<TBL_Appointment> TBL_Appointments
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_Appointment.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppointmentId == _AppointmentId
                       select items;
            }
        }

        #endregion
        

        int _TokenId;
        public int TokenId
        {
            get { return _TokenId; }
            set
            {
                if(_TokenId!=value){
                    _TokenId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TokenId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _TokenNumber;
        public string TokenNumber
        {
            get { return _TokenNumber; }
            set
            {
                if(_TokenNumber!=value){
                    _TokenNumber=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TokenNumber");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _TokenSequence;
        public int? TokenSequence
        {
            get { return _TokenSequence; }
            set
            {
                if(_TokenSequence!=value){
                    _TokenSequence=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TokenSequence");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _AppointmentId;
        public int? AppointmentId
        {
            get { return _AppointmentId; }
            set
            {
                if(_AppointmentId!=value){
                    _AppointmentId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AppointmentId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreatedOn;
        public DateTime? CreatedOn
        {
            get { return _CreatedOn; }
            set
            {
                if(_CreatedOn!=value){
                    _CreatedOn=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOn");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsDeleted;
        public bool? IsDeleted
        {
            get { return _IsDeleted; }
            set
            {
                if(_IsDeleted!=value){
                    _IsDeleted=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsDeleted");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            this.CreatedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                         
             this.IsDeleted=true;
            _repo.Update(this,provider);
                
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Token, bool>> expression) {
            var repo = GetRepo();
            
            
            List<TBL_Token> items=repo.GetAll().Where(expression).ToList();
            items.ForEach(x=>x.IsDeleted=true);
            repo.Update(items);
            
        }

                
        public static void Destroy(Func<TBL_Token, bool> expression) {
            var repo = GetRepo();
            repo.Delete(expression);
        }
        
        public static void Destroy(object key) {
            var repo = GetRepo();
            repo.Delete(key);
        }
        
        public static void Destroy(object key, IDataProvider provider) {
        
            var repo = GetRepo();
            repo.Delete(key,provider);
            
        }        
        
        public void Destroy() {
            _repo.Delete(KeyValue());
        }        
        public void Destroy(IDataProvider provider) {
            _repo.Delete(KeyValue(), provider);
        }         
        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Content table in the mobilesitedesigner Database.
    /// </summary>
    public partial class Content: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Content> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Content>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Content> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Content item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Content item=new Content();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Content> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public Content(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Content.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Content>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Content(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Content(Expression<Func<Content, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Content> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<Content> _repo;
            
            if(db.TestMode){
                Content.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Content>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Content> GetRepo(){
            return GetRepo("","");
        }
        
        public static Content SingleOrDefault(Expression<Func<Content, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Content single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Content SingleOrDefault(Expression<Func<Content, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Content single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Content, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Content, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Content> Find(Expression<Func<Content, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Content> Find(Expression<Func<Content, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Content> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Content> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Content> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Content> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Content> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Content> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Title.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Content)){
                Content compare=(Content)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.ID;
        }
        
        public string DescriptorValue()
        {
                            return this.Title.ToString();
                    }

        public string DescriptorColumn() {
            return "Title";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "Title";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Page> Pages
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.Page.GetRepo();
                  return from items in repo.GetAll()
                       where items.ID == _PageID
                       select items;
            }
        }

        #endregion
        

        int _ID;
        public int ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Title;
        public string Title
        {
            get { return _Title; }
            set
            {
                if(_Title!=value){
                    _Title=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Title");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ImageUrl;
        public string ImageUrl
        {
            get { return _ImageUrl; }
            set
            {
                if(_ImageUrl!=value){
                    _ImageUrl=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ImageUrl");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Text;
        public string Text
        {
            get { return _Text; }
            set
            {
                if(_Text!=value){
                    _Text=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Text");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _PageID;
        public int? PageID
        {
            get { return _PageID; }
            set
            {
                if(_PageID!=value){
                    _PageID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PageID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<Content, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Page table in the mobilesitedesigner Database.
    /// </summary>
    public partial class Page: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Page> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Page>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Page> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Page item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Page item=new Page();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Page> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public Page(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Page.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Page>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Page(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Page(Expression<Func<Page, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Page> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<Page> _repo;
            
            if(db.TestMode){
                Page.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Page>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Page> GetRepo(){
            return GetRepo("","");
        }
        
        public static Page SingleOrDefault(Expression<Func<Page, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Page single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Page SingleOrDefault(Expression<Func<Page, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Page single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Page, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Page, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Page> Find(Expression<Func<Page, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Page> Find(Expression<Func<Page, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Page> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Page> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Page> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Page> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Page> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Page> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Location.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Page)){
                Page compare=(Page)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.ID;
        }
        
        public string DescriptorValue()
        {
                            return this.Location.ToString();
                    }

        public string DescriptorColumn() {
            return "Location";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "Location";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Content> Contents
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.Content.GetRepo();
                  return from items in repo.GetAll()
                       where items.PageID == _ID
                       select items;
            }
        }

        #endregion
        

        int _ID;
        public int ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Location;
        public string Location
        {
            get { return _Location; }
            set
            {
                if(_Location!=value){
                    _Location=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Location");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _HeaderImage;
        public string HeaderImage
        {
            get { return _HeaderImage; }
            set
            {
                if(_HeaderImage!=value){
                    _HeaderImage=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="HeaderImage");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _FooterImage;
        public string FooterImage
        {
            get { return _FooterImage; }
            set
            {
                if(_FooterImage!=value){
                    _FooterImage=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FooterImage");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _HeaderText;
        public string HeaderText
        {
            get { return _HeaderText; }
            set
            {
                if(_HeaderText!=value){
                    _HeaderText=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="HeaderText");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _FooterText;
        public string FooterText
        {
            get { return _FooterText; }
            set
            {
                if(_FooterText!=value){
                    _FooterText=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FooterText");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _PageImage;
        public string PageImage
        {
            get { return _PageImage; }
            set
            {
                if(_PageImage!=value){
                    _PageImage=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PageImage");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _MainSite;
        public string MainSite
        {
            get { return _MainSite; }
            set
            {
                if(_MainSite!=value){
                    _MainSite=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MainSite");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<Page, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_GupShup_FailureReason table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_GupShup_FailureReason: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_GupShup_FailureReason> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_GupShup_FailureReason>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_GupShup_FailureReason> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_GupShup_FailureReason item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_GupShup_FailureReason item=new TBL_GupShup_FailureReason();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_GupShup_FailureReason> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_GupShup_FailureReason(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_GupShup_FailureReason.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_GupShup_FailureReason>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_GupShup_FailureReason(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_GupShup_FailureReason(Expression<Func<TBL_GupShup_FailureReason, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_GupShup_FailureReason> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_GupShup_FailureReason> _repo;
            
            if(db.TestMode){
                TBL_GupShup_FailureReason.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_GupShup_FailureReason>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_GupShup_FailureReason> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_GupShup_FailureReason SingleOrDefault(Expression<Func<TBL_GupShup_FailureReason, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_GupShup_FailureReason single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_GupShup_FailureReason SingleOrDefault(Expression<Func<TBL_GupShup_FailureReason, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_GupShup_FailureReason single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_GupShup_FailureReason, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_GupShup_FailureReason, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_GupShup_FailureReason> Find(Expression<Func<TBL_GupShup_FailureReason, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_GupShup_FailureReason> Find(Expression<Func<TBL_GupShup_FailureReason, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_GupShup_FailureReason> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_GupShup_FailureReason> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_GupShup_FailureReason> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_GupShup_FailureReason> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_GupShup_FailureReason> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_GupShup_FailureReason> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.KeyWord.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_GupShup_FailureReason)){
                TBL_GupShup_FailureReason compare=(TBL_GupShup_FailureReason)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.KeyWord.ToString();
                    }

        public string DescriptorColumn() {
            return "KeyWord";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "KeyWord";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _KeyWord;
        public string KeyWord
        {
            get { return _KeyWord; }
            set
            {
                if(_KeyWord!=value){
                    _KeyWord=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="KeyWord");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Description;
        public string Description
        {
            get { return _Description; }
            set
            {
                if(_Description!=value){
                    _Description=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Description");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_GupShup_FailureReason, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_Master_Banner table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Master_Banner: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Master_Banner> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Master_Banner>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Master_Banner> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Master_Banner item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Master_Banner item=new TBL_Master_Banner();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Master_Banner> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Master_Banner(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Master_Banner.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Master_Banner>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Master_Banner(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Master_Banner(Expression<Func<TBL_Master_Banner, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Master_Banner> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Master_Banner> _repo;
            
            if(db.TestMode){
                TBL_Master_Banner.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Master_Banner>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Master_Banner> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Master_Banner SingleOrDefault(Expression<Func<TBL_Master_Banner, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Master_Banner single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Master_Banner SingleOrDefault(Expression<Func<TBL_Master_Banner, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Master_Banner single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Master_Banner, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Master_Banner, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Master_Banner> Find(Expression<Func<TBL_Master_Banner, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Master_Banner> Find(Expression<Func<TBL_Master_Banner, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Master_Banner> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Master_Banner> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Master_Banner> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Master_Banner> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Master_Banner> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Master_Banner> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "BannerId";
        }

        public object KeyValue()
        {
            return this.BannerId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.BannerFilename.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Master_Banner)){
                TBL_Master_Banner compare=(TBL_Master_Banner)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.BannerId;
        }
        
        public string DescriptorValue()
        {
                            return this.BannerFilename.ToString();
                    }

        public string DescriptorColumn() {
            return "BannerFilename";
        }
        public static string GetKeyColumn()
        {
            return "BannerId";
        }        
        public static string GetDescriptorColumn()
        {
            return "BannerFilename";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _BannerId;
        public int BannerId
        {
            get { return _BannerId; }
            set
            {
                if(_BannerId!=value){
                    _BannerId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BannerId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _DepartmentId;
        public int? DepartmentId
        {
            get { return _DepartmentId; }
            set
            {
                if(_DepartmentId!=value){
                    _DepartmentId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DepartmentId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _BannerFilename;
        public string BannerFilename
        {
            get { return _BannerFilename; }
            set
            {
                if(_BannerFilename!=value){
                    _BannerFilename=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BannerFilename");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Master_Banner, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_Landing table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Landing: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Landing> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Landing>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Landing> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Landing item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Landing item=new TBL_Landing();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Landing> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Landing(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Landing.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Landing>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Landing(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Landing(Expression<Func<TBL_Landing, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Landing> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Landing> _repo;
            
            if(db.TestMode){
                TBL_Landing.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Landing>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Landing> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Landing SingleOrDefault(Expression<Func<TBL_Landing, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Landing single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Landing SingleOrDefault(Expression<Func<TBL_Landing, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Landing single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Landing, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Landing, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Landing> Find(Expression<Func<TBL_Landing, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Landing> Find(Expression<Func<TBL_Landing, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Landing> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Landing> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Landing> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Landing> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Landing> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Landing> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "LandingId";
        }

        public object KeyValue()
        {
            return this.LandingId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.BannerPath.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Landing)){
                TBL_Landing compare=(TBL_Landing)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.LandingId;
        }
        
        public string DescriptorValue()
        {
                            return this.BannerPath.ToString();
                    }

        public string DescriptorColumn() {
            return "BannerPath";
        }
        public static string GetKeyColumn()
        {
            return "LandingId";
        }        
        public static string GetDescriptorColumn()
        {
            return "BannerPath";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _LandingId;
        public int LandingId
        {
            get { return _LandingId; }
            set
            {
                if(_LandingId!=value){
                    _LandingId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LandingId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _Version;
        public int? Version
        {
            get { return _Version; }
            set
            {
                if(_Version!=value){
                    _Version=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Version");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _PublishId;
        public int? PublishId
        {
            get { return _PublishId; }
            set
            {
                if(_PublishId!=value){
                    _PublishId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PublishId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _BannerPath;
        public string BannerPath
        {
            get { return _BannerPath; }
            set
            {
                if(_BannerPath!=value){
                    _BannerPath=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BannerPath");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _DepartmentId;
        public int? DepartmentId
        {
            get { return _DepartmentId; }
            set
            {
                if(_DepartmentId!=value){
                    _DepartmentId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DepartmentId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Forms;
        public string Forms
        {
            get { return _Forms; }
            set
            {
                if(_Forms!=value){
                    _Forms=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Forms");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreatedOn;
        public DateTime? CreatedOn
        {
            get { return _CreatedOn; }
            set
            {
                if(_CreatedOn!=value){
                    _CreatedOn=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOn");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _ModifiedOn;
        public DateTime? ModifiedOn
        {
            get { return _ModifiedOn; }
            set
            {
                if(_ModifiedOn!=value){
                    _ModifiedOn=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ModifiedOn");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if (!_dirtyColumns.Any(x => x.Name.ToLower() == "modifiedon")) {
               this.ModifiedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            }            
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            this.ModifiedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            this.CreatedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            this.ModifiedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Landing, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_Doctor_Education table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Doctor_Education: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Doctor_Education> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Doctor_Education>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Doctor_Education> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Doctor_Education item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Doctor_Education item=new TBL_Doctor_Education();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Doctor_Education> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Doctor_Education(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Doctor_Education.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Doctor_Education>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Doctor_Education(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Doctor_Education(Expression<Func<TBL_Doctor_Education, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Doctor_Education> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Doctor_Education> _repo;
            
            if(db.TestMode){
                TBL_Doctor_Education.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Doctor_Education>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Doctor_Education> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Doctor_Education SingleOrDefault(Expression<Func<TBL_Doctor_Education, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Doctor_Education single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Doctor_Education SingleOrDefault(Expression<Func<TBL_Doctor_Education, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Doctor_Education single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Doctor_Education, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Doctor_Education, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Doctor_Education> Find(Expression<Func<TBL_Doctor_Education, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Doctor_Education> Find(Expression<Func<TBL_Doctor_Education, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Doctor_Education> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Doctor_Education> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Doctor_Education> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Doctor_Education> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Doctor_Education> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Doctor_Education> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "EducationId";
        }

        public object KeyValue()
        {
            return this.EducationId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.University.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Doctor_Education)){
                TBL_Doctor_Education compare=(TBL_Doctor_Education)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.EducationId;
        }
        
        public string DescriptorValue()
        {
                            return this.University.ToString();
                    }

        public string DescriptorColumn() {
            return "University";
        }
        public static string GetKeyColumn()
        {
            return "EducationId";
        }        
        public static string GetDescriptorColumn()
        {
            return "University";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _EducationId;
        public int EducationId
        {
            get { return _EducationId; }
            set
            {
                if(_EducationId!=value){
                    _EducationId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EducationId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _University;
        public string University
        {
            get { return _University; }
            set
            {
                if(_University!=value){
                    _University=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="University");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Degree;
        public string Degree
        {
            get { return _Degree; }
            set
            {
                if(_Degree!=value){
                    _Degree=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Degree");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _CountryId;
        public int? CountryId
        {
            get { return _CountryId; }
            set
            {
                if(_CountryId!=value){
                    _CountryId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CountryId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _StateId;
        public int? StateId
        {
            get { return _StateId; }
            set
            {
                if(_StateId!=value){
                    _StateId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StateId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _CityId;
        public int? CityId
        {
            get { return _CityId; }
            set
            {
                if(_CityId!=value){
                    _CityId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CityId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _YearFrom;
        public int? YearFrom
        {
            get { return _YearFrom; }
            set
            {
                if(_YearFrom!=value){
                    _YearFrom=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="YearFrom");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _YearTo;
        public int? YearTo
        {
            get { return _YearTo; }
            set
            {
                if(_YearTo!=value){
                    _YearTo=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="YearTo");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Notes;
        public string Notes
        {
            get { return _Notes; }
            set
            {
                if(_Notes!=value){
                    _Notes=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Notes");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _DoctorId;
        public int? DoctorId
        {
            get { return _DoctorId; }
            set
            {
                if(_DoctorId!=value){
                    _DoctorId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DoctorId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Doctor_Education, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_Master_University table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Master_University: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Master_University> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Master_University>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Master_University> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Master_University item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Master_University item=new TBL_Master_University();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Master_University> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Master_University(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Master_University.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Master_University>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Master_University(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Master_University(Expression<Func<TBL_Master_University, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Master_University> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Master_University> _repo;
            
            if(db.TestMode){
                TBL_Master_University.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Master_University>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Master_University> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Master_University SingleOrDefault(Expression<Func<TBL_Master_University, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Master_University single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Master_University SingleOrDefault(Expression<Func<TBL_Master_University, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Master_University single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Master_University, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Master_University, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Master_University> Find(Expression<Func<TBL_Master_University, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Master_University> Find(Expression<Func<TBL_Master_University, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Master_University> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Master_University> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Master_University> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Master_University> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Master_University> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Master_University> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "UniversityId";
        }

        public object KeyValue()
        {
            return this.UniversityId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.UniversityName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Master_University)){
                TBL_Master_University compare=(TBL_Master_University)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.UniversityId;
        }
        
        public string DescriptorValue()
        {
                            return this.UniversityName.ToString();
                    }

        public string DescriptorColumn() {
            return "UniversityName";
        }
        public static string GetKeyColumn()
        {
            return "UniversityId";
        }        
        public static string GetDescriptorColumn()
        {
            return "UniversityName";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _UniversityId;
        public int UniversityId
        {
            get { return _UniversityId; }
            set
            {
                if(_UniversityId!=value){
                    _UniversityId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UniversityId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _UniversityName;
        public string UniversityName
        {
            get { return _UniversityName; }
            set
            {
                if(_UniversityName!=value){
                    _UniversityName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UniversityName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _CountryId;
        public int? CountryId
        {
            get { return _CountryId; }
            set
            {
                if(_CountryId!=value){
                    _CountryId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CountryId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Master_University, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_Landing_Publish table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Landing_Publish: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Landing_Publish> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Landing_Publish>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Landing_Publish> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Landing_Publish item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Landing_Publish item=new TBL_Landing_Publish();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Landing_Publish> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Landing_Publish(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Landing_Publish.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Landing_Publish>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Landing_Publish(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Landing_Publish(Expression<Func<TBL_Landing_Publish, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Landing_Publish> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Landing_Publish> _repo;
            
            if(db.TestMode){
                TBL_Landing_Publish.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Landing_Publish>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Landing_Publish> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Landing_Publish SingleOrDefault(Expression<Func<TBL_Landing_Publish, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Landing_Publish single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Landing_Publish SingleOrDefault(Expression<Func<TBL_Landing_Publish, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Landing_Publish single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Landing_Publish, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Landing_Publish, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Landing_Publish> Find(Expression<Func<TBL_Landing_Publish, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Landing_Publish> Find(Expression<Func<TBL_Landing_Publish, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Landing_Publish> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Landing_Publish> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Landing_Publish> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Landing_Publish> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Landing_Publish> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Landing_Publish> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "PublishId";
        }

        public object KeyValue()
        {
            return this.PublishId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.AccountId.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Landing_Publish)){
                TBL_Landing_Publish compare=(TBL_Landing_Publish)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.PublishId;
        }
        
        public string DescriptorValue()
        {
                            return this.AccountId.ToString();
                    }

        public string DescriptorColumn() {
            return "AccountId";
        }
        public static string GetKeyColumn()
        {
            return "PublishId";
        }        
        public static string GetDescriptorColumn()
        {
            return "AccountId";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _PublishId;
        public int PublishId
        {
            get { return _PublishId; }
            set
            {
                if(_PublishId!=value){
                    _PublishId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PublishId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _AccountId;
        public int? AccountId
        {
            get { return _AccountId; }
            set
            {
                if(_AccountId!=value){
                    _AccountId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AccountId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _AccountTypeId;
        public int? AccountTypeId
        {
            get { return _AccountTypeId; }
            set
            {
                if(_AccountTypeId!=value){
                    _AccountTypeId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AccountTypeId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _BannerId;
        public int? BannerId
        {
            get { return _BannerId; }
            set
            {
                if(_BannerId!=value){
                    _BannerId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BannerId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _DefaultVersion;
        public int? DefaultVersion
        {
            get { return _DefaultVersion; }
            set
            {
                if(_DefaultVersion!=value){
                    _DefaultVersion=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DefaultVersion");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Landing_Publish, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_Admin_LoginType table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Admin_LoginType: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Admin_LoginType> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Admin_LoginType>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Admin_LoginType> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Admin_LoginType item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Admin_LoginType item=new TBL_Admin_LoginType();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Admin_LoginType> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Admin_LoginType(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Admin_LoginType.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Admin_LoginType>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Admin_LoginType(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Admin_LoginType(Expression<Func<TBL_Admin_LoginType, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Admin_LoginType> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Admin_LoginType> _repo;
            
            if(db.TestMode){
                TBL_Admin_LoginType.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Admin_LoginType>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Admin_LoginType> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Admin_LoginType SingleOrDefault(Expression<Func<TBL_Admin_LoginType, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Admin_LoginType single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Admin_LoginType SingleOrDefault(Expression<Func<TBL_Admin_LoginType, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Admin_LoginType single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Admin_LoginType, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Admin_LoginType, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Admin_LoginType> Find(Expression<Func<TBL_Admin_LoginType, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Admin_LoginType> Find(Expression<Func<TBL_Admin_LoginType, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Admin_LoginType> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Admin_LoginType> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Admin_LoginType> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Admin_LoginType> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Admin_LoginType> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Admin_LoginType> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "LoginTypeId";
        }

        public object KeyValue()
        {
            return this.LoginTypeId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.LoginType.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Admin_LoginType)){
                TBL_Admin_LoginType compare=(TBL_Admin_LoginType)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.LoginTypeId;
        }
        
        public string DescriptorValue()
        {
                            return this.LoginType.ToString();
                    }

        public string DescriptorColumn() {
            return "LoginType";
        }
        public static string GetKeyColumn()
        {
            return "LoginTypeId";
        }        
        public static string GetDescriptorColumn()
        {
            return "LoginType";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _LoginTypeId;
        public int LoginTypeId
        {
            get { return _LoginTypeId; }
            set
            {
                if(_LoginTypeId!=value){
                    _LoginTypeId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LoginTypeId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _LoginType;
        public string LoginType
        {
            get { return _LoginType; }
            set
            {
                if(_LoginType!=value){
                    _LoginType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LoginType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Admin_LoginType, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_Doctor table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Doctor: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Doctor> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Doctor>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Doctor> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Doctor item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Doctor item=new TBL_Doctor();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Doctor> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Doctor(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Doctor.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Doctor>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Doctor(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Doctor(Expression<Func<TBL_Doctor, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Doctor> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Doctor> _repo;
            
            if(db.TestMode){
                TBL_Doctor.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Doctor>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Doctor> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Doctor SingleOrDefault(Expression<Func<TBL_Doctor, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Doctor single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Doctor SingleOrDefault(Expression<Func<TBL_Doctor, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Doctor single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Doctor, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Doctor, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Doctor> Find(Expression<Func<TBL_Doctor, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Doctor> Find(Expression<Func<TBL_Doctor, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Doctor> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Doctor> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Doctor> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Doctor> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Doctor> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Doctor> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "DoctorId";
        }

        public object KeyValue()
        {
            return this.DoctorId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.DoctorName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Doctor)){
                TBL_Doctor compare=(TBL_Doctor)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.DoctorId;
        }
        
        public string DescriptorValue()
        {
                            return this.DoctorName.ToString();
                    }

        public string DescriptorColumn() {
            return "DoctorName";
        }
        public static string GetKeyColumn()
        {
            return "DoctorId";
        }        
        public static string GetDescriptorColumn()
        {
            return "DoctorName";
        }
        
        #region ' Foreign Keys '
        public IQueryable<TBL_Answer> TBL_Answers
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_Answer.GetRepo();
                  return from items in repo.GetAll()
                       where items.DoctorId == _DoctorId
                       select items;
            }
        }

        public IQueryable<TBL_Appointment> TBL_Appointments
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_Appointment.GetRepo();
                  return from items in repo.GetAll()
                       where items.DoctorId == _DoctorId
                       select items;
            }
        }

        public IQueryable<TBL_Login> TBL_Logins
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_Login.GetRepo();
                  return from items in repo.GetAll()
                       where items.LoginId == _LoginId
                       select items;
            }
        }

        public IQueryable<TBL_Master_Department> TBL_Master_Departments
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_Master_Department.GetRepo();
                  return from items in repo.GetAll()
                       where items.DepartmentId == _DepartmentId
                       select items;
            }
        }

        public IQueryable<TBL_Doctor_Timing> TBL_Doctor_Timings
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_Doctor_Timing.GetRepo();
                  return from items in repo.GetAll()
                       where items.DoctorId == _DoctorId
                       select items;
            }
        }

        public IQueryable<TBL_Reference> TBL_References
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_Reference.GetRepo();
                  return from items in repo.GetAll()
                       where items.ReferedBy == _DoctorId
                       select items;
            }
        }

        public IQueryable<TBL_Reference> TBL_References6
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_Reference.GetRepo();
                  return from items in repo.GetAll()
                       where items.ReferedTo == _DoctorId
                       select items;
            }
        }

        #endregion
        

        int _DoctorId;
        public int DoctorId
        {
            get { return _DoctorId; }
            set
            {
                if(_DoctorId!=value){
                    _DoctorId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DoctorId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _LoginId;
        public int? LoginId
        {
            get { return _LoginId; }
            set
            {
                if(_LoginId!=value){
                    _LoginId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LoginId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _OrganizationId;
        public int? OrganizationId
        {
            get { return _OrganizationId; }
            set
            {
                if(_OrganizationId!=value){
                    _OrganizationId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrganizationId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DoctorName;
        public string DoctorName
        {
            get { return _DoctorName; }
            set
            {
                if(_DoctorName!=value){
                    _DoctorName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DoctorName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _DateofBirth;
        public DateTime? DateofBirth
        {
            get { return _DateofBirth; }
            set
            {
                if(_DateofBirth!=value){
                    _DateofBirth=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DateofBirth");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _Gender;
        public bool? Gender
        {
            get { return _Gender; }
            set
            {
                if(_Gender!=value){
                    _Gender=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Gender");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _RegistrationYear;
        public int? RegistrationYear
        {
            get { return _RegistrationYear; }
            set
            {
                if(_RegistrationYear!=value){
                    _RegistrationYear=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RegistrationYear");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _RegistrationNumber;
        public string RegistrationNumber
        {
            get { return _RegistrationNumber; }
            set
            {
                if(_RegistrationNumber!=value){
                    _RegistrationNumber=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RegistrationNumber");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal? _Experience;
        public decimal? Experience
        {
            get { return _Experience; }
            set
            {
                if(_Experience!=value){
                    _Experience=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Experience");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Degrees;
        public string Degrees
        {
            get { return _Degrees; }
            set
            {
                if(_Degrees!=value){
                    _Degrees=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Degrees");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Certifications;
        public string Certifications
        {
            get { return _Certifications; }
            set
            {
                if(_Certifications!=value){
                    _Certifications=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Certifications");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _PhotoName;
        public string PhotoName
        {
            get { return _PhotoName; }
            set
            {
                if(_PhotoName!=value){
                    _PhotoName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PhotoName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Mobile;
        public string Mobile
        {
            get { return _Mobile; }
            set
            {
                if(_Mobile!=value){
                    _Mobile=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Mobile");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _DepartmentId;
        public int? DepartmentId
        {
            get { return _DepartmentId; }
            set
            {
                if(_DepartmentId!=value){
                    _DepartmentId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DepartmentId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _PreferredName;
        public string PreferredName
        {
            get { return _PreferredName; }
            set
            {
                if(_PreferredName!=value){
                    _PreferredName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PreferredName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreatedOn;
        public DateTime? CreatedOn
        {
            get { return _CreatedOn; }
            set
            {
                if(_CreatedOn!=value){
                    _CreatedOn=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOn");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _ModifiedOn;
        public DateTime? ModifiedOn
        {
            get { return _ModifiedOn; }
            set
            {
                if(_ModifiedOn!=value){
                    _ModifiedOn=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ModifiedOn");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ReferenceToken;
        public string ReferenceToken
        {
            get { return _ReferenceToken; }
            set
            {
                if(_ReferenceToken!=value){
                    _ReferenceToken=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ReferenceToken");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsActivated;
        public bool? IsActivated
        {
            get { return _IsActivated; }
            set
            {
                if(_IsActivated!=value){
                    _IsActivated=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsActivated");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsDeleted;
        public bool? IsDeleted
        {
            get { return _IsDeleted; }
            set
            {
                if(_IsDeleted!=value){
                    _IsDeleted=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsDeleted");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _UniversityId;
        public int? UniversityId
        {
            get { return _UniversityId; }
            set
            {
                if(_UniversityId!=value){
                    _UniversityId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UniversityId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if (!_dirtyColumns.Any(x => x.Name.ToLower() == "modifiedon")) {
               this.ModifiedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            }            
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            this.ModifiedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            this.CreatedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            this.ModifiedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                         
             this.IsDeleted=true;
            _repo.Update(this,provider);
                
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Doctor, bool>> expression) {
            var repo = GetRepo();
            
            
            List<TBL_Doctor> items=repo.GetAll().Where(expression).ToList();
            items.ForEach(x=>x.IsDeleted=true);
            repo.Update(items);
            
        }

                
        public static void Destroy(Func<TBL_Doctor, bool> expression) {
            var repo = GetRepo();
            repo.Delete(expression);
        }
        
        public static void Destroy(object key) {
            var repo = GetRepo();
            repo.Delete(key);
        }
        
        public static void Destroy(object key, IDataProvider provider) {
        
            var repo = GetRepo();
            repo.Delete(key,provider);
            
        }        
        
        public void Destroy() {
            _repo.Delete(KeyValue());
        }        
        public void Destroy(IDataProvider provider) {
            _repo.Delete(KeyValue(), provider);
        }         
        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_Landing_VideoGallery table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Landing_VideoGallery: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Landing_VideoGallery> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Landing_VideoGallery>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Landing_VideoGallery> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Landing_VideoGallery item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Landing_VideoGallery item=new TBL_Landing_VideoGallery();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Landing_VideoGallery> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Landing_VideoGallery(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Landing_VideoGallery.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Landing_VideoGallery>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Landing_VideoGallery(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Landing_VideoGallery(Expression<Func<TBL_Landing_VideoGallery, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Landing_VideoGallery> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Landing_VideoGallery> _repo;
            
            if(db.TestMode){
                TBL_Landing_VideoGallery.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Landing_VideoGallery>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Landing_VideoGallery> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Landing_VideoGallery SingleOrDefault(Expression<Func<TBL_Landing_VideoGallery, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Landing_VideoGallery single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Landing_VideoGallery SingleOrDefault(Expression<Func<TBL_Landing_VideoGallery, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Landing_VideoGallery single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Landing_VideoGallery, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Landing_VideoGallery, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Landing_VideoGallery> Find(Expression<Func<TBL_Landing_VideoGallery, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Landing_VideoGallery> Find(Expression<Func<TBL_Landing_VideoGallery, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Landing_VideoGallery> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Landing_VideoGallery> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Landing_VideoGallery> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Landing_VideoGallery> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Landing_VideoGallery> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Landing_VideoGallery> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "AccountId";
        }

        public object KeyValue()
        {
            return this.AccountId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.VideoContent.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Landing_VideoGallery)){
                TBL_Landing_VideoGallery compare=(TBL_Landing_VideoGallery)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.AccountId;
        }
        
        public string DescriptorValue()
        {
                            return this.VideoContent.ToString();
                    }

        public string DescriptorColumn() {
            return "VideoContent";
        }
        public static string GetKeyColumn()
        {
            return "AccountId";
        }        
        public static string GetDescriptorColumn()
        {
            return "VideoContent";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int? _AccountId;
        public int? AccountId
        {
            get { return _AccountId; }
            set
            {
                if(_AccountId!=value){
                    _AccountId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AccountId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _AccountTypeId;
        public int? AccountTypeId
        {
            get { return _AccountTypeId; }
            set
            {
                if(_AccountTypeId!=value){
                    _AccountTypeId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AccountTypeId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _Version;
        public int? Version
        {
            get { return _Version; }
            set
            {
                if(_Version!=value){
                    _Version=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Version");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _VideoContent;
        public string VideoContent
        {
            get { return _VideoContent; }
            set
            {
                if(_VideoContent!=value){
                    _VideoContent=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="VideoContent");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _Selected;
        public bool? Selected
        {
            get { return _Selected; }
            set
            {
                if(_Selected!=value){
                    _Selected=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Selected");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Landing_VideoGallery, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_Master_Bed table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Master_Bed: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Master_Bed> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Master_Bed>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Master_Bed> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Master_Bed item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Master_Bed item=new TBL_Master_Bed();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Master_Bed> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Master_Bed(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Master_Bed.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Master_Bed>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Master_Bed(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Master_Bed(Expression<Func<TBL_Master_Bed, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Master_Bed> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Master_Bed> _repo;
            
            if(db.TestMode){
                TBL_Master_Bed.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Master_Bed>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Master_Bed> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Master_Bed SingleOrDefault(Expression<Func<TBL_Master_Bed, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Master_Bed single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Master_Bed SingleOrDefault(Expression<Func<TBL_Master_Bed, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Master_Bed single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Master_Bed, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Master_Bed, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Master_Bed> Find(Expression<Func<TBL_Master_Bed, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Master_Bed> Find(Expression<Func<TBL_Master_Bed, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Master_Bed> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Master_Bed> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Master_Bed> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Master_Bed> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Master_Bed> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Master_Bed> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Name.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Master_Bed)){
                TBL_Master_Bed compare=(TBL_Master_Bed)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Name.ToString();
                    }

        public string DescriptorColumn() {
            return "Name";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _WardId;
        public int? WardId
        {
            get { return _WardId; }
            set
            {
                if(_WardId!=value){
                    _WardId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="WardId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _FloorId;
        public int? FloorId
        {
            get { return _FloorId; }
            set
            {
                if(_FloorId!=value){
                    _FloorId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FloorId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsDeleted;
        public bool? IsDeleted
        {
            get { return _IsDeleted; }
            set
            {
                if(_IsDeleted!=value){
                    _IsDeleted=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsDeleted");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreatedOn;
        public DateTime? CreatedOn
        {
            get { return _CreatedOn; }
            set
            {
                if(_CreatedOn!=value){
                    _CreatedOn=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOn");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _ModifiedOn;
        public DateTime? ModifiedOn
        {
            get { return _ModifiedOn; }
            set
            {
                if(_ModifiedOn!=value){
                    _ModifiedOn=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ModifiedOn");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _BuildingId;
        public int? BuildingId
        {
            get { return _BuildingId; }
            set
            {
                if(_BuildingId!=value){
                    _BuildingId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BuildingId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if (!_dirtyColumns.Any(x => x.Name.ToLower() == "modifiedon")) {
               this.ModifiedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            }            
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            this.ModifiedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            this.CreatedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            this.ModifiedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                         
             this.IsDeleted=true;
            _repo.Update(this,provider);
                
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Master_Bed, bool>> expression) {
            var repo = GetRepo();
            
            
            List<TBL_Master_Bed> items=repo.GetAll().Where(expression).ToList();
            items.ForEach(x=>x.IsDeleted=true);
            repo.Update(items);
            
        }

                
        public static void Destroy(Func<TBL_Master_Bed, bool> expression) {
            var repo = GetRepo();
            repo.Delete(expression);
        }
        
        public static void Destroy(object key) {
            var repo = GetRepo();
            repo.Delete(key);
        }
        
        public static void Destroy(object key, IDataProvider provider) {
        
            var repo = GetRepo();
            repo.Delete(key,provider);
            
        }        
        
        public void Destroy() {
            _repo.Delete(KeyValue());
        }        
        public void Destroy(IDataProvider provider) {
            _repo.Delete(KeyValue(), provider);
        }         
        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_Master_SubAccountType table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Master_SubAccountType: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Master_SubAccountType> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Master_SubAccountType>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Master_SubAccountType> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Master_SubAccountType item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Master_SubAccountType item=new TBL_Master_SubAccountType();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Master_SubAccountType> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Master_SubAccountType(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Master_SubAccountType.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Master_SubAccountType>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Master_SubAccountType(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Master_SubAccountType(Expression<Func<TBL_Master_SubAccountType, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Master_SubAccountType> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Master_SubAccountType> _repo;
            
            if(db.TestMode){
                TBL_Master_SubAccountType.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Master_SubAccountType>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Master_SubAccountType> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Master_SubAccountType SingleOrDefault(Expression<Func<TBL_Master_SubAccountType, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Master_SubAccountType single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Master_SubAccountType SingleOrDefault(Expression<Func<TBL_Master_SubAccountType, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Master_SubAccountType single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Master_SubAccountType, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Master_SubAccountType, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Master_SubAccountType> Find(Expression<Func<TBL_Master_SubAccountType, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Master_SubAccountType> Find(Expression<Func<TBL_Master_SubAccountType, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Master_SubAccountType> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Master_SubAccountType> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Master_SubAccountType> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Master_SubAccountType> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Master_SubAccountType> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Master_SubAccountType> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "SubAccountType";
        }

        public object KeyValue()
        {
            return this.SubAccountType;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.SubAccountName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Master_SubAccountType)){
                TBL_Master_SubAccountType compare=(TBL_Master_SubAccountType)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.SubAccountType;
        }
        
        public string DescriptorValue()
        {
                            return this.SubAccountName.ToString();
                    }

        public string DescriptorColumn() {
            return "SubAccountName";
        }
        public static string GetKeyColumn()
        {
            return "SubAccountType";
        }        
        public static string GetDescriptorColumn()
        {
            return "SubAccountName";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _SubAccountType;
        public int SubAccountType
        {
            get { return _SubAccountType; }
            set
            {
                if(_SubAccountType!=value){
                    _SubAccountType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SubAccountType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _SubAccountName;
        public string SubAccountName
        {
            get { return _SubAccountName; }
            set
            {
                if(_SubAccountName!=value){
                    _SubAccountName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SubAccountName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _AccountTypeId;
        public int? AccountTypeId
        {
            get { return _AccountTypeId; }
            set
            {
                if(_AccountTypeId!=value){
                    _AccountTypeId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AccountTypeId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreatedOn;
        public DateTime? CreatedOn
        {
            get { return _CreatedOn; }
            set
            {
                if(_CreatedOn!=value){
                    _CreatedOn=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOn");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsDeleted;
        public bool? IsDeleted
        {
            get { return _IsDeleted; }
            set
            {
                if(_IsDeleted!=value){
                    _IsDeleted=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsDeleted");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            this.CreatedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                         
             this.IsDeleted=true;
            _repo.Update(this,provider);
                
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Master_SubAccountType, bool>> expression) {
            var repo = GetRepo();
            
            
            List<TBL_Master_SubAccountType> items=repo.GetAll().Where(expression).ToList();
            items.ForEach(x=>x.IsDeleted=true);
            repo.Update(items);
            
        }

                
        public static void Destroy(Func<TBL_Master_SubAccountType, bool> expression) {
            var repo = GetRepo();
            repo.Delete(expression);
        }
        
        public static void Destroy(object key) {
            var repo = GetRepo();
            repo.Delete(key);
        }
        
        public static void Destroy(object key, IDataProvider provider) {
        
            var repo = GetRepo();
            repo.Delete(key,provider);
            
        }        
        
        public void Destroy() {
            _repo.Delete(KeyValue());
        }        
        public void Destroy(IDataProvider provider) {
            _repo.Delete(KeyValue(), provider);
        }         
        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_ActivationSMSCount table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_ActivationSMSCount: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_ActivationSMSCount> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_ActivationSMSCount>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_ActivationSMSCount> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_ActivationSMSCount item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_ActivationSMSCount item=new TBL_ActivationSMSCount();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_ActivationSMSCount> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_ActivationSMSCount(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_ActivationSMSCount.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_ActivationSMSCount>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_ActivationSMSCount(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_ActivationSMSCount(Expression<Func<TBL_ActivationSMSCount, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_ActivationSMSCount> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_ActivationSMSCount> _repo;
            
            if(db.TestMode){
                TBL_ActivationSMSCount.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_ActivationSMSCount>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_ActivationSMSCount> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_ActivationSMSCount SingleOrDefault(Expression<Func<TBL_ActivationSMSCount, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_ActivationSMSCount single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_ActivationSMSCount SingleOrDefault(Expression<Func<TBL_ActivationSMSCount, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_ActivationSMSCount single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_ActivationSMSCount, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_ActivationSMSCount, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_ActivationSMSCount> Find(Expression<Func<TBL_ActivationSMSCount, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_ActivationSMSCount> Find(Expression<Func<TBL_ActivationSMSCount, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_ActivationSMSCount> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_ActivationSMSCount> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_ActivationSMSCount> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_ActivationSMSCount> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_ActivationSMSCount> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_ActivationSMSCount> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ID";
        }

        public object KeyValue()
        {
            return this.ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Mobile.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_ActivationSMSCount)){
                TBL_ActivationSMSCount compare=(TBL_ActivationSMSCount)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.ID;
        }
        
        public string DescriptorValue()
        {
                            return this.Mobile.ToString();
                    }

        public string DescriptorColumn() {
            return "Mobile";
        }
        public static string GetKeyColumn()
        {
            return "ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "Mobile";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _ID;
        public int ID
        {
            get { return _ID; }
            set
            {
                if(_ID!=value){
                    _ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Mobile;
        public string Mobile
        {
            get { return _Mobile; }
            set
            {
                if(_Mobile!=value){
                    _Mobile=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Mobile");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _IPAddress;
        public string IPAddress
        {
            get { return _IPAddress; }
            set
            {
                if(_IPAddress!=value){
                    _IPAddress=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IPAddress");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _SMSCount;
        public int? SMSCount
        {
            get { return _SMSCount; }
            set
            {
                if(_SMSCount!=value){
                    _SMSCount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SMSCount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _ModifiedOn;
        public DateTime? ModifiedOn
        {
            get { return _ModifiedOn; }
            set
            {
                if(_ModifiedOn!=value){
                    _ModifiedOn=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ModifiedOn");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreatedOn;
        public DateTime? CreatedOn
        {
            get { return _CreatedOn; }
            set
            {
                if(_CreatedOn!=value){
                    _CreatedOn=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOn");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsVerified;
        public bool? IsVerified
        {
            get { return _IsVerified; }
            set
            {
                if(_IsVerified!=value){
                    _IsVerified=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsVerified");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if (!_dirtyColumns.Any(x => x.Name.ToLower() == "modifiedon")) {
               this.ModifiedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            }            
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            this.ModifiedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            this.CreatedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            this.ModifiedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_ActivationSMSCount, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_Service table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Service: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Service> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Service>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Service> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Service item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Service item=new TBL_Service();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Service> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Service(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Service.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Service>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Service(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Service(Expression<Func<TBL_Service, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Service> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Service> _repo;
            
            if(db.TestMode){
                TBL_Service.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Service>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Service> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Service SingleOrDefault(Expression<Func<TBL_Service, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Service single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Service SingleOrDefault(Expression<Func<TBL_Service, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Service single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Service, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Service, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Service> Find(Expression<Func<TBL_Service, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Service> Find(Expression<Func<TBL_Service, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Service> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Service> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Service> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Service> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Service> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Service> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ServiceId";
        }

        public object KeyValue()
        {
            return this.ServiceId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ServiceName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Service)){
                TBL_Service compare=(TBL_Service)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.ServiceId;
        }
        
        public string DescriptorValue()
        {
                            return this.ServiceName.ToString();
                    }

        public string DescriptorColumn() {
            return "ServiceName";
        }
        public static string GetKeyColumn()
        {
            return "ServiceId";
        }        
        public static string GetDescriptorColumn()
        {
            return "ServiceName";
        }
        
        #region ' Foreign Keys '
        public IQueryable<TBL_Appointment> TBL_Appointments
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_Appointment.GetRepo();
                  return from items in repo.GetAll()
                       where items.ServiceId == _ServiceId
                       select items;
            }
        }

        public IQueryable<TBL_Login> TBL_Logins
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_Login.GetRepo();
                  return from items in repo.GetAll()
                       where items.LoginId == _LoginId
                       select items;
            }
        }

        public IQueryable<TBL_Master_Department> TBL_Master_Departments
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_Master_Department.GetRepo();
                  return from items in repo.GetAll()
                       where items.DepartmentId == _DepartmentId
                       select items;
            }
        }

        public IQueryable<TBL_Service_Timing> TBL_Service_Timings
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_Service_Timing.GetRepo();
                  return from items in repo.GetAll()
                       where items.ServiceId == _ServiceId
                       select items;
            }
        }

        #endregion
        

        int _ServiceId;
        public int ServiceId
        {
            get { return _ServiceId; }
            set
            {
                if(_ServiceId!=value){
                    _ServiceId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ServiceId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _LoginId;
        public int? LoginId
        {
            get { return _LoginId; }
            set
            {
                if(_LoginId!=value){
                    _LoginId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LoginId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _OrganizationId;
        public int? OrganizationId
        {
            get { return _OrganizationId; }
            set
            {
                if(_OrganizationId!=value){
                    _OrganizationId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrganizationId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ServiceName;
        public string ServiceName
        {
            get { return _ServiceName; }
            set
            {
                if(_ServiceName!=value){
                    _ServiceName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ServiceName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _InCharge;
        public string InCharge
        {
            get { return _InCharge; }
            set
            {
                if(_InCharge!=value){
                    _InCharge=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="InCharge");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _DepartmentId;
        public int? DepartmentId
        {
            get { return _DepartmentId; }
            set
            {
                if(_DepartmentId!=value){
                    _DepartmentId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DepartmentId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _Units;
        public int? Units
        {
            get { return _Units; }
            set
            {
                if(_Units!=value){
                    _Units=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Units");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Mobile;
        public string Mobile
        {
            get { return _Mobile; }
            set
            {
                if(_Mobile!=value){
                    _Mobile=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Mobile");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreatedOn;
        public DateTime? CreatedOn
        {
            get { return _CreatedOn; }
            set
            {
                if(_CreatedOn!=value){
                    _CreatedOn=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOn");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _ModifiedOn;
        public DateTime? ModifiedOn
        {
            get { return _ModifiedOn; }
            set
            {
                if(_ModifiedOn!=value){
                    _ModifiedOn=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ModifiedOn");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ReferenceToken;
        public string ReferenceToken
        {
            get { return _ReferenceToken; }
            set
            {
                if(_ReferenceToken!=value){
                    _ReferenceToken=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ReferenceToken");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsActivated;
        public bool? IsActivated
        {
            get { return _IsActivated; }
            set
            {
                if(_IsActivated!=value){
                    _IsActivated=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsActivated");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsDeleted;
        public bool? IsDeleted
        {
            get { return _IsDeleted; }
            set
            {
                if(_IsDeleted!=value){
                    _IsDeleted=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsDeleted");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if (!_dirtyColumns.Any(x => x.Name.ToLower() == "modifiedon")) {
               this.ModifiedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            }            
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            this.ModifiedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            this.CreatedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            this.ModifiedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                         
             this.IsDeleted=true;
            _repo.Update(this,provider);
                
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Service, bool>> expression) {
            var repo = GetRepo();
            
            
            List<TBL_Service> items=repo.GetAll().Where(expression).ToList();
            items.ForEach(x=>x.IsDeleted=true);
            repo.Update(items);
            
        }

                
        public static void Destroy(Func<TBL_Service, bool> expression) {
            var repo = GetRepo();
            repo.Delete(expression);
        }
        
        public static void Destroy(object key) {
            var repo = GetRepo();
            repo.Delete(key);
        }
        
        public static void Destroy(object key, IDataProvider provider) {
        
            var repo = GetRepo();
            repo.Delete(key,provider);
            
        }        
        
        public void Destroy() {
            _repo.Delete(KeyValue());
        }        
        public void Destroy(IDataProvider provider) {
            _repo.Delete(KeyValue(), provider);
        }         
        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TBL_Appointment table in the mobilesitedesigner Database.
    /// </summary>
    public partial class TBL_Appointment: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TBL_Appointment> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TBL_Appointment>(new SubSonic.POCOS.DB.mobilesitedesignerDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TBL_Appointment> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TBL_Appointment item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TBL_Appointment item=new TBL_Appointment();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TBL_Appointment> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        SubSonic.POCOS.DB.mobilesitedesignerDB _db;
        public TBL_Appointment(string connectionString, string providerName) {

            _db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TBL_Appointment.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Appointment>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TBL_Appointment(){
             _db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TBL_Appointment(Expression<Func<TBL_Appointment, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TBL_Appointment> GetRepo(string connectionString, string providerName){
            SubSonic.POCOS.DB.mobilesitedesignerDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB();
            }else{
                db=new SubSonic.POCOS.DB.mobilesitedesignerDB(connectionString, providerName);
            }
            IRepository<TBL_Appointment> _repo;
            
            if(db.TestMode){
                TBL_Appointment.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TBL_Appointment>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TBL_Appointment> GetRepo(){
            return GetRepo("","");
        }
        
        public static TBL_Appointment SingleOrDefault(Expression<Func<TBL_Appointment, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TBL_Appointment single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TBL_Appointment SingleOrDefault(Expression<Func<TBL_Appointment, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TBL_Appointment single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TBL_Appointment, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TBL_Appointment, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TBL_Appointment> Find(Expression<Func<TBL_Appointment, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TBL_Appointment> Find(Expression<Func<TBL_Appointment, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TBL_Appointment> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TBL_Appointment> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TBL_Appointment> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TBL_Appointment> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TBL_Appointment> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TBL_Appointment> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "AppointmentId";
        }

        public object KeyValue()
        {
            return this.AppointmentId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.AppointmentTime.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TBL_Appointment)){
                TBL_Appointment compare=(TBL_Appointment)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.AppointmentId;
        }
        
        public string DescriptorValue()
        {
                            return this.AppointmentTime.ToString();
                    }

        public string DescriptorColumn() {
            return "AppointmentTime";
        }
        public static string GetKeyColumn()
        {
            return "AppointmentId";
        }        
        public static string GetDescriptorColumn()
        {
            return "AppointmentTime";
        }
        
        #region ' Foreign Keys '
        public IQueryable<TBL_Doctor> TBL_Doctors
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_Doctor.GetRepo();
                  return from items in repo.GetAll()
                       where items.DoctorId == _DoctorId
                       select items;
            }
        }

        public IQueryable<TBL_Master_Preferential> TBL_Master_Preferentials
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_Master_Preferential.GetRepo();
                  return from items in repo.GetAll()
                       where items.PreferentialId == _PreferentialId
                       select items;
            }
        }

        public IQueryable<TBL_Master_Status> TBL_Master_Statuses
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_Master_Status.GetRepo();
                  return from items in repo.GetAll()
                       where items.StatusId == _StatusId
                       select items;
            }
        }

        public IQueryable<TBL_Patient> TBL_Patients
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_Patient.GetRepo();
                  return from items in repo.GetAll()
                       where items.PatientId == _PatientId
                       select items;
            }
        }

        public IQueryable<TBL_Service> TBL_Services
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_Service.GetRepo();
                  return from items in repo.GetAll()
                       where items.ServiceId == _ServiceId
                       select items;
            }
        }

        public IQueryable<TBL_Rating> TBL_Ratings
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_Rating.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppointmentId == _AppointmentId
                       select items;
            }
        }

        public IQueryable<TBL_Token> TBL_Tokens
        {
            get
            {
                
                  var repo=SubSonic.POCOS.DB.TBL_Token.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppointmentId == _AppointmentId
                       select items;
            }
        }

        #endregion
        

        int _AppointmentId;
        public int AppointmentId
        {
            get { return _AppointmentId; }
            set
            {
                if(_AppointmentId!=value){
                    _AppointmentId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AppointmentId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _PatientId;
        public int? PatientId
        {
            get { return _PatientId; }
            set
            {
                if(_PatientId!=value){
                    _PatientId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PatientId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _OrganizationId;
        public int? OrganizationId
        {
            get { return _OrganizationId; }
            set
            {
                if(_OrganizationId!=value){
                    _OrganizationId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrganizationId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _ServiceId;
        public int? ServiceId
        {
            get { return _ServiceId; }
            set
            {
                if(_ServiceId!=value){
                    _ServiceId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ServiceId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _ServiceTimingId;
        public int? ServiceTimingId
        {
            get { return _ServiceTimingId; }
            set
            {
                if(_ServiceTimingId!=value){
                    _ServiceTimingId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ServiceTimingId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _DoctorId;
        public int? DoctorId
        {
            get { return _DoctorId; }
            set
            {
                if(_DoctorId!=value){
                    _DoctorId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DoctorId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _DoctorTimingId;
        public int? DoctorTimingId
        {
            get { return _DoctorTimingId; }
            set
            {
                if(_DoctorTimingId!=value){
                    _DoctorTimingId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DoctorTimingId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _AppointmentDate;
        public DateTime? AppointmentDate
        {
            get { return _AppointmentDate; }
            set
            {
                if(_AppointmentDate!=value){
                    _AppointmentDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AppointmentDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _AppointmentTime;
        public string AppointmentTime
        {
            get { return _AppointmentTime; }
            set
            {
                if(_AppointmentTime!=value){
                    _AppointmentTime=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AppointmentTime");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OnCallAppointmentTime;
        public string OnCallAppointmentTime
        {
            get { return _OnCallAppointmentTime; }
            set
            {
                if(_OnCallAppointmentTime!=value){
                    _OnCallAppointmentTime=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OnCallAppointmentTime");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Notes;
        public string Notes
        {
            get { return _Notes; }
            set
            {
                if(_Notes!=value){
                    _Notes=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Notes");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsCarParking;
        public bool? IsCarParking
        {
            get { return _IsCarParking; }
            set
            {
                if(_IsCarParking!=value){
                    _IsCarParking=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsCarParking");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CarNumber;
        public string CarNumber
        {
            get { return _CarNumber; }
            set
            {
                if(_CarNumber!=value){
                    _CarNumber=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CarNumber");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _PreferentialId;
        public int? PreferentialId
        {
            get { return _PreferentialId; }
            set
            {
                if(_PreferentialId!=value){
                    _PreferentialId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PreferentialId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _PreferentialBoarding;
        public string PreferentialBoarding
        {
            get { return _PreferentialBoarding; }
            set
            {
                if(_PreferentialBoarding!=value){
                    _PreferentialBoarding=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PreferentialBoarding");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DoctorClosingNotes;
        public string DoctorClosingNotes
        {
            get { return _DoctorClosingNotes; }
            set
            {
                if(_DoctorClosingNotes!=value){
                    _DoctorClosingNotes=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DoctorClosingNotes");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _StatusId;
        public int? StatusId
        {
            get { return _StatusId; }
            set
            {
                if(_StatusId!=value){
                    _StatusId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StatusId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsDirectAppointment;
        public bool? IsDirectAppointment
        {
            get { return _IsDirectAppointment; }
            set
            {
                if(_IsDirectAppointment!=value){
                    _IsDirectAppointment=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsDirectAppointment");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreatedOn;
        public DateTime? CreatedOn
        {
            get { return _CreatedOn; }
            set
            {
                if(_CreatedOn!=value){
                    _CreatedOn=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOn");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _ModifiedOn;
        public DateTime? ModifiedOn
        {
            get { return _ModifiedOn; }
            set
            {
                if(_ModifiedOn!=value){
                    _ModifiedOn=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ModifiedOn");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsDeleted;
        public bool? IsDeleted
        {
            get { return _IsDeleted; }
            set
            {
                if(_IsDeleted!=value){
                    _IsDeleted=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsDeleted");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if (!_dirtyColumns.Any(x => x.Name.ToLower() == "modifiedon")) {
               this.ModifiedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            }            
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            this.ModifiedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            this.CreatedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            this.ModifiedOn=mobilesitedesignerDB.DateTimeNowTruncatedDownToSecond();
            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                         
             this.IsDeleted=true;
            _repo.Update(this,provider);
                
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TBL_Appointment, bool>> expression) {
            var repo = GetRepo();
            
            
            List<TBL_Appointment> items=repo.GetAll().Where(expression).ToList();
            items.ForEach(x=>x.IsDeleted=true);
            repo.Update(items);
            
        }

                
        public static void Destroy(Func<TBL_Appointment, bool> expression) {
            var repo = GetRepo();
            repo.Delete(expression);
        }
        
        public static void Destroy(object key) {
            var repo = GetRepo();
            repo.Delete(key);
        }
        
        public static void Destroy(object key, IDataProvider provider) {
        
            var repo = GetRepo();
            repo.Delete(key,provider);
            
        }        
        
        public void Destroy() {
            _repo.Delete(KeyValue());
        }        
        public void Destroy(IDataProvider provider) {
            _repo.Delete(KeyValue(), provider);
        }         
        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
}
