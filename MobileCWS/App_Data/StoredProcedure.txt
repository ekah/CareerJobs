INSERT INTO TBL_Master_PastHistory VALUES ('History of TB')
INSERT INTO TBL_Master_PastHistory VALUES ('History of Jaundice')
INSERT INTO TBL_Master_PastHistory VALUES ('History of Previous Blood Transfusions')
INSERT INTO TBL_Master_PastHistory VALUES ('History of Bleeding Tendencies')
INSERT INTO TBL_Master_PastHistory VALUES ('History of Gouty / Rheumatoid Arthritis')
INSERT INTO TBL_Master_PastHistory VALUES ('History of Chest Pain or Breathlessness')
INSERT INTO TBL_Master_PastHistory VALUES ('History of Asthma')
INSERT INTO TBL_Master_PastHistory VALUES ('History of Thyroid Deficiencies')

INSERT INTO TBL_Master_PersonalHistory VALUES ('Non-Vegetarian')
INSERT INTO TBL_Master_PersonalHistory VALUES ('Smoking')
INSERT INTO TBL_Master_PersonalHistory VALUES ('Alchol')
INSERT INTO TBL_Master_PersonalHistory VALUES ('Married')

/*DBCC CHECKIDENT (TBL_Token, RESEED, 0);
DBCC CHECKIDENT (TBL_Token, RESEED, 0);
DBCC CHECKIDENT (TBL_Appointment, RESEED, 0);
DBCC CHECKIDENT (TBL_Doctor_Timing, RESEED, 0);
DBCC CHECKIDENT (TBL_Service_Timing, RESEED, 0);
DBCC CHECKIDENT (TBL_Service, RESEED, 0);
DBCC CHECKIDENT (TBL_Patient, RESEED, 0);
DBCC CHECKIDENT (TBL_Doctor, RESEED, 0);
DBCC CHECKIDENT (TBL_Organization, RESEED, 0);
DBCC CHECKIDENT (TBL_Login, RESEED, 0);

TRUNCATE TABLE TBL_Token
DELETE FROM TBL_Appointment
TRUNCATE TABLE TBL_Doctor_Diagnosis
DELETE FROM TBL_BlockCalendar
DELETE FROM TBL_Doctor_Timing
TRUNCATE TABLE TBL_Patient_PastHistory
TRUNCATE TABLE TBL_Patient_PersonalHistory
TRUNCATE TABLE TBL_Service_Diagnosis
DELETE FROM TBL_Service_Timing
DELETE FROM TBL_Service
DELETE FROM TBL_Patient
DELETE FROM TBL_Doctor
DELETE FROM TBL_Organization
DELETE FROM TBL_Login

SELECT * FROM TBL_Answer
SELECT * FROM TBL_Appointment
SELECT * FROM TBL_BlockCalendar
SELECT * FROM TBL_Diagnosis_Department
SELECT * FROM TBL_Doctor
SELECT * FROM TBL_Doctor_Diagnosis
SELECT * FROM TBL_Doctor_Timing
SELECT * FROM TBL_Feedback
SELECT * FROM TBL_Login
SELECT * FROM TBL_Patient
SELECT * FROM TBL_Master_AccountType
SELECT * FROM TBL_Master_City
SELECT * FROM TBL_Master_Country
SELECT * FROM TBL_Master_Department
SELECT * FROM TBL_Master_Diagnosis
SELECT * FROM TBL_Master_PastHistory
SELECT * FROM TBL_Master_PersonalHistory
SELECT * FROM TBL_Master_Preferential
SELECT * FROM TBL_Master_Relationship
SELECT * FROM TBL_Master_State
SELECT * FROM TBL_Master_Status
SELECT * FROM TBL_Master_Symptom
SELECT * FROM TBL_Master_SymptomGroup
SELECT * FROM TBL_Organization
SELECT * FROM TBL_Patient
SELECT * FROM TBL_Patient_PastHistory
SELECT * FROM TBL_Patient_PersonalHistory
SELECT * FROM TBL_Question
SELECT * FROM TBL_Rating
SELECT * FROM TBL_Reference
SELECT * FROM TBL_Service
SELECT * FROM TBL_Service_Diagnosis
SELECT * FROM TBL_Service_Timing
SELECT * FROM TBL_Symptom_Diagnosis
SELECT * FROM TBL_Token*/

---------------------------------------------------------------
--Functions --- Latest Updated on 14 September 2011 at 05:45 PM
---------------------------------------------------------------

USE [medappointment_dev]
GO

/****** Object:  UserDefinedFunction [dbo].[fn_Split_Up_Ids]    Script Date: 04/14/2012 17:56:19 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE FUNCTION [dbo].[fn_Split_Up_Ids]
(
  @text varchar(8000)
)
   RETURNS @words TABLE (
      --pos smallint primary key,
      value varchar(8000)
   )
AS
BEGIN
   DECLARE
      @pos smallint,
      @i smallint,
      @j smallint,
      @s varchar(8000)

   SET @pos = 1
   WHILE @pos <= LEN(@text) 
   BEGIN 
      SET @i = CHARINDEX(' ', @text, @pos)
      SET @j = CHARINDEX(',', @text, @pos)
      IF @i > 0 OR @j > 0
      BEGIN
         IF @i = 0 OR (@j > 0 AND @j < @i)
            SET @i = @j

         IF @i > @pos
         BEGIN
            -- @i now holds the earliest delimiter in the string
            SET @s = SUBSTRING(@text, @pos, @i - @pos)

            INSERT INTO @words
            VALUES (@s)
         END 
         SET @pos = @i + 1

         WHILE @pos < LEN(@text) 
            AND SUBSTRING(@text, @pos, 1) IN (' ', ',')
            SET @pos = @pos + 1 
      END 
      ELSE 
      BEGIN 
         INSERT INTO @words 
         VALUES (SUBSTRING(@text, @pos, LEN(@text) - @pos + 1))

         SET @pos = LEN(@text) + 1 
      END 
   END 
   RETURN 
END



GO

/****** Object:  UserDefinedFunction [dbo].[UFN_SplitCommaSeparatedValues]    Script Date: 04/14/2012 17:56:19 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE  FUNCTION [dbo].[UFN_SplitCommaSeparatedValues] ( @iv_ColumnIDs varchar(max) )    
RETURNS @ColumnIDs TABLE     
 (    
     ColumnID   Varchar(max)    
 )    
    
as    
Begin    
    
    
 DECLARE @tempID varchar(max), @Pos int    
    
 SET @iv_ColumnIDs = LTRIM(RTRIM(@iv_ColumnIDs))+ ','    
 SET @Pos = CHARINDEX(',', @iv_ColumnIDs, 1)    
    
 IF REPLACE(@iv_ColumnIDs, ',', '') <> ''    
 BEGIN    
  WHILE @Pos > 0    
  BEGIN    
   SET @tempID = LTRIM(RTRIM(LEFT(@iv_ColumnIDs, @Pos - 1)))    
   IF @tempID <> ''    
   BEGIN    
    INSERT INTO @ColumnIDs (ColumnID) VALUES (CAST(@tempID AS varchar(500)))     
   END    
   SET @iv_ColumnIDs = RIGHT(@iv_ColumnIDs, LEN(@iv_ColumnIDs) - @Pos)    
   SET @Pos = CHARINDEX(',', @iv_ColumnIDs, 1)    
    
  END    
 END     
Return     
End
GO


------------------------------------------------------------------------
--Stored Procedures --- Latest Updated on 13 July 2012 at 06:12 PM
------------------------------------------------------------------------

USE [medappointment_dev]
GO

/****** Object:  StoredProcedure [dbo].[USP_Admin_ActivateLoginById]    Script Date: 07/13/2012 18:10:26 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Admin_ActivateLoginById] 
(
@Id INT,
@Type INT
) 
AS
BEGIN

IF(@Type = 1)
	BEGIN   
	UPDATE TBL_Organization SET IsActivated = CASE WHEN IsActivated = 0 THEN 1
												 WHEN IsActivated = 1 THEN 0
												 END
						  WHERE OrganizationId = @Id AND IsDeleted = 0
						  
	SELECT IsActivated = CASE WHEN IsActivated = 0 THEN 'Deactivated' 
						  WHEN IsActivated = 1 THEN 'Activated'
						  END
		 FROM TBL_Organization WHERE OrganizationId = @Id AND IsDeleted = 0
	END
IF(@Type = 2)
	BEGIN  
	UPDATE TBL_Service SET IsActivated = CASE WHEN IsActivated = 0 THEN 1
											WHEN IsActivated = 1 THEN 0
											END
						  WHERE ServiceId=@Id AND IsDeleted = 0
	SELECT IsActivated = CASE WHEN IsActivated = 0 THEN 'Deactivated' 
						  WHEN IsActivated = 1 THEN 'Activated'
						  END
		 FROM TBL_Service WHERE ServiceId=@Id AND IsDeleted = 0
	END 
IF(@Type = 3)
 BEGIN
  UPDATE TBL_Doctor SET IsActivated = CASE WHEN IsActivated = 0 THEN 1
										   WHEN IsActivated = 1 THEN 0
										   END
						  WHERE DoctorId=@Id  AND IsDeleted = 0
  SELECT IsActivated = CASE WHEN IsActivated  = 0 THEN 'Deactivated' 
						  WHEN IsActivated = 1 THEN 'Activated'
						  END
		 FROM TBL_Doctor WHERE DoctorId=@Id AND IsDeleted = 0
END		 
IF(@Type = 4)
BEGIN
  UPDATE TBL_Patient SET IsActivated = CASE WHEN IsActivated = 0 THEN 1
											WHEN IsActivated = 1 THEN 0
											END
						  WHERE PatientId=@Id  AND IsDeleted = 0
  SELECT IsActivated = CASE WHEN IsActivated = 0 THEN 'Deactivated' 
						  WHEN IsActivated = 1 THEN 'Activated'
						  END
		 FROM TBL_Patient WHERE PatientId=@Id AND IsDeleted = 0
END
IF(@Type = 5)
BEGIN
	UPDATE TBL_Login SET IsActivated = CASE WHEN IsActivated = 0 THEN 1
											WHEN IsActivated = 1 THEN 0
											END
						WHERE LoginId=@Id  AND IsDeleted = 0
	SELECT IsActivated = CASE WHEN IsActivated = 0 THEN 'Deactivated' 
						  WHEN IsActivated = 1 THEN 'Activated'
						  END
		 FROM TBL_Login WHERE LoginId=@Id  AND IsDeleted = 0
		 
		 
--						  WHERE LoginId IN (SELECT LoginId FROM TBL_Login WHERE EmailId=@EmailId AND AccountTypeId=@Type)  AND IsDeleted = 0
--UPDATE TBL_Service SET IsActivated = CASE WHEN IsActivated IS NULL THEN 1
--												ELSE NULL
--												END
--						  WHERE LoginId IN (SELECT LoginId FROM TBL_Login WHERE EmailId=@EmailId AND AccountTypeId=@Type) AND IsDeleted = 0
--UPDATE TBL_Doctor SET IsActivated = CASE WHEN IsActivated IS NULL THEN 1
--												ELSE NULL
--												END
--						  WHERE LoginId IN (SELECT LoginId FROM TBL_Login WHERE EmailId=@EmailId AND AccountTypeId=@Type)  AND IsDeleted = 0
--UPDATE TBL_Patient SET IsActivated = CASE WHEN IsActivated IS NULL THEN 1
--												ELSE NULL
--												END
--						  WHERE LoginId IN (SELECT LoginId FROM TBL_Login WHERE EmailId=@EmailId AND AccountTypeId=@Type)  AND IsDeleted = 0

--SELECT IsActivated = CASE WHEN (SELECT IsActivated FROM TBL_Organization WHERE LoginId IN (SELECT LoginId FROM TBL_Login WHERE EmailId=@EmailId AND MedAppointmentId LIKE 'MED-O%')) = NULL AND
--					 (SELECT IsActivated FROM TBL_Service WHERE LoginId IN (SELECT LoginId FROM TBL_Login WHERE EmailId=@EmailId AND MedAppointmentId LIKE 'MED-S%')) = NULL AND
--					 (SELECT IsActivated FROM TBL_Doctor WHERE LoginId IN (SELECT LoginId FROM TBL_Login WHERE EmailId=@EmailId AND MedAppointmentId LIKE 'MED-D%')) = NULL AND
--					 (SELECT IsActivated FROM TBL_Patient WHERE LoginId IN (SELECT LoginId FROM TBL_Login WHERE EmailId=@EmailId AND MedAppointmentId LIKE 'MED-P%')) = NULL THEN 'Activated'
--					ELSE 'Deactivated' 
--					END
			
END
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Admin_DeleteAccountByAccountTypeId]    Script Date: 07/13/2012 18:10:26 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Admin_DeleteAccountByAccountTypeId] 
(
@Id INT ,
@AccountTypeId INT
)
AS
BEGIN

 IF(@AccountTypeId = 1)
 BEGIN
	DELETE FROM TBL_Token WHERE AppointmentId IN (SELECT AppointmentId FROM TBL_Appointment WHERE ServiceTimingId IN(
												SELECT ServiceTimingId FROM TBL_Service_Timing WHERE ServiceId IN (
												SELECT ServiceId FROM TBL_Service WHERE OrganizationId =@Id )))

	DELETE FROM TBL_Appointment WHERE ServiceTimingId IN (SELECT ServiceTimingId FROM TBL_Service_Timing WHERE ServiceId IN (
												SELECT ServiceId FROM TBL_Service WHERE OrganizationId = @Id))
												
	DELETE FROM TBL_BlockCalendar WHERE ServiceId IN (SELECT ServiceId FROM TBL_Service WHERE OrganizationId = @Id)


	DELETE FROM TBL_Service_Timing WHERE ServiceId IN (SELECT ServiceId FROM TBL_Service WHERE OrganizationId = @Id)


	DELETE FROM TBL_Service WHERE OrganizationId = @Id

			--Deleting doctor who is in this login organization 
			
	DELETE FROM TBL_Token WHERE AppointmentId IN (SELECT AppointmentId FROM TBL_Appointment WHERE DoctorTimingId IN(
												SELECT DoctorTimingId FROM TBL_Doctor_Timing WHERE DoctorId IN (
												SELECT DoctorId FROM TBL_Doctor WHERE OrganizationId = @Id)))
												

	DELETE FROM TBL_Appointment WHERE DoctorTimingId IN (SELECT DoctorTimingId FROM TBL_Doctor_Timing WHERE DoctorId IN (
												SELECT DoctorId FROM TBL_Doctor WHERE OrganizationId = @Id))

	DELETE FROM TBL_BlockCalendar WHERE DoctorId IN (SELECT DoctorId FROM TBL_Doctor WHERE OrganizationId = @Id)

	DELETE FROM TBL_Doctor_Timing WHERE DoctorId IN (SELECT DoctorId FROM TBL_Doctor WHERE OrganizationId = @Id)

	DELETE FROM TBL_Doctor WHERE OrganizationId = @Id
	
			--Delting Landing page detail
	DELETE FROM TBL_Landing_SubTab WHERE MainTabId IN (SELECT MainTabId FROM TBL_Landing_MainTab WHERE LandingId IN (SELECT LandingId FROM TBL_Landing WHERE PublishId IN (SELECT PublishId FROM TBL_Landing_Publish WHERE AccountId=@Id AND AccountTypeId=1))) 

	DELETE FROM TBL_Landing_MainTab WHERE LandingId IN (SELECT LandingId FROM TBL_Landing WHERE PublishId IN (SELECT PublishId FROM TBL_Landing_Publish WHERE AccountId=@Id AND AccountTypeId=1))

	DELETE FROM TBL_Landing WHERE PublishId IN (SELECT PublishId FROM TBL_Landing_Publish WHERE AccountId=@Id AND AccountTypeId=1)

	DELETE FROM TBL_Landing_Publish WHERE AccountId=@Id AND AccountTypeId=1

	DELETE FROM TBL_Landing_VideoGallery WHERE AccountId=@Id AND AccountTypeId=1

	DELETE from TBL_Landing_ImageGallery where AccountId=@Id AND AccountTypeId=1
	
			--Deleting login organization

	DELETE FROM TBL_Organization WHERE OrganizationId = @Id
	
	
 END
 
 IF(@AccountTypeId = 2)
 BEGIN
		--Deleting login service
		
	DELETE FROM TBL_Token WHERE AppointmentId IN (SELECT AppointmentId FROM TBL_Appointment WHERE ServiceTimingId IN(
												SELECT ServiceTimingId FROM TBL_Service_Timing WHERE ServiceId = @Id))										

	DELETE FROM TBL_Appointment WHERE ServiceTimingId IN (SELECT ServiceTimingId FROM TBL_Service_Timing WHERE ServiceId = @Id)
												
	DELETE FROM TBL_BlockCalendar WHERE ServiceId IN (SELECT ServiceId FROM TBL_Service WHERE ServiceId = @Id)

	DELETE FROM TBL_Service_Timing WHERE ServiceId IN (SELECT ServiceId FROM TBL_Service WHERE ServiceId = @Id)

	DELETE FROM TBL_Service WHERE ServiceId = @Id
 END
 
 IF(@AccountTypeId = 3)
 BEGIN
 
 --Deleting login doctor

	DELETE FROM TBL_Token WHERE AppointmentId IN (SELECT AppointmentId FROM TBL_Appointment WHERE DoctorTimingId IN(
												SELECT DoctorTimingId FROM TBL_Doctor_Timing WHERE DoctorId = @Id))

	DELETE FROM TBL_Appointment WHERE DoctorTimingId IN (SELECT DoctorTimingId FROM TBL_Doctor_Timing WHERE DoctorId = @Id)

	DELETE FROM TBL_BlockCalendar WHERE DoctorId IN (SELECT DoctorId FROM TBL_Doctor WHERE DoctorId = @Id)

	DELETE FROM TBL_Doctor_Timing WHERE DoctorId IN (SELECT DoctorId FROM TBL_Doctor WHERE DoctorId = @Id)
	
	--Delting doctor Landing page detail
	DELETE FROM TBL_Landing_SubTab WHERE MainTabId IN (SELECT MainTabId FROM TBL_Landing_MainTab WHERE LandingId IN (SELECT LandingId FROM TBL_Landing WHERE PublishId IN (SELECT PublishId FROM TBL_Landing_Publish WHERE AccountId=@Id AND AccountTypeId=3))) 

	DELETE FROM TBL_Landing_MainTab WHERE LandingId IN (SELECT LandingId FROM TBL_Landing WHERE PublishId IN (SELECT PublishId FROM TBL_Landing_Publish WHERE AccountId=@Id AND AccountTypeId=3))

	DELETE FROM TBL_Landing WHERE PublishId IN (SELECT PublishId FROM TBL_Landing_Publish WHERE AccountId=@Id AND AccountTypeId=3)

	DELETE FROM TBL_Landing_Publish WHERE AccountId=@Id AND AccountTypeId=3

	DELETE FROM TBL_Landing_VideoGallery WHERE AccountId=@Id AND AccountTypeId=3

	DELETE from TBL_Landing_ImageGallery where AccountId=@Id AND AccountTypeId=3


	DELETE FROM TBL_Doctor WHERE DoctorId = @Id
 END
 
 IF(@AccountTypeId = 4)
 BEGIN
	--Deleting login patient

	DELETE FROM TBL_Token WHERE AppointmentId IN (SELECT AppointmentId FROM TBL_Appointment WHERE PatientId = @Id)

	DELETE FROM TBL_Token WHERE AppointmentId IN (SELECT AppointmentId FROM TBL_Appointment WHERE PatientId IN(SELECT PatientId FROM TBL_Patient WHERE ParentId = @Id))

	DELETE FROM TBL_Appointment WHERE PatientId = @Id

	DELETE FROM TBL_Appointment WHERE PatientId IN (SELECT PatientId FROM TBL_Patient WHERE ParentId = @Id)
	
		--Deleting patient history
	DELETE FROM TBL_Patient_PastHistory WHERE PatientId = @Id

	DELETE FROM TBL_Patient_PersonalHistory WHERE PatientId = @Id

	DELETE FROM TBL_Patient_FamilyHistory WHERE PatientId = @Id

			--Deleting members history
	DELETE FROM TBL_Patient_PastHistory WHERE PatientId IN (SELECT PatientId FROM TBL_Patient WHERE ParentId = @Id)

	DELETE FROM TBL_Patient_PersonalHistory WHERE PatientId IN (SELECT PatientId FROM TBL_Patient WHERE ParentId = @Id)

	DELETE FROM TBL_Patient_FamilyHistory WHERE PatientId IN (SELECT PatientId FROM TBL_Patient WHERE ParentId = @Id)

	DELETE FROM TBL_Patient WHERE ParentId = @Id

	DELETE FROM TBL_Patient WHERE PatientId = @Id
 
 END
 
 IF(@AccountTypeId = 5)
 BEGIN
	
DELETE FROM TBL_Token WHERE AppointmentId IN (SELECT AppointmentId FROM TBL_Appointment WHERE PatientId IN(SELECT PatientId FROM TBL_Patient WHERE LoginId = @Id))

DELETE FROM TBL_Token WHERE AppointmentId IN (SELECT AppointmentId FROM TBL_Appointment WHERE PatientId IN(SELECT PatientId FROM TBL_Patient WHERE ParentId IN (SELECT PatientId FROM TBL_Patient WHERE LoginId= @Id)))

DELETE FROM TBL_Appointment WHERE PatientId IN (SELECT PatientId FROM TBL_Patient WHERE LoginId= @Id)

DELETE FROM TBL_Appointment WHERE PatientId IN (SELECT PatientId FROM TBL_Patient WHERE ParentId IN (SELECT PatientId FROM TBL_Patient WHERE LoginId= @Id))
	
		--Deleting patient history
DELETE FROM TBL_Patient_PastHistory WHERE PatientId IN (SELECT PatientId FROM TBL_Patient WHERE LoginId= @Id)

DELETE FROM TBL_Patient_PersonalHistory WHERE PatientId IN (SELECT PatientId FROM TBL_Patient WHERE LoginId= @Id)

DELETE FROM TBL_Patient_FamilyHistory WHERE PatientId IN (SELECT PatientId FROM TBL_Patient WHERE LoginId= @Id)

		--Deleting members history
DELETE FROM TBL_Patient_PastHistory WHERE PatientId IN (SELECT PatientId FROM TBL_Patient WHERE ParentId IN (SELECT PatientId FROM TBL_Patient WHERE LoginId= @Id))

DELETE FROM TBL_Patient_PersonalHistory WHERE PatientId IN (SELECT PatientId FROM TBL_Patient WHERE ParentId IN (SELECT PatientId FROM TBL_Patient WHERE LoginId= @Id))

DELETE FROM TBL_Patient_FamilyHistory WHERE PatientId IN (SELECT PatientId FROM TBL_Patient WHERE ParentId IN (SELECT PatientId FROM TBL_Patient WHERE LoginId= @Id))

DELETE FROM TBL_Patient WHERE ParentId IN (SELECT PatientId FROM TBL_Patient WHERE LoginId= @Id)

DELETE FROM TBL_Patient WHERE LoginId = @Id

--Deleting login service

DELETE FROM TBL_Token WHERE AppointmentId IN (SELECT AppointmentId FROM TBL_Appointment WHERE ServiceTimingId IN(
												SELECT ServiceTimingId FROM TBL_Service_Timing WHERE ServiceId IN (
												SELECT ServiceId FROM TBL_Service WHERE LoginId = @Id)))										

DELETE FROM TBL_Appointment WHERE ServiceTimingId IN (SELECT ServiceTimingId FROM TBL_Service_Timing WHERE ServiceId IN (
												SELECT ServiceId FROM TBL_Service WHERE LoginId = @Id))
												
DELETE FROM TBL_BlockCalendar WHERE ServiceId IN (SELECT ServiceId FROM TBL_Service WHERE LoginId = @Id)

DELETE FROM TBL_Service_Timing WHERE ServiceId IN (SELECT ServiceId FROM TBL_Service WHERE LoginId = @Id)

DELETE FROM TBL_Service WHERE LoginId =@Id

--Deleting login doctor

DELETE FROM TBL_Token WHERE AppointmentId IN (SELECT AppointmentId FROM TBL_Appointment WHERE DoctorTimingId IN(
												SELECT DoctorTimingId FROM TBL_Doctor_Timing WHERE DoctorId IN (
												SELECT DoctorId FROM TBL_Doctor WHERE LoginId = @Id)))

DELETE FROM TBL_Appointment WHERE DoctorTimingId IN (SELECT DoctorTimingId FROM TBL_Doctor_Timing WHERE DoctorId IN (
												SELECT DoctorId FROM TBL_Doctor WHERE LoginId = @Id))

DELETE FROM TBL_BlockCalendar WHERE DoctorId IN (SELECT DoctorId FROM TBL_Doctor WHERE LoginId = @Id)

DELETE FROM TBL_Doctor_Timing WHERE DoctorId IN (SELECT DoctorId FROM TBL_Doctor WHERE LoginId = @Id)
--Delting doctor Landing page detail
	DELETE FROM TBL_Landing_SubTab WHERE MainTabId IN (SELECT MainTabId FROM TBL_Landing_MainTab WHERE LandingId IN (SELECT LandingId FROM TBL_Landing WHERE PublishId IN (SELECT PublishId FROM TBL_Landing_Publish WHERE AccountId IN (SELECT DoctorId FROM TBL_Doctor WHERE LoginId = @Id) AND AccountTypeId=3))) 

	DELETE FROM TBL_Landing_MainTab WHERE LandingId IN (SELECT LandingId FROM TBL_Landing WHERE PublishId IN (SELECT PublishId FROM TBL_Landing_Publish WHERE AccountId IN (SELECT DoctorId FROM TBL_Doctor WHERE LoginId = @Id) AND AccountTypeId=3))

	DELETE FROM TBL_Landing WHERE PublishId IN (SELECT PublishId FROM TBL_Landing_Publish WHERE AccountId=@Id AND AccountTypeId=3)

	DELETE FROM TBL_Landing_Publish WHERE AccountId IN (SELECT DoctorId FROM TBL_Doctor WHERE LoginId = @Id) AND AccountTypeId=3

	DELETE FROM TBL_Landing_VideoGallery WHERE AccountId IN (SELECT DoctorId FROM TBL_Doctor WHERE LoginId = @Id) AND AccountTypeId=3

	DELETE from TBL_Landing_ImageGallery where AccountId IN (SELECT DoctorId FROM TBL_Doctor WHERE LoginId = @Id) AND AccountTypeId=3

DELETE FROM TBL_Doctor WHERE LoginId = @Id

--Deleting login organization
	
		--Deleting service who is in this login organization 

DELETE FROM TBL_Token WHERE AppointmentId IN (SELECT AppointmentId FROM TBL_Appointment WHERE ServiceTimingId IN(
												SELECT ServiceTimingId FROM TBL_Service_Timing WHERE ServiceId IN (
												SELECT ServiceId FROM TBL_Service WHERE OrganizationId IN ( SELECT OrganizationId FROM TBL_Organization WHERE LoginId = @Id))))

DELETE FROM TBL_Appointment WHERE ServiceTimingId IN (SELECT ServiceTimingId FROM TBL_Service_Timing WHERE ServiceId IN (
												SELECT ServiceId FROM TBL_Service WHERE OrganizationId IN ( SELECT OrganizationId FROM TBL_Organization WHERE LoginId = @Id)))
												
DELETE FROM TBL_BlockCalendar WHERE ServiceId IN (SELECT ServiceId FROM TBL_Service WHERE OrganizationId IN ( SELECT OrganizationId FROM TBL_Organization WHERE LoginId = @Id))


DELETE FROM TBL_Service_Timing WHERE ServiceId IN (SELECT ServiceId FROM TBL_Service WHERE OrganizationId IN ( SELECT OrganizationId FROM TBL_Organization WHERE LoginId = @Id))


DELETE FROM TBL_Service WHERE OrganizationId IN ( SELECT OrganizationId FROM TBL_Organization WHERE LoginId = @Id)

			--Deleting doctor who is in this login organization 
			
DELETE FROM TBL_Token WHERE AppointmentId IN (SELECT AppointmentId FROM TBL_Appointment WHERE DoctorTimingId IN(
												SELECT DoctorTimingId FROM TBL_Doctor_Timing WHERE DoctorId IN (
												SELECT DoctorId FROM TBL_Doctor WHERE OrganizationId IN ( SELECT OrganizationId FROM TBL_Organization WHERE LoginId = @Id))))
												

DELETE FROM TBL_Appointment WHERE DoctorTimingId IN (SELECT DoctorTimingId FROM TBL_Doctor_Timing WHERE DoctorId IN (
												SELECT DoctorId FROM TBL_Doctor WHERE OrganizationId IN ( SELECT OrganizationId FROM TBL_Organization WHERE LoginId = @Id)))

DELETE FROM TBL_BlockCalendar WHERE DoctorId IN (SELECT DoctorId FROM TBL_Doctor WHERE OrganizationId IN ( SELECT OrganizationId FROM TBL_Organization WHERE LoginId = @Id))

DELETE FROM TBL_Doctor_Timing WHERE DoctorId IN (SELECT DoctorId FROM TBL_Doctor WHERE OrganizationId IN ( SELECT OrganizationId FROM TBL_Organization WHERE LoginId = @Id))

DELETE FROM TBL_Doctor WHERE OrganizationId IN ( SELECT OrganizationId FROM TBL_Organization WHERE LoginId = @Id)

--Delting Landing page detail
	DELETE FROM TBL_Landing_SubTab WHERE MainTabId IN (SELECT MainTabId FROM TBL_Landing_MainTab WHERE LandingId IN (SELECT LandingId FROM TBL_Landing WHERE PublishId IN (SELECT PublishId FROM TBL_Landing_Publish WHERE AccountId IN (SELECT OrganizationId FROM TBL_Organization WHERE LoginId = @Id) AND AccountTypeId=1))) 

	DELETE FROM TBL_Landing_MainTab WHERE LandingId IN (SELECT LandingId FROM TBL_Landing WHERE PublishId IN (SELECT PublishId FROM TBL_Landing_Publish WHERE AccountId IN (SELECT OrganizationId FROM TBL_Organization WHERE LoginId = @Id) AND AccountTypeId=1))

	DELETE FROM TBL_Landing WHERE PublishId IN (SELECT PublishId FROM TBL_Landing_Publish WHERE AccountId IN (SELECT OrganizationId FROM TBL_Organization WHERE LoginId = @Id) AND AccountTypeId=1)

	DELETE FROM TBL_Landing_Publish WHERE AccountId IN (SELECT OrganizationId FROM TBL_Organization WHERE LoginId = @Id) AND AccountTypeId=1

	DELETE FROM TBL_Landing_VideoGallery WHERE AccountId IN (SELECT OrganizationId FROM TBL_Organization WHERE LoginId = @Id) AND AccountTypeId=1

	DELETE from TBL_Landing_ImageGallery where AccountId IN (SELECT OrganizationId FROM TBL_Organization WHERE LoginId = @Id) AND AccountTypeId=1

DELETE FROM TBL_Organization WHERE LoginId = @Id

--Deleting login

DELETE FROM TBL_Login WHERE LoginId = @Id	
 END
 
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Admin_DeleteAccountbyLoginId]    Script Date: 07/13/2012 18:10:26 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Admin_DeleteAccountbyLoginId] 
(
@LoginId INT
)
AS
BEGIN
--Deleting login patient

DELETE FROM TBL_Token WHERE AppointmentId IN (SELECT AppointmentId FROM TBL_Appointment WHERE PatientId IN(SELECT PatientId FROM TBL_Patient WHERE LoginId = @LoginId))

DELETE FROM TBL_Token WHERE AppointmentId IN (SELECT AppointmentId FROM TBL_Appointment WHERE PatientId IN(SELECT PatientId FROM TBL_Patient WHERE ParentId IN (SELECT PatientId FROM TBL_Patient WHERE LoginId= @LoginId)))

DELETE FROM TBL_Appointment WHERE PatientId IN (SELECT PatientId FROM TBL_Patient WHERE LoginId= @LoginId)

DELETE FROM TBL_Appointment WHERE PatientId IN (SELECT PatientId FROM TBL_Patient WHERE ParentId IN (SELECT PatientId FROM TBL_Patient WHERE LoginId= @LoginId))
	
		--Deleting patient history
DELETE FROM TBL_Patient_PastHistory WHERE PatientId IN (SELECT PatientId FROM TBL_Patient WHERE LoginId= @LoginId)

DELETE FROM TBL_Patient_PersonalHistory WHERE PatientId IN (SELECT PatientId FROM TBL_Patient WHERE LoginId= @LoginId)

DELETE FROM TBL_Patient_FamilyHistory WHERE PatientId IN (SELECT PatientId FROM TBL_Patient WHERE LoginId= @LoginId)

DELETE FROM TBL_Patient_SearchCount WHERE PatientId IN (SELECT PatientId FROM TBL_Patient WHERE LoginId= @LoginId)

		--Deleting members history
DELETE FROM TBL_Patient_PastHistory WHERE PatientId IN (SELECT PatientId FROM TBL_Patient WHERE ParentId IN (SELECT PatientId FROM TBL_Patient WHERE LoginId= @LoginId))

DELETE FROM TBL_Patient_PersonalHistory WHERE PatientId IN (SELECT PatientId FROM TBL_Patient WHERE ParentId IN (SELECT PatientId FROM TBL_Patient WHERE LoginId= @LoginId))

DELETE FROM TBL_Patient_FamilyHistory WHERE PatientId IN (SELECT PatientId FROM TBL_Patient WHERE ParentId IN (SELECT PatientId FROM TBL_Patient WHERE LoginId= @LoginId))

DELETE FROM TBL_Patient WHERE ParentId IN (SELECT PatientId FROM TBL_Patient WHERE LoginId= @LoginId)

DELETE FROM TBL_Patient WHERE LoginId = @LoginId

--Deleting login service

DELETE FROM TBL_Token WHERE AppointmentId IN (SELECT AppointmentId FROM TBL_Appointment WHERE ServiceTimingId IN(
												SELECT ServiceTimingId FROM TBL_Service_Timing WHERE ServiceId IN (
												SELECT ServiceId FROM TBL_Service WHERE LoginId = @LoginId)))										

DELETE FROM TBL_Appointment WHERE ServiceTimingId IN (SELECT ServiceTimingId FROM TBL_Service_Timing WHERE ServiceId IN (
												SELECT ServiceId FROM TBL_Service WHERE LoginId = @LoginId))
												
DELETE FROM TBL_BlockCalendar WHERE ServiceId IN (SELECT ServiceId FROM TBL_Service WHERE LoginId = @LoginId)

DELETE FROM TBL_Service_Timing WHERE ServiceId IN (SELECT ServiceId FROM TBL_Service WHERE LoginId = @LoginId)

DELETE FROM TBL_Service_Diagnosis WHERE ServiceId IN (SELECT ServiceId FROM TBL_Service WHERE LoginId = @LoginId)

DELETE FROM TBL_Service WHERE LoginId =@LoginId

--Deleting login doctor

DELETE FROM TBL_Token WHERE AppointmentId IN (SELECT AppointmentId FROM TBL_Appointment WHERE DoctorTimingId IN(
												SELECT DoctorTimingId FROM TBL_Doctor_Timing WHERE DoctorId IN (
												SELECT DoctorId FROM TBL_Doctor WHERE LoginId = @LoginId)))

DELETE FROM TBL_Appointment WHERE DoctorTimingId IN (SELECT DoctorTimingId FROM TBL_Doctor_Timing WHERE DoctorId IN (
												SELECT DoctorId FROM TBL_Doctor WHERE LoginId = @LoginId))

DELETE FROM TBL_BlockCalendar WHERE DoctorId IN (SELECT DoctorId FROM TBL_Doctor WHERE LoginId = @LoginId)

DELETE FROM TBL_Doctor_Timing WHERE DoctorId IN (SELECT DoctorId FROM TBL_Doctor WHERE LoginId = @LoginId)

DELETE FROM TBL_Doctor_Diagnosis WHERE DoctorId  IN (SELECT DoctorId FROM TBL_Doctor WHERE LoginId = @LoginId)

DELETE FROM TBL_Doctor_Education WHERE DoctorId  IN (SELECT DoctorId FROM TBL_Doctor WHERE LoginId = @LoginId)

DELETE FROM TBL_Doctor_Experience WHERE DoctorId  IN (SELECT DoctorId FROM TBL_Doctor WHERE LoginId = @LoginId)

DELETE FROM TBL_Doctor WHERE LoginId = @LoginId

--Deleting login organization
	
		--Deleting service who is in this login organization 

DELETE FROM TBL_Token WHERE AppointmentId IN (SELECT AppointmentId FROM TBL_Appointment WHERE ServiceTimingId IN(
												SELECT ServiceTimingId FROM TBL_Service_Timing WHERE ServiceId IN (
												SELECT ServiceId FROM TBL_Service WHERE OrganizationId IN ( SELECT OrganizationId FROM TBL_Organization WHERE LoginId = @LoginId))))

DELETE FROM TBL_Appointment WHERE ServiceTimingId IN (SELECT ServiceTimingId FROM TBL_Service_Timing WHERE ServiceId IN (
												SELECT ServiceId FROM TBL_Service WHERE OrganizationId IN ( SELECT OrganizationId FROM TBL_Organization WHERE LoginId = @LoginId)))
												
DELETE FROM TBL_BlockCalendar WHERE ServiceId IN (SELECT ServiceId FROM TBL_Service WHERE OrganizationId IN ( SELECT OrganizationId FROM TBL_Organization WHERE LoginId = @LoginId))


DELETE FROM TBL_Service_Timing WHERE ServiceId IN (SELECT ServiceId FROM TBL_Service WHERE OrganizationId IN ( SELECT OrganizationId FROM TBL_Organization WHERE LoginId = @LoginId))

DELETE FROM TBL_Service_Diagnosis WHERE ServiceId IN (SELECT ServiceId FROM TBL_Service WHERE OrganizationId IN ( SELECT OrganizationId FROM TBL_Organization WHERE LoginId = @LoginId))

DELETE FROM TBL_Service WHERE OrganizationId IN ( SELECT OrganizationId FROM TBL_Organization WHERE LoginId = @LoginId)

			--Deleting doctor who is in this login organization 
			
DELETE FROM TBL_Token WHERE AppointmentId IN (SELECT AppointmentId FROM TBL_Appointment WHERE DoctorTimingId IN(
												SELECT DoctorTimingId FROM TBL_Doctor_Timing WHERE DoctorId IN (
												SELECT DoctorId FROM TBL_Doctor WHERE OrganizationId IN ( SELECT OrganizationId FROM TBL_Organization WHERE LoginId = @LoginId))))
												

DELETE FROM TBL_Appointment WHERE DoctorTimingId IN (SELECT DoctorTimingId FROM TBL_Doctor_Timing WHERE DoctorId IN (
												SELECT DoctorId FROM TBL_Doctor WHERE OrganizationId IN ( SELECT OrganizationId FROM TBL_Organization WHERE LoginId = @LoginId)))

DELETE FROM TBL_BlockCalendar WHERE DoctorId IN (SELECT DoctorId FROM TBL_Doctor WHERE OrganizationId IN ( SELECT OrganizationId FROM TBL_Organization WHERE LoginId = @LoginId))

DELETE FROM TBL_Doctor_Timing WHERE DoctorId IN (SELECT DoctorId FROM TBL_Doctor WHERE OrganizationId IN ( SELECT OrganizationId FROM TBL_Organization WHERE LoginId = @LoginId))

DELETE FROM TBL_Doctor_Diagnosis WHERE DoctorId  IN (SELECT DoctorId FROM TBL_Doctor WHERE OrganizationId IN ( SELECT OrganizationId FROM TBL_Organization WHERE LoginId = @LoginId))

DELETE FROM TBL_Doctor_Education WHERE DoctorId  IN (SELECT DoctorId FROM TBL_Doctor WHERE OrganizationId IN ( SELECT OrganizationId FROM TBL_Organization WHERE LoginId = @LoginId))

DELETE FROM TBL_Doctor_Experience WHERE DoctorId  IN (SELECT DoctorId FROM TBL_Doctor WHERE OrganizationId IN ( SELECT OrganizationId FROM TBL_Organization WHERE LoginId = @LoginId))

DELETE FROM TBL_Doctor WHERE OrganizationId IN ( SELECT OrganizationId FROM TBL_Organization WHERE LoginId = @LoginId)

DELETE FROM TBL_Organization WHERE LoginId = @LoginId

--Deleting login

DELETE FROM TBL_Login WHERE LoginId = @LoginId	

END

GO

/****** Object:  StoredProcedure [dbo].[USP_Admin_DeleteDepartmentDiagnosisSymptomByDirectId]    Script Date: 07/13/2012 18:10:26 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Admin_DeleteDepartmentDiagnosisSymptomByDirectId]  
(
@TypeId INT,
@Type INT
)
AS
BEGIN 

IF(@Type = 0)
BEGIN
	IF((SELECT IsDeleted FROM TBL_Master_Department WHERE DepartmentId=@TypeId) = 0)
	BEGIN	
	
		DELETE FROM TBL_Master_Symptom  WHERE SymptomId IN (SELECT SymptomId FROM TBL_Symptom_Diagnosis WHERE DiagnosisId IN (SELECT DiagnosisId FROM TBL_Diagnosis_Department WHERE DepartmentId=@TypeId)) AND IsTreatment = 1	
		DELETE FROM TBL_Symptom_Diagnosis WHERE DiagnosisId IN (SELECT DiagnosisId FROM TBL_Master_Diagnosis WHERE DiagnosisId IN (SELECT DiagnosisId FROM TBL_Diagnosis_Department WHERE DepartmentId = @TypeId) AND IsTreatment = 1 )	
		DELETE FROM TBL_Master_Diagnosis WHERE DiagnosisId IN (SELECT DiagnosisId FROM TBL_Diagnosis_Department WHERE DepartmentId=@TypeId) AND IsTreatment = 1
					
		DELETE FROM TBL_Diagnosis_Department WHERE DepartmentId=@TypeId		
		
		UPDATE TBL_Master_Department SET IsDeleted=1 WHERE DepartmentId=@TypeId
	END
END

IF(@Type = 1)
BEGIN
	IF((SELECT IsDeleted FROM TBL_Master_Diagnosis WHERE DiagnosisId=@TypeId) = 0)
	BEGIN
		DELETE FROM TBL_Diagnosis_Department WHERE DiagnosisId=@TypeId
		
		DELETE FROM TBL_Master_Symptom WHERE SymptomId = (SELECT SymptomId FROM TBL_Symptom_Diagnosis WHERE DiagnosisId=@TypeId) AND IsTreatment = 1
		DELETE FROM TBL_Symptom_Diagnosis WHERE DiagnosisId=@TypeId
		
		DELETE FROM dbo.TBL_Doctor_Diagnosis WHERE DiagnosisId=@TypeId
		
		DELETE FROM dbo.TBL_Service_Diagnosis WHERE DiagnosisId=@TypeId
		
		IF((SELECT IsTreatment FROM TBL_Master_Diagnosis WHERE DiagnosisId=@TypeId) = 0)
			UPDATE TBL_Master_Diagnosis SET IsDeleted=1 WHERE DiagnosisId=@TypeId
		ELSE
			DELETE FROM TBL_Master_Diagnosis  WHERE DiagnosisId=@TypeId	
	END
END

IF(@Type = 2)
BEGIN
	IF((SELECT IsDeleted FROM TBL_Master_Symptom WHERE SymptomId=@TypeId) = 0)
	BEGIN		
		DELETE FROM TBL_Symptom_Diagnosis WHERE SymptomId=@TypeId
		
		UPDATE TBL_Master_Symptom SET IsDeleted=1 WHERE SymptomId=@TypeId
	END
END

END


GO

/****** Object:  StoredProcedure [dbo].[USP_Admin_DeleteDepartmentDiagnosisSymptomById]    Script Date: 07/13/2012 18:10:26 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROC [dbo].[USP_Admin_DeleteDepartmentDiagnosisSymptomById] 
(
@TypeId INT,
@Type INT
)
AS
BEGIN 

IF(@Type = 0)
BEGIN
	IF((SELECT IsDeleted FROM TBL_Master_Department WHERE DepartmentId=@TypeId) = 0)
	BEGIN
		IF((SELECT COUNT(DepartmentId) FROM TBL_Diagnosis_Department WHERE DepartmentId = @TypeId ) = 0 )
		BEGIN
			UPDATE TBL_Master_Department SET IsDeleted = 1 WHERE DepartmentId=@TypeId
		END	
	END
	ELSE
	BEGIN
		UPDATE TBL_Master_Department SET IsDeleted = 0 WHERE DepartmentId=@TypeId	
	END
END

IF(@Type = 1)
BEGIN
	IF((SELECT IsDeleted FROM TBL_Master_Diagnosis WHERE DiagnosisId=@TypeId) = 0)
	BEGIN
		IF((SELECT COUNT(DiagnosisId) FROM TBL_Diagnosis_Department WHERE DiagnosisId = @TypeId ) = 0 )
		BEGIN
			IF((SELECT COUNT(DiagnosisId) FROM TBL_Symptom_Diagnosis WHERE DiagnosisId = @TypeId ) = 0 )
			BEGIN
				UPDATE TBL_Master_Diagnosis SET IsDeleted = 1, ModifiedOn = GETDATE() WHERE DiagnosisId=@TypeId		
			END
		END	
	END
	ELSE
	BEGIN
		UPDATE TBL_Master_Diagnosis SET IsDeleted = 0, ModifiedOn = GETDATE() WHERE DiagnosisId=@TypeId	
	END
END

IF(@Type = 2)
BEGIN
	IF((SELECT IsDeleted FROM TBL_Master_Symptom WHERE SymptomId=@TypeId) = 0)
	BEGIN		
		IF((SELECT COUNT(DiagnosisId) FROM TBL_Symptom_Diagnosis WHERE SymptomId = @TypeId ) = 0 )
		BEGIN
			UPDATE TBL_Master_Symptom SET IsDeleted = 1, ModifiedOn = GETDATE() WHERE SymptomId=@TypeId		
		END
	END
	ELSE
	BEGIN
		UPDATE TBL_Master_Symptom SET IsDeleted = 0, ModifiedOn = GETDATE() WHERE SymptomId=@TypeId	
	END
END

END
GO

/****** Object:  StoredProcedure [dbo].[USP_Admin_GetAccountType]    Script Date: 07/13/2012 18:10:26 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Admin_GetAccountType] 
(
@LoginId INT
)
AS
BEGIN
	 SELECT COUNT(S.LoginId) [SmsCount], MA.AccountTypeId, MA.AccountTypeName, @LoginId [LoginId] 
	 FROM TBL_Master_AccountType MA, TBL_SMS S 
	 WHERE MA.AccountTypeId=S.AccountTypeId AND S.LoginId=@LoginId
	 GROUP BY S.LoginId, MA.AccountTypeId, MA.AccountTypeName
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Admin_GetAccountTypeByLoginView]    Script Date: 07/13/2012 18:10:26 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Admin_GetAccountTypeByLoginView]
AS
BEGIN
	 SELECT MA.AccountTypeId, MA.AccountTypeName,  L.LoginId 
			FROM TBL_Master_AccountType MA, TBL_Login L 
			WHERE L.IsDeleted=0
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Admin_GetAppointmentView]    Script Date: 07/13/2012 18:10:26 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Admin_GetAppointmentView]
AS
BEGIN
	SELECT A.AppointmentId,(SELECT CASE ISNULL(LastName, '')
								   WHEN '' THEN FirstName
								   ELSE FirstName + ' '+ LastName 
								   END FROM TBL_Patient WHERE PatientId=A.PatientId) [PatientName],
								   
			A.PatientId [Id],
								   
		    CASE ISNULL(A.ServiceId, '')
				 WHEN '' THEN (SELECT 'Dr.' + DoctorName FROM TBL_Doctor WHERE DoctorId = A.DoctorId)
				 ELSE (SELECT 'Service - ' + ServiceName FROM TBL_Service WHERE ServiceId = A.ServiceId)
				 END [DoctorServicename],
				 
			CONVERT(NVARCHAR(100), A.AppointmentDate, 106) [AppointmentDate],
			
			A.AppointmentTime,
			
			(SELECT OrganizationName + ' - ' + BranchName FROM TBL_Organization  WHERE OrganizationId=A.OrganizationId) [OrganizationName],
			
			CASE ISNULL(A.ServiceTimingId, '')
				 WHEN '' THEN (SELECT ScheduleName FROM TBL_Doctor_Timing WHERE DoctorTimingId=A.DoctorTimingId)
				 ELSE (SELECT ScheduleName FROM TBL_Service_Timing WHERE ServiceTimingId=A.ServiceTimingId)
				 END[ScheduleName],
				 
			CASE ISNULL(A.ServiceTimingId, '')
				 WHEN '' THEN (SELECT  Address FROM TBL_Doctor_Timing WHERE DoctorTimingId = A.DoctorTimingId)
				 ELSE (SELECT Address FROM TBL_Service_Timing WHERE ServiceTimingId = A.ServiceTimingId)
				 END [ScheduleAddress],
				 
			(SELECT AddressLine1 + ',' FROM TBL_Organization WHERE OrganizationId = (SELECT CASE ISNULL(A.ServiceId, '')
																					WHEN '' THEN (SELECT OrganizationId FROM TBL_Doctor WHERE DoctorId=A.DoctorId)
																					ELSE (SELECT OrganizationId FROM TBL_Service WHERE ServiceId=A.ServiceId)
																					END)) [AddressLine1],
			(SELECT AddressLine2 FROM TBL_Organization WHERE OrganizationId = (SELECT CASE ISNULL(A.ServiceId, '')
																					WHEN '' THEN (SELECT OrganizationId FROM TBL_Doctor WHERE DoctorId=A.DoctorId)
																					ELSE (SELECT OrganizationId FROM TBL_Service WHERE ServiceId=A.ServiceId)
																					END)) [AddressLine2],
				 		 
			(SELECT CityName  FROM TBL_GeoPostcodes_City WHERE CityId = (SELECT CityId FROM TBL_Organization WHERE OrganizationId = (SELECT CASE ISNULL(A.ServiceId, '')
																																		        WHEN '' THEN (SELECT OrganizationId FROM TBL_Doctor WHERE DoctorId=A.DoctorId)
																																		        ELSE (SELECT OrganizationId FROM TBL_Service WHERE ServiceId=A.ServiceId)
																																		        END))) [CityName],
			
			(SELECT StateName  FROM TBL_GeoPostcodes_State WHERE StateId = (SELECT StateId FROM TBL_Organization WHERE OrganizationId = (SELECT CASE ISNULL(A.ServiceId, '')
																																		        WHEN '' THEN (SELECT OrganizationId FROM TBL_Doctor WHERE DoctorId=A.DoctorId)
																																		        ELSE (SELECT OrganizationId FROM TBL_Service WHERE ServiceId=A.ServiceId)
																																		        END))) [StateName],
			
			(SELECT CountryName + ',' FROM TBL_GeoPostcodes_Country WHERE CountryId = (SELECT CountryId FROM TBL_Organization WHERE OrganizationId = (SELECT CASE ISNULL(A.ServiceId, '')
																																		        WHEN '' THEN (SELECT OrganizationId FROM TBL_Doctor WHERE DoctorId=A.DoctorId)
																																		        ELSE (SELECT OrganizationId FROM TBL_Service WHERE ServiceId=A.ServiceId)
																																		        END))) [CountryName],
			
			(SELECT PostalCode  FROM TBL_Organization WHERE OrganizationId = (SELECT CASE ISNULL(A.ServiceId, '')
																						 WHEN '' THEN (SELECT OrganizationId FROM TBL_Doctor WHERE DoctorId=A.DoctorId)
																						 ELSE (SELECT OrganizationId FROM TBL_Service WHERE ServiceId=A.ServiceId)
																						 END)) [PostalCode],
			
			(SELECT Phone FROM TBL_Organization WHERE OrganizationId = (SELECT CASE ISNULL(A.ServiceId, '')
																					WHEN '' THEN (SELECT OrganizationId FROM TBL_Doctor WHERE DoctorId=A.DoctorId)
																					ELSE (SELECT OrganizationId FROM TBL_Service WHERE ServiceId=A.ServiceId)
																					END)) [Phone],
				 
			(SELECT StatusName FROM TBL_Master_Status WHERE StatusId = A.StatusId) [Status],
			
			(SELECT MobileId FROM TBL_Login WHERE LoginId IN (SELECT LoginId FROM TBL_Patient WHERE PatientId = A.PatientId)) [EmailId],
		
			Type=4,
			
			A.CreatedOn,
		
			OrganizationId=0			
				
	FROM TBL_Appointment A 
	WHERE IsDeleted=0 
	ORDER BY A.AppointmentDate DESC
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Admin_GetDepartment]    Script Date: 07/13/2012 18:10:26 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Admin_GetDepartment]
AS
BEGIN
	SELECT DepartmentId, DepartmentName, Description, IsDeleted, [DeleteName] = CASE 
															WHEN IsDeleted = 0 THEN 'Delete'
															ELSE 'Undelete'
															END
	 FROM TBL_Master_Department WHERE IsDeleted=0 ORDER BY DepartmentName ASC
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Admin_GetDiagnosis]    Script Date: 07/13/2012 18:10:27 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Admin_GetDiagnosis]
AS
BEGIN
	SELECT DiagnosisId, Diagnosis, Description, IsDeleted, [DeleteName] = CASE 
															WHEN IsDeleted = 0 THEN 'Delete'
															ELSE 'Undelete'
															END
	 FROM TBL_Master_Diagnosis WHERE IsDeleted=0 AND IsTreatment = 0 ORDER BY Diagnosis ASC
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Admin_GetDoctorServiceByOrganizationId]    Script Date: 07/13/2012 18:10:27 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Admin_GetDoctorServiceByOrganizationId] 
(
@OrganizationId INT
)
AS
BEGIN

DECLARE @DoctorService TABLE
(
	DoctorServcieId INT,
	DoctorServcieType INT,
	LoginId INT,
	DoctorServcieName NVARCHAR(250),
	DepartmentName NVARCHAR(max),
	Gender NVARCHAR(25),
	Degrees NVARCHAR(500),
	PhotoName NVARCHAR(500),
	PreferedName NVARCHAR(250),
	Email NVARCHAR(250),
	Mobile NVARCHAR(250),
	CreatedOn DATETIME,
	Type NVARCHAR(15)	
)

INSERT INTO @DoctorService
	SELECT D.DoctorId, 0, D.LoginId, 'Dr.' + D.DoctorName, 
		   (SELECT DepartmentName FROM TBL_Master_Department WHERE DepartmentId=D.DepartmentId),  
		   CASE D.Gender
				WHEN 0 THEN 'Male'
				ELSE 'Female'
				END [Gender],
		    CASE ISNULL(D.Degrees,'')
				WHEN '' THEN '--'
				ELSE D.Degrees
				END [Degrees],
			CASE ISNULL(D.PhotoName,'')
				WHEN '' THEN 'NoPhoto.gif'
				ELSE D.PhotoName
				END [PhotoName],
			CASE ISNULL(D.PreferredName,'')
				WHEN '' THEN '--'
				ELSE D.PreferredName
				END [PreferredName],
			(SELECT EmailId FROM TBL_Login WHERE LoginId=D.LoginId),
			(SELECT MobileId FROM TBL_Login WHERE LoginId=D.LoginId),			
		   D.CreatedOn, 'Doctor(s)'
	FROM TBL_Doctor D WHERE D.OrganizationId=@OrganizationId AND D.IsDeleted=0
	
INSERT INTO @DoctorService
	SELECT S.ServiceId, 1, S.LoginId, S.ServiceName, (SELECT DepartmentName FROM TBL_Master_Department WHERE DepartmentId=S.DepartmentId),
	'--', '--', 'NoPhoto.gif', '--',
			(SELECT EmailId FROM TBL_Login WHERE LoginId=S.LoginId),
			(SELECT MobileId FROM TBL_Login WHERE LoginId=S.LoginId),
	S.CreatedOn, 'Service(s)'
	FROM TBL_Service S WHERE S.OrganizationId=@OrganizationId AND S.IsDeleted=0 
	
SELECT * FROM @DoctorService

END

GO

/****** Object:  StoredProcedure [dbo].[USP_Admin_GetDoctorWithouOrganization]    Script Date: 07/13/2012 18:10:27 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[USP_Admin_GetDoctorWithouOrganization]
AS
BEGIN
	SELECT 
		D.LoginId,
		D.DoctorName,
		(SELECT EmailId FROM TBL_Login WHERE LoginId=D.LoginId)[Email],
		D.Mobile
	FROM TBL_Doctor D WHERE D.IsDeleted=0 AND NOT EXISTS (SELECT * FROM TBL_Organization WHERE TBL_Organization.LoginId = D.LoginId AND IsDeleted = 0)
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Admin_GetExistingHospital]    Script Date: 07/13/2012 18:10:27 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Admin_GetExistingHospital]
(
	@MobileId NVARCHAR(MAX)
)
AS
BEGIN

	SELECT O.OrganizationId,
	
	   O.OrganizationName+', '+O.BranchName [OrganizationName],
	   
	   O.Address [AddressLine],
					  
	  (SELECT CASE ISNULL(CityName, '')
					WHEN  '' THEN ''
					ELSE  CityName 
					END
	    FROM TBL_GeoPostcodes_City WHERE CityId=O.CityId) [CityName],
	    
	  (SELECT CASE ISNULL(StateName, '')
					WHEN  '' THEN ''
					ELSE  StateName 
					END 
	    FROM TBL_GeoPostcodes_State WHERE StateId=O.StateId) [StateName],
	    
	  (SELECT CASE ISNULL(CountryName, '')
					WHEN  '' THEN ''
					ELSE  CountryName 
					END 
	    FROM TBL_GeoPostcodes_Country WHERE CountryId=O.CountryId) [CountryName],
	    
		O.PostalCode,
		  
		CASE WHEN O.Phone='' THEN 'Not Provided'
					 ELSE O.Phone
					 END[Phone],
					 
		O.Mobile,
		
		O.InCharge,
		
		CASE ISNULL(O.ReferedBy, '') WHEN '' THEN '  ---  '
					  ELSE O.ReferedBy
					  END[ReferedBy],
					  
		[CreatedOn] = CONVERT(VARCHAR, O.CreatedOn, 106),
		
		CASE WHEN O.IsDeleted='1' THEN 'Deleted' 
				  WHEN O.IsActivated='1' THEN 'Active'
				  ELSE 'Pending'
				  END
				  [Status],
		
		(SELECT EmailId FROM TBL_Login WHERE LoginId IN (SELECT LoginId FROM TBL_Organization WHERE OrganizationId = O.OrganizationId)) [EmailId],
		
		[InvalidNo] = (SELECT O.Mobile WHERE O.Mobile <> @MobileId),
		
		Type = 1,
		
		[Id] = O.OrganizationId
			
	FROM TBL_Organization O
	WHERE O.LoginId = (SELECT MAX(LoginId) FROM TBL_Login WHERE MobileId = @MobileId)
	ORDER BY O.CreatedOn DESC
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Admin_GetHospital]    Script Date: 07/13/2012 18:10:27 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Admin_GetHospital]
AS
BEGIN

	SELECT O.OrganizationId,
	
	   O.OrganizationName+', '+O.BranchName [OrganizationName],
	   
	   O.Address [AddressLine],
					  
	  (SELECT CASE ISNULL(CityName, '')
					WHEN  '' THEN ''
					ELSE  CityName 
					END
	    FROM TBL_GeoPostcodes_City WHERE CityId=O.CityId) [CityName],
	    
	  (SELECT CASE ISNULL(StateName, '')
					WHEN  '' THEN ''
					ELSE  StateName 
					END 
	    FROM TBL_GeoPostcodes_State WHERE StateId=O.StateId) [StateName],
	    
	  (SELECT CASE ISNULL(CountryName, '')
					WHEN  '' THEN ''
					ELSE  CountryName 
					END 
	    FROM TBL_GeoPostcodes_Country WHERE CountryId=O.CountryId) [CountryName],
	    
		O.PostalCode,
		  
		CASE WHEN O.Phone='' THEN 'Not Provided'
					 ELSE O.Phone
					 END[Phone],
					 
		O.Mobile,
		
		O.InCharge,
		
		CASE ISNULL(O.ReferedBy, '') WHEN '' THEN '  ---  '
					  ELSE O.ReferedBy
					  END[ReferedBy],
					  
		[CreatedOn] = CONVERT(VARCHAR, O.CreatedOn, 106),
		
		O.IsActivated [Activate],
		
		(SELECT EmailId FROM TBL_Login WHERE LoginId IN (SELECT LoginId FROM TBL_Organization WHERE OrganizationId = O.OrganizationId)) [EmailId],
		
		
		Type = 1,
		
		[Id] = O.OrganizationId
			
	FROM TBL_Organization O
	WHERE IsActivated=0 AND IsDeleted=0
	ORDER BY O.CreatedOn DESC
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Admin_GetHospitalList]    Script Date: 07/13/2012 18:10:27 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Admin_GetHospitalList]
AS
BEGIN
	SELECT O.OrganizationId, O.OrganizationName + ' - ' + O.BranchName [OrganizationName],
	(SELECT CASE ISNULL(CityName, '')
					WHEN  '' THEN ''
					ELSE  CityName 
					END
	    FROM TBL_GeoPostcodes_City WHERE CityId=O.CityId) [CityName],
	    
	  (SELECT CASE ISNULL(StateName, '')
					WHEN  '' THEN ''
					ELSE  StateName 
					END 
	    FROM TBL_GeoPostcodes_State WHERE StateId=O.StateId) [StateName],
	    
	  (SELECT CASE ISNULL(CountryName, '')
					WHEN  '' THEN ''
					ELSE  CountryName 
					END 
	    FROM TBL_GeoPostcodes_Country WHERE CountryId=O.CountryId) [CountryName]
	      
	FROM TBL_Organization O WHERE O.IsDeleted=0 AND O.IsActivated=1 AND O.OrganizationName IS NOT NULL 
	ORDER BY O.OrganizationName ASC
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Admin_GetLoginId]    Script Date: 07/13/2012 18:10:27 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Admin_GetLoginId]  
AS
BEGIN
	SELECT  COUNT(S.LoginId) [SmsCount], CASE WHEN L.EmailId is null THEN 'Not Applicable'
											  ELSE L.EmailId
											  END [EmailId], 
			L.MobileId,
			CASE WHEN L.Password is null THEN 'Not Applicable'
											  ELSE L.Password
											  END [Password],
			L.LoginId 
	FROM TBL_Login L LEFT JOIN TBL_SMS S 
	ON S.LoginId=L.LoginId AND L.IsDeleted=0  
	GROUP BY S.LoginId,L.EmailId, L.MobileId,L.Password, L.LoginId
	ORDER BY EmailId ASC 
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Admin_GetLoginTableByLoginView]    Script Date: 07/13/2012 18:10:27 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Admin_GetLoginTableByLoginView]
AS
BEGIN
	SELECT  L.LoginId,
			CASE ISNULL(L.EmailId,'') 
					WHEN '' THEN 'Not Applicable'
					ELSE L.EmailId
					END [EmailId],
			L.MobileId,
			CASE WHEN L.Password is null THEN 'Not Applicable'
											  ELSE L.Password
											  END [Password],
			CASE WHEN L.TransactionToken is null THEN 'Not Applicable'
											  ELSE L.TransactionToken
											  END [Token], 			
			CASE WHEN L.IsActivated=0 THEN 'Not Activated'
											  ELSE 'Activated'
											  END [ActivationStatus],
			CASE WHEN L.IsActivated=0 THEN 'DeActivate'
											  ELSE 'Activate'
											  END [IsActivated],
			CASE ((SELECT COUNT(LoginId) FROM TBL_Service WHERE LoginId=L.LoginId) +  (SELECT COUNT(LoginId) FROM TBL_Doctor WHERE LoginId=L.LoginId) +
						  (SELECT COUNT(LoginId) FROM TBL_Patient WHERE LoginId=L.LoginId) +  (SELECT COUNT(LoginId) FROM TBL_Organization WHERE LoginId=L.LoginId)) 
				 WHEN 1 THEN 'Single Profile'
				 WHEN 0 THEN 'No Profile'
				 ELSE 'Multiple Profiles'
				 END [Profile],
			
			L.CreatedOn 
			
	FROM TBL_Login L WHERE IsDeleted=0
	ORDER BY CreatedOn DESC 
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Admin_GetLoginTableDetailView]    Script Date: 07/13/2012 18:10:27 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Admin_GetLoginTableDetailView]
AS
BEGIN
	SELECT
		L.LoginId,
		CASE ISNULL(L.LastName, '')
			WHEN '' THEN L.FirstName
			ELSE
			L.FirstName + ' ' + L.LastName
			END	[UserName],
		L.MobileId,
		L.EmailId,
		L.CreatedOn [DateTime],
		[Organization] = CASE ( SELECT COUNT(LoginId) FROM TBL_Organization WHERE LoginId = L.LoginId AND IsDeleted=0)
						WHEN 0 THEN 'No'
						ELSE 'Yes'
						END,
		[Doctor] = CASE (SELECT COUNT(LoginId) FROM TBL_Doctor WHERE LoginId = L.LoginId AND IsDeleted=0)
						WHEN 0 THEN 'No'
						ELSE 'Yes'
						END,
		[Service] = CASE (SELECT COUNT(LoginId) FROM TBL_Service WHERE LoginId = L.LoginId AND IsDeleted=0)
						WHEN 0 THEN 'No'
						ELSE 'Yes'
						END,
		[Patient] = CASE (SELECT COUNT(LoginId) FROM TBL_Patient WHERE LoginId = L.LoginId AND IsDeleted=0)
						WHEN 0 THEN 'No'
						ELSE 'Yes'
						END,
		[SetUpProfile] = CASE ( SELECT COUNT(PreferredName) FROM TBL_Doctor WHERE DoctorId IN (SELECT MIN(DoctorId) FROM TBL_Doctor WHERE LoginId = L.LoginId AND IsDeleted=0) AND IsDeleted = 0)
							WHEN 0 THEN 'No'
							ELSE 'Yes'
							END,
		[SetUpScheduleDoctor] = CASE ( SELECT COUNT(DoctorTimingId) FROM TBL_Doctor_Timing WHERE DoctorId IN (SELECT DoctorId FROM TBL_Doctor WHERE LoginId = L.LoginId AND IsDeleted=0) AND IsDeleted = 0)
								WHEN 0 THEN 'No'
								ELSE 'Yes'
								END,
		[SetUpScheduleService] = CASE ( SELECT COUNT(ServiceTimingId) FROM TBL_Service_Timing WHERE ServiceId IN (SELECT ServiceId FROM TBL_Service WHERE LoginId = L.LoginId AND IsDeleted=0) AND IsDeleted = 0)
								WHEN 0 THEN 'No'
								ELSE 'Yes'
								END,
		[Verified] = CASE ( SELECT IsActivated FROM TBL_Login WHERE LoginId = L.LoginId)
						WHEN 0 THEN 'No'
						ELSE 'Yes'
						END
		
		FROM TBL_Login L WHERE IsDeleted = 0 ORDER BY L.CreatedOn DESC
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Admin_GetLoginType]    Script Date: 07/13/2012 18:10:27 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROC [dbo].[USP_Admin_GetLoginType]
AS
SELECT * FROM dbo.TBL_Admin_LoginType
GO

/****** Object:  StoredProcedure [dbo].[USP_Admin_GetLoginTypeById]    Script Date: 07/13/2012 18:10:27 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Admin_GetLoginTypeById]
AS
BEGIN
CREATE TABLE #GetLoginTypeById
	(
		Id INT,
		OrganizationId INT,
		OrganizationName NVARCHAR(1000),
		SubDomain NVARCHAR(50),
		Name NVARCHAR(250),
		IsActivated NVARCHAR(15),
		CreatedOn NVARCHAR(50),
		Type INT,
		EmailId NVARCHAR(50),
		LoginId INT
	);
	

	INSERT INTO #GetLoginTypeById
	SELECT O.OrganizationId, O.OrganizationId, O.OrganizationName, O.SubDomain, Name =O.OrganizationName + ' - ' + O.BranchName,
		   IsActivated = CASE WHEN O.IsActivated = 0 THEN 'Activate' 
							 WHEN O.IsActivated = 1 THEN 'DeActivate'
							 END,
		   CONVERT(VARCHAR, O.CreatedOn, 103), Type=1, L.EmailId, L.LoginId
	FROM TBL_Organization O, TBL_Login L
	WHERE L.LoginId=O.LoginId AND O.IsDeleted = 0


	INSERT INTO #GetLoginTypeById 
	SELECT  S.ServiceId, S.OrganizationId, OrganizationName = (SELECT O.OrganizationName + ' - ' + O.BranchName FROM TBL_Organization O WHERE O.OrganizationId=S.OrganizationId),
		    SubDomain = (SELECT SubDomain FROM TBL_Organization WHERE OrganizationId=S.OrganizationId),
		    Name=S.ServiceName,
		    IsActivated = CASE WHEN S.IsActivated = 0 THEN 'Activate' 
							 WHEN S.IsActivated = 1 THEN 'DeActivate'
							 END,
		   CONVERT(VARCHAR, S.CreatedOn, 101), Type=2, L.EmailId, L.LoginId
	FROM TBL_Service S, TBL_Login L
	WHERE L.LoginId=S.LoginId  AND S.IsDeleted = 0


	INSERT INTO #GetLoginTypeById
	SELECT D.DoctorId, D.OrganizationId, OrganizationName = (SELECT O.OrganizationName + ' - ' + O.BranchName FROM TBL_Organization O WHERE O.OrganizationId=D.OrganizationId), 
		   SubDomain = (SELECT SubDomain FROM TBL_Organization WHERE OrganizationId=D.OrganizationId),
		   Name = CASE ISNULL(D.Degrees, '')
				  WHEN '' THEN 'Dr.'+ D.DoctorName
				  ELSE 'Dr.' + D.DoctorName + ', ' + D.Degrees
				  END,
		   IsActivated = CASE WHEN D.IsActivated = 0 THEN 'Activate' 
							 WHEN D.IsActivated = 1 THEN 'DeActivate'
							 END,
		   CONVERT(VARCHAR, D.CreatedOn, 101), Type=3, L.EmailId, L.LoginId
	FROM TBL_Doctor D, TBL_Login L
	WHERE L.LoginId=D.LoginId  AND D.IsDeleted = 0


	INSERT INTO #GetLoginTypeById
	SELECT P.PatientId, 0, ' ',  Null,
					Name = P.FirstName + ' ' + P.LastName, 
					IsActivated = CASE WHEN P.IsActivated  = 0 THEN 'Activate' 
								  WHEN P.IsActivated = 1 THEN 'DeActivate'
								  END,
		   CONVERT(VARCHAR, P.CreatedOn, 101), Type=4, L.MobileId, L.LoginId
	FROM TBL_Patient P, TBL_Login L
	WHERE L.LoginId=P.LoginId  AND P.IsDeleted = 0

BEGIN	

	INSERT INTO #GetLoginTypeById
	SELECT  L.LoginId, 0, ' ', NULL,
			Name =  CASE WHEN L.LastName is null THEN L.FirstName
					ELSE L.FirstName + ' '+L.LastName
					END,
			IsActivated = CASE WHEN L.IsActivated  = 0 THEN 'Activate' 
						  WHEN L.IsActivated = 1 THEN 'DeActivate'
						  END, 
			CONVERT(VARCHAR, L.CreatedOn, 101), Type=5, L.MobileId, L.LoginId
	FROM TBL_Login L 
	WHERE L.IsDeleted = 0
END
	
SELECT DISTINCT * FROM #GetLoginTypeById  ORDER BY Name

END
GO

/****** Object:  StoredProcedure [dbo].[USP_Admin_GetOrganizationByOrganizationId]    Script Date: 07/13/2012 18:10:27 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Admin_GetOrganizationByOrganizationId] 
(
@OrganizationId INT
)
AS
BEGIN
	SELECT L.*, O.*, 
	CASE ISNULL(L.LastName, '')
		 WHEN '' THEN L.FirstName
		 ELSE L.FirstName + ' ' + L.LastName 
		 END [AdminName]		
	FROM TBL_Organization O, TBL_Login L
	WHERE O.OrganizationId = @OrganizationId AND O.LoginId = L.LoginId
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Admin_GetRemainderSMS]    Script Date: 07/13/2012 18:10:27 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Admin_GetRemainderSMS]
AS
BEGIN
	SELECT 
		AW.AppointmentId,
		
		(SELECT CASE ISNULL(P.LastName, '')
				  WHEN ' ' THEN P.FirstName
				  ELSE P.FirstName + ' ' + P.LastName
				  END 
		FROM TBL_Patient P WHERE P.PatientId=AW.PatientId)[PatientName],
		
		(SELECT D.DoctorName FROM TBL_Doctor D WHERE D.DoctorId=AW.DoctorId)[DoctorName],
		AW.DoctorTimingId,
		(SELECT ScheduleName FROM TBL_Doctor_Timing DT WHERE DT.DoctorTimingId = AW.DoctorTimingId)[DoctorScheduleName],
		
		(SELECT ServiceName FROM TBL_Service S WHERE S.ServiceId = AW.ServiceId)[ServiceName],
		
		(SELECT ScheduleName FROM TBL_Service_Timing ST WHERE ST.ServiceTimingId = AW.ServiceTimingId)[ServiceScheduleName],
		
		AW.EmailId,
		AW.MobileId,
		Convert(VARCHAR, AW.AppointmentDate, 103) [AppointmentDate],
		AW.MessageDescription,
		
		(SELECT AccountTypeName FROM TBL_Master_AccountType AT WHERE AT.AccountTypeId = AW.AccountTypeId)[AccountTypeName],
		
		CASE AW.IsSmsSent
		WHEN 1 THEN 'Yes'
		ELSE 'No'
		END [SmsSent],
		
		CASE AW.IsEmailSent
		WHEN 1 THEN 'Yes'
		ELSE 'No'
		END [EmailSent], 
		
		[Sent On] = AW.CreatedOn,
		(select status from TBL_GupShup where ExternalId=AW.ExternalId) [Status],
		(select Description from TBL_GupShup_FailureReason where KeyWord  in (select Cause from TBL_GupShup where ExternalId=AW.ExternalId)) [Reason]
	
	FROM TBL_Appointment_Winservice AW ORDER BY AW.CreatedOn DESC
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Admin_GetSearchCount]    Script Date: 07/13/2012 18:10:27 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Admin_GetSearchCount]
AS
BEGIN 
	SELECT 
		PS.SearchId,
		
		(SELECT CASE ISNULL(P.LastName, '')
				  WHEN ' ' THEN P.FirstName
				  ELSE P.FirstName + ' ' + P.LastName
				  END 
		FROM TBL_Patient P WHERE P.PatientId=PS.PatientId)[PatientName],

		ps.SearchCount,

		PS.CountryName,
		
		CASE ISNULL(PS.StateName, '') 
		WHEN '' THEN '--'
		ELSE PS.StateName
		END [StateName],
		
		CASE ISNULL(PS.Cityname, '') 
		WHEN '' THEN '--'
		ELSE PS.Cityname
		END [Cityname],

		CASE PS.SpecialityType
		WHEN 0 THEN PS.Speciality + ' (Speciality)'
		ELSE PS.Speciality + ' (Symptom)'
		END [Department],

		CASE PS.SearchType
		WHEN 0 THEN 'Search By Doctor / Service'
		ELSE 'Search By Hospital'
		END [Hospital],
		
		(SELECT MobileId FROM TBL_Login WHERE LoginId IN (SELECT LoginId FROM TBL_Patient WHERE PatientId = PS.PatientId)) [EmailId],
		
		PS.PatientId [Id],
		
		Type=4,
		
		OrganizationId=0,		

		[CreatedOn] = CONVERT(VARCHAR, PS.CreatedOn, 106)
		
	FROM TBL_Patient_SearchCount PS, TBL_Patient P
	WHERE PS.PatientId = P.PatientId 
	ORDER BY PS.CreatedOn DESC
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Admin_GetSMSDetails]    Script Date: 07/13/2012 18:10:27 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Admin_GetSMSDetails]
(
@LoginId INT,
@AccountTypeId INT
)
AS
BEGIN
	SELECT S.CreatedOn, S.Action, S.SMSMessage,
	(select Description from TBL_GupShup_FailureReason where KeyWord  in (select Cause from TBL_GupShup where ExternalId=s.ExternalId)) [Reason] 
	FROM TBL_SMS S WHERE	S.LoginId=@LoginId AND AccountTypeId = @AccountTypeId
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Admin_GetSMSIndividual]    Script Date: 07/13/2012 18:10:27 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Admin_GetSMSIndividual]
aS
select 
	(select CASE WHEN L.LastName is null THEN L.FirstName
					ELSE L.FirstName + ' '+L.LastName
					END from TBL_Login L where LoginId=s.LoginId) [Name],
	(select EmailId from TBL_Login where LoginId=s.LoginId) [Email],
	s.Mobile,
	(select AccountTypeName from TBL_Master_AccountType where AccountTypeId=s.AccountTypeId) [Account],
	s.Action,
	s.SMSMessage,
	s.CreatedOn,
	(select TOP 1 status from TBL_GupShup where ExternalId=s.ExternalId) [Status],
	(select TOP 1 Cause from TBL_GupShup where ExternalId=s.ExternalId) + ': ' + (select Description from TBL_GupShup_FailureReason where KeyWord in (select TOP 1 Cause from TBL_GupShup where ExternalId=s.ExternalId)) [Reason]
	
from TBL_SMS s WHERE EmailCount IS NULL order by CreatedOn desc
GO

/****** Object:  StoredProcedure [dbo].[USP_Admin_GetSymptom]    Script Date: 07/13/2012 18:10:27 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Admin_GetSymptom]
AS
BEGIN
	SELECT SymptomId, Symptom, Description, IsDeleted, [DeleteName] = CASE 
															WHEN IsDeleted = 0 THEN 'Delete'
															ELSE 'Undelete'
															END
	 FROM TBL_Master_Symptom 
	 WHERE IsDeleted = 0 AND IsTreatment = 0
	 ORDER BY Symptom ASC
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Admin_GetTreatmentByDepartmentId]    Script Date: 07/13/2012 18:10:27 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Admin_GetTreatmentByDepartmentId]
(
@DepartmentId INT
)
AS
SELECT 
	DD.DiagnosisId [DiagnosisId],
	D.Diagnosis [Diagnosis]
FROM 
	TBL_Diagnosis_Department DD, 
	dbo.TBL_Master_Diagnosis D
WHERE 
	DD.DepartmentId=@DepartmentId AND  
	DD.DiagnosisId=D.DiagnosisId  AND D.IsDeleted = 0 AND D.IsTreatment = 1
GO

/****** Object:  StoredProcedure [dbo].[USP_Admin_InsertDepartment]    Script Date: 07/13/2012 18:10:28 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Admin_InsertDepartment] 
(
@DepartmentId INT,
@DepartmentName NVARCHAR(MAX),
@Description NVARCHAR(MAX)
)
AS
BEGIN
IF(@DepartmentId = 0)
BEGIN
	IF((SELECT COUNT(DepartmentId) FROM TBL_Master_Department WHERE DepartmentName=@DepartmentName AND IsDeleted=0) = 0)
		INSERT INTO TBL_Master_Department VALUES (@DepartmentName, @Description, 0, 1, GETDATE(), 0) 
	ELSE
		SELECT 0
END
ELSE
	UPDATE TBL_Master_Department SET DepartmentName = @DepartmentName, Description=@Description WHERE DepartmentId=@DepartmentId
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Admin_InsertDiagnosis]    Script Date: 07/13/2012 18:10:28 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Admin_InsertDiagnosis] 
(
@DiagnosisId INT,
@Diagnosis NVARCHAR(MAX),
@Description NVARCHAR(MAX)
)
AS
BEGIN
IF(@DiagnosisId = 0)
BEGIN
	IF((SELECT COUNT(DiagnosisId) FROM TBL_Master_Diagnosis WHERE Diagnosis=@Diagnosis AND IsTreatment = 0 AND IsDeleted = 0) = 0)
		INSERT INTO TBL_Master_Diagnosis VALUES (@Diagnosis, @Description, 1, 1, GETDATE(), NULL, 0, 0) 
END
ELSE
	UPDATE TBL_Master_Diagnosis SET Diagnosis = @Diagnosis, Description=@Description, ModifiedOn = GETDATE() WHERE DiagnosisId=@DiagnosisId
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Admin_InsertSymptom]    Script Date: 07/13/2012 18:10:28 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Admin_InsertSymptom] 
(
@SymptomId INT,
@Symptom NVARCHAR(MAX),
@Description NVARCHAR(MAX)
)
AS
BEGIN
IF(@SymptomId = 0)
BEGIN
	IF((SELECT COUNT(SymptomId) FROM TBL_Master_Symptom WHERE Symptom=@Symptom AND IsTreatment = 0 AND IsDeleted = 0) = 0)
		INSERT INTO TBL_Master_Symptom VALUES (1, @Symptom, @Description, 1, 1, GETDATE(), NULL, 0, 0) 
END
ELSE
	UPDATE TBL_Master_Symptom SET Symptom = @Symptom, Description=@Description WHERE SymptomId=@SymptomId
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Admin_InsertTreatment]    Script Date: 07/13/2012 18:10:28 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Admin_InsertTreatment] 
(
@DepartmentId INT,
@TreatmentName NVARCHAR(MAX)
)
AS
BEGIN

DECLARE @NewSymptomId INT
DECLARE @NewDiagnosisId INT

IF((SELECT COUNT(SymptomId) FROM TBL_Master_Symptom WHERE Symptom=@TreatmentName AND IsTreatment = 1 AND IsDeleted = 0) = 0)
BEGIN
	IF((SELECT COUNT(DiagnosisId) FROM TBL_Master_Diagnosis WHERE Diagnosis=@TreatmentName AND IsTreatment = 1 AND IsDeleted = 0) = 0)
	BEGIN
		INSERT INTO TBL_Master_Symptom VALUES (1, @TreatmentName, @TreatmentName, 1, 1, GETDATE(), NULL, 0, 1) 
		SET @NewSymptomId=@@IDENTITY
		
		INSERT INTO TBL_Master_Diagnosis VALUES (@TreatmentName, @TreatmentName, 1, 1, GETDATE(), NULL, 0, 1)
		SET @NewDiagnosisId=@@IDENTITY
		
		INSERT INTO TBL_Symptom_Diagnosis (SymptomId, DiagnosisId) VALUES (@NewSymptomId, @NewDiagnosisId)
		INSERT INTO TBL_Diagnosis_Department (DiagnosisId, DepartmentId) VALUES (@NewDiagnosisId, @DepartmentId)
		
		INSERT INTO  TBL_Doctor_Diagnosis (DoctorId, DiagnosisId) 
					 SELECT DoctorId, @NewDiagnosisId FROM TBL_Doctor where DepartmentId=@DepartmentId AND IsDeleted=0
		
		INSERT INTO  TBL_Service_Diagnosis (ServiceId, DiagnosisId) 
					 SELECT ServiceId, @NewDiagnosisId FROM TBL_Service where DepartmentId=@DepartmentId AND IsDeleted=0
	END
END

END
GO

/****** Object:  StoredProcedure [dbo].[USP_Admin_NoProfile]    Script Date: 07/13/2012 18:10:28 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Admin_NoProfile]
AS
BEGIN
	SELECT 
	L.LoginId,
	L.FirstName,
	L.LastName,
	L.MobileId,
	L.EmailId,
	(SELECT CountryName FROM TBL_GeoPostcodes_Country WHERE CountryId = L.CountryId)[CountryName]
	FROM TBL_Login L WHERE IsActivated = 1 AND NOT EXISTS (SELECT * FROM TBL_Doctor WHERE TBL_Doctor.LoginId = L.LoginId  AND IsDeleted = 0) 
	AND NOT EXISTS (SELECT * FROM TBL_Service WHERE TBL_Service.LoginId = L.LoginId AND IsDeleted = 0)
	AND NOT EXISTS (SELECT * FROM TBL_Patient WHERE TBL_Patient.LoginId = L.LoginId AND IsDeleted = 0) 
	AND NOT EXISTS (SELECT * FROM TBL_Organization WHERE TBL_Organization.LoginId = L.LoginId AND IsDeleted = 0) ORDER BY L.CreatedOn DESC
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Admin_OrganizationNoDoctors]    Script Date: 07/13/2012 18:10:28 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Admin_OrganizationNoDoctors]
AS
DECLARE @CountDoctor INT
BEGIN 
	SELECT 
		[OrganizationName] = O.OrganizationName + ' (' + O.BranchName + ')', 
		[Address] = O.Address,
		[Country] = (SELECT CountryName FROM TBL_GeoPostcodes_Country WHERE CountryId = O.CountryId),
		[State] = (SELECT StateName FROM TBL_GeoPostcodes_State WHERE StateId  = O.StateId),
		[City] = (SELECT CityName FROM TBL_GeoPostcodes_City WHERE CityId = O.CityId),
		O.Mobile,
		[EmailId] = (SELECT EmailId FROM TBL_Login WHERE LoginId = O.LoginId),
		O.OrganizationId
	FROM TBL_Organization O WHERE IsActivated = 1 AND IsDeleted = 0 AND NOT EXISTS (SELECT * FROM TBL_Doctor WHERE TBL_Doctor.OrganizationId = O.OrganizationId AND IsDeleted = 0)
	AND NOT EXISTS (SELECT * FROM TBL_Service WHERE TBL_Service.OrganizationId = O.OrganizationId AND IsDeleted = 0)
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Admin_SelectAccountbyLoginId]    Script Date: 07/13/2012 18:10:28 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Admin_SelectAccountbyLoginId] 
(
@LoginId INT
)
AS
BEGIN
--selecting login patient

SELECT * FROM TBL_Token WHERE AppointmentId IN (SELECT AppointmentId FROM TBL_Appointment WHERE PatientId IN(SELECT PatientId FROM TBL_Patient WHERE LoginId = @LoginId))

SELECT * FROM TBL_Appointment WHERE PatientId IN (SELECT PatientId FROM TBL_Patient WHERE LoginId= @LoginId)
	
		--selecting patient history
SELECT * FROM TBL_Patient_PastHistory WHERE PatientId IN (SELECT PatientId FROM TBL_Patient WHERE LoginId= @LoginId)

SELECT * FROM TBL_Patient_PersonalHistory WHERE PatientId IN (SELECT PatientId FROM TBL_Patient WHERE LoginId= @LoginId)

SELECT * FROM TBL_Patient_FamilyHistory WHERE PatientId IN (SELECT PatientId FROM TBL_Patient WHERE LoginId= @LoginId)

		--selecting members history
SELECT * FROM TBL_Patient_PastHistory WHERE PatientId IN (SELECT PatientId FROM TBL_Patient WHERE ParentId IN (SELECT PatientId FROM TBL_Patient WHERE LoginId= @LoginId))

SELECT * FROM TBL_Patient_PersonalHistory WHERE PatientId IN (SELECT PatientId FROM TBL_Patient WHERE ParentId IN (SELECT PatientId FROM TBL_Patient WHERE LoginId= @LoginId))

SELECT * FROM TBL_Patient_FamilyHistory WHERE PatientId IN (SELECT PatientId FROM TBL_Patient WHERE ParentId IN (SELECT PatientId FROM TBL_Patient WHERE LoginId= @LoginId))

SELECT * FROM TBL_Patient WHERE ParentId IN (SELECT PatientId FROM TBL_Patient WHERE LoginId= @LoginId)

SELECT * FROM TBL_Patient WHERE LoginId = @LoginId

--selecting login service

SELECT * FROM TBL_Token WHERE AppointmentId IN (SELECT AppointmentId FROM TBL_Appointment WHERE ServiceTimingId IN(
												SELECT ServiceTimingId FROM TBL_Service_Timing WHERE ServiceId IN (
												SELECT ServiceId FROM TBL_Service WHERE LoginId = @LoginId)))										

SELECT * FROM TBL_Appointment WHERE ServiceTimingId IN (SELECT ServiceTimingId FROM TBL_Service_Timing WHERE ServiceId IN (
												SELECT ServiceId FROM TBL_Service WHERE LoginId = @LoginId))

SELECT * FROM TBL_BlockCalendar WHERE ServiceId IN (SELECT ServiceId FROM TBL_Service WHERE LoginId = @LoginId)

SELECT * FROM TBL_Service_Timing WHERE ServiceId IN (SELECT ServiceId FROM TBL_Service WHERE LoginId = @LoginId)

SELECT * FROM TBL_Service WHERE LoginId =@LoginId

--selecting login doctor

SELECT * FROM TBL_Token WHERE AppointmentId IN (SELECT AppointmentId FROM TBL_Appointment WHERE DoctorTimingId IN(
												SELECT DoctorTimingId FROM TBL_Doctor_Timing WHERE DoctorId IN (
												SELECT DoctorId FROM TBL_Doctor WHERE LoginId = @LoginId)))

SELECT * FROM TBL_Appointment WHERE DoctorTimingId IN (SELECT DoctorTimingId FROM TBL_Doctor_Timing WHERE DoctorId IN (
												SELECT DoctorId FROM TBL_Doctor WHERE LoginId = @LoginId))
												
SELECT * FROM TBL_BlockCalendar WHERE DoctorId IN (SELECT DoctorId FROM TBL_Doctor WHERE LoginId = @LoginId)

SELECT * FROM TBL_Doctor_Timing WHERE DoctorId IN (SELECT DoctorId FROM TBL_Doctor WHERE LoginId = @LoginId)

SELECT * FROM TBL_Doctor WHERE LoginId = @LoginId

--selecting login organization
	
		--selecting service who is in this login organization 

SELECT * FROM TBL_Token WHERE AppointmentId IN (SELECT AppointmentId FROM TBL_Appointment WHERE ServiceTimingId IN(
												SELECT ServiceTimingId FROM TBL_Service_Timing WHERE ServiceId IN (
												SELECT ServiceId FROM TBL_Service WHERE OrganizationId IN ( SELECT OrganizationId FROM TBL_Organization WHERE LoginId = @LoginId))))

SELECT * FROM TBL_Appointment WHERE ServiceTimingId IN (SELECT ServiceTimingId FROM TBL_Service_Timing WHERE ServiceId IN (
												SELECT ServiceId FROM TBL_Service WHERE OrganizationId IN ( SELECT OrganizationId FROM TBL_Organization WHERE LoginId = @LoginId)))

SELECT * FROM TBL_BlockCalendar WHERE ServiceId IN (SELECT ServiceId FROM TBL_Service WHERE OrganizationId IN ( SELECT OrganizationId FROM TBL_Organization WHERE LoginId = @LoginId))

SELECT * FROM TBL_Service_Timing WHERE ServiceId IN (SELECT ServiceId FROM TBL_Service WHERE OrganizationId IN ( SELECT OrganizationId FROM TBL_Organization WHERE LoginId = @LoginId))

SELECT * FROM TBL_Service WHERE OrganizationId IN ( SELECT OrganizationId FROM TBL_Organization WHERE LoginId = @LoginId)

			--selecting doctor who is in this login organization 
			
SELECT * FROM TBL_Token WHERE AppointmentId IN (SELECT AppointmentId FROM TBL_Appointment WHERE DoctorTimingId IN(
												SELECT DoctorTimingId FROM TBL_Doctor_Timing WHERE DoctorId IN (
												SELECT DoctorId FROM TBL_Doctor WHERE OrganizationId IN ( SELECT OrganizationId FROM TBL_Organization WHERE LoginId = @LoginId))))
												

SELECT * FROM TBL_Appointment WHERE DoctorTimingId IN (SELECT DoctorTimingId FROM TBL_Doctor_Timing WHERE DoctorId IN (
												SELECT DoctorId FROM TBL_Doctor WHERE OrganizationId IN ( SELECT OrganizationId FROM TBL_Organization WHERE LoginId = @LoginId)))

SELECT * FROM TBL_BlockCalendar WHERE DoctorId IN (SELECT DoctorId FROM TBL_Doctor WHERE OrganizationId IN ( SELECT OrganizationId FROM TBL_Organization WHERE LoginId = @LoginId))

SELECT * FROM TBL_Doctor_Timing WHERE DoctorId IN (SELECT DoctorId FROM TBL_Doctor WHERE OrganizationId IN ( SELECT OrganizationId FROM TBL_Organization WHERE LoginId = @LoginId))

SELECT * FROM TBL_Doctor WHERE OrganizationId IN ( SELECT OrganizationId FROM TBL_Organization WHERE LoginId = @LoginId)

SELECT * FROM TBL_Organization WHERE LoginId = @LoginId

--selecing login

SELECT * FROM TBL_Login WHERE LoginId = @LoginId	

END
GO

/****** Object:  StoredProcedure [dbo].[USP_Admin_UpdateHospitalActivation]    Script Date: 07/13/2012 18:10:28 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Admin_UpdateHospitalActivation] 
(
@OrganizationId INT
)
AS
BEGIN 
	UPDATE TBL_Organization SET IsActivated=1 WHERE OrganizationId=@OrganizationId
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Admin_UpdateIsDeleteLoginById]    Script Date: 07/13/2012 18:10:28 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Admin_UpdateIsDeleteLoginById] 
(
@Id INT
) 
AS
BEGIN

UPDATE TBL_Login SET IsDeleted = 1
		 FROM TBL_Login WHERE LoginId=@Id  AND IsDeleted = 0
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Appointment_DeleteBlockCalendarById]    Script Date: 07/13/2012 18:10:28 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Appointment_DeleteBlockCalendarById]
(
	@BlockId INT
)
AS
BEGIN
	UPDATE TBL_BlockCalendar SET IsDeleted = 1 WHERE BlockId = @BlockId
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Appointment_GetAppointmentCountByDoctorId]    Script Date: 07/13/2012 18:10:28 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Appointment_GetAppointmentCountByDoctorId]
(
	@DoctorId INT
)
AS
BEGIN
	SELECT COUNT(DoctorId) FROM TBL_Appointment WHERE DoctorId = @DoctorId
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Appointment_GetAppointmentCountByServiceId]    Script Date: 07/13/2012 18:10:28 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Appointment_GetAppointmentCountByServiceId]
(
	@ServiceId INT
)
AS
BEGIN
	SELECT COUNT(ServiceId) FROM TBL_Appointment WHERE ServiceId = @ServiceId
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Appointment_GetAppointmentHistory]    Script Date: 07/13/2012 18:10:28 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Appointment_GetAppointmentHistory] 
(
	@OrganizationId INT,
	@Type INT,
	@Id INT,
	@AppointmentFromDate VARCHAR(10),
	@AppointmentToDate VARCHAR(10)
)
AS
BEGIN
	IF (@Type = 0)
		SELECT
			A.AppointmentId,
			P.PatientId,
			T.TokenSequence,
			[Patient] = CASE
				WHEN P.ParentId=0 THEN P.FirstName + ' ' + ISNULL(P.LastName, '')
				WHEN P.ParentId>0 THEN P.FirstName + ' ' + ISNULL(P.LastName, '') + ' via ' + (SELECT FirstName + ' ' + LastName FROM TBL_Patient WHERE PatientId=P.ParentId)
				END,
			P.DateofBirth,
			'' [Age],
			A.AppointmentDate,
			A.AppointmentTime,
			[AppointmentDateTime]=A.AppointmentDate + ' '  +  CASE ISNULL(A.AppointmentTime,'')
																WHEN '' then (SELECT EndTime FROM TBL_Doctor_Timing WHERE DoctorTimingId = A.DoctorTimingId)
																ELSE ''
																END,
			[Timing] = CASE
				WHEN LEN(DT.Address) > 0 THEN DT.StartTime + ' - ' + DT.EndTime + ' -> ' + DT.Address
				WHEN LEN(DT.Address) = 0 THEN DT.StartTime + ' - ' + DT.EndTime + ' -> ' + O.OrganizationName + ' - ' + O.Address + ' - ' + O.BranchName
			END,
			ISNULL(A.PreferentialId, 0) [Preferential],
			A.IsCarParking,
			A.CarNumber,
			A.DoctorClosingNotes,
			Notes = CASE WHEN A.Notes = ' ' THEN 'Not Applicable'
						   ELSE A.Notes	
						   END,
			A.IsDirectAppointment,
			A.StatusId,
			(SELECT StatusName FROM TBL_Master_Status WHERE StatusId=A.StatusId) [Status],
			A.IsDeleted,
			O.OrganizationId,
			ScheduleEndTime = (SELECT EndTime FROM TBL_Doctor_Timing WHERE DoctorTimingId = A.DoctorTimingId)
		FROM
			TBL_Appointment A,
			TBL_Token T,
			TBL_Doctor_Timing DT,
			TBL_Patient P,
			TBL_Organization O
		WHERE
			A.OrganizationId=@OrganizationId AND
			A.OrganizationId=O.OrganizationId AND
			A.DoctorId=@Id AND
			A.AppointmentDate BETWEEN @AppointmentFromDate AND @AppointmentToDate AND
			A.AppointmentId=T.AppointmentId AND
			A.DoctorTimingId=DT.DoctorTimingId AND
			A.PatientId=P.PatientId
			ORDER BY T.TokenId
	ELSE
		SELECT
			A.AppointmentId,
			P.PatientId,
			T.TokenSequence,
			[Patient] = CASE
				WHEN P.ParentId=0 THEN P.FirstName + ' ' + ISNULL(P.LastName, '')
				WHEN P.ParentId>0 THEN P.FirstName + ' ' + ISNULL(P.LastName, '') + ' via ' + (SELECT FirstName + ' ' + LastName FROM TBL_Patient WHERE PatientId=P.ParentId)
				END,
			P.DateofBirth,
			'' [Age],
			A.AppointmentDate,
			A.AppointmentTime,
			[AppointmentDateTime]=A.AppointmentDate + ' '  +  CASE ISNULL(A.AppointmentTime,'')
																WHEN '' then (SELECT EndTime FROM TBL_Service_Timing WHERE ServiceTimingId = A.ServiceTimingId)
																ELSE ''
																END,
			[Timing] = CASE
				WHEN LEN(ST.Address) > 0 THEN ST.StartTime + ' - ' + ST.EndTime + ' - ' + ST.Address
				WHEN LEN(ST.Address) = 0 THEN ST.StartTime + ' - ' + ST.EndTime + ' - ' + O.OrganizationName + ' - ' + O.Address + ' - ' + O.BranchName
			END,
			ISNULL(A.PreferentialId, 0) [Preferential],
			A.IsCarParking,
			A.CarNumber,
			A.DoctorClosingNotes,
			Notes = CASE WHEN A.Notes = ' ' THEN 'Not Applicable'
						   ELSE A.Notes	
						   END,
			A.IsDirectAppointment,
			A.StatusId,
			(SELECT StatusName FROM TBL_Master_Status WHERE StatusId=A.StatusId) [Status],
			A.IsDeleted,
			O.OrganizationId,
			ScheduleEndTime = (SELECT EndTime FROM TBL_Service_Timing WHERE ServiceTimingId = A.ServiceTimingId)
		FROM
			TBL_Appointment A,
			TBL_Token T,
			TBL_Service_Timing ST,
			TBL_Patient P,
			TBL_Organization O
		WHERE
			A.OrganizationId=@OrganizationId AND
			A.OrganizationId=O.OrganizationId AND
			A.ServiceId=@Id AND
			A.AppointmentDate BETWEEN @AppointmentFromDate AND @AppointmentToDate AND
			A.AppointmentId=T.AppointmentId AND
			A.ServiceTimingId=ST.ServiceTimingId AND
			A.PatientId=P.PatientId 
		ORDER BY T.TokenId
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Appointment_GetAppointmentHistoryFilter]    Script Date: 07/13/2012 18:10:28 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Appointment_GetAppointmentHistoryFilter]
(
	@PatientId INT,
	@Type INT,
	@Id INT,
	@AppointmentFromDate VARCHAR(10),
	@AppointmentToDate VARCHAR(10)
)
AS
BEGIN
	IF (@Type = 0)
		SELECT
			A.AppointmentId,
			P.PatientId,
			A.OrganizationId,
			T.TokenSequence,
			[Patient] = CASE
				WHEN P.ParentId=0 THEN P.FirstName + ' ' + ISNULL(P.LastName, '')
				WHEN P.ParentId>0 THEN P.FirstName + ' ' + ISNULL(P.LastName, '') + ' via ' + (SELECT FirstName + ' ' + LastName FROM TBL_Patient WHERE PatientId=P.ParentId)
				END,
			P.DateofBirth,
			'' [Age],
			A.AppointmentDate,
			A.AppointmentTime,
			[AppointmentDateTime]=A.AppointmentDate + ' '  +  CASE ISNULL(A.AppointmentTime,'')
																WHEN '' then (SELECT EndTime FROM TBL_Doctor_Timing WHERE DoctorTimingId = A.DoctorTimingId)
																ELSE ''
																END,
			[Timing] = CASE
				WHEN LEN(DT.Address) > 0 THEN DT.StartTime + ' - ' + DT.EndTime + ' -> ' + DT.Address
				WHEN LEN(DT.Address) = 0 THEN DT.StartTime + ' - ' + DT.EndTime + ' -> ' + (SELECT O.BranchName FROM TBL_Organization O WHERE O.OrganizationId=A.OrganizationId)
			END,
			ISNULL(A.PreferentialId, 0) [Preferential],
			A.IsCarParking,
			A.CarNumber,
			A.DoctorClosingNotes,
			Notes = CASE WHEN A.Notes = ' ' THEN 'Not Applicable'
						   ELSE A.Notes	
						   END,
			A.IsDirectAppointment,
			A.StatusId,
			(SELECT StatusName FROM TBL_Master_Status WHERE StatusId=A.StatusId) [Status],
			A.IsDeleted,
			ScheduleEndTime = (SELECT EndTime FROM TBL_Doctor_Timing WHERE DoctorTimingId = A.DoctorTimingId)
		FROM
			TBL_Appointment A,
			TBL_Token T,
			TBL_Doctor_Timing DT,
			TBL_Patient P
		WHERE
			A.DoctorId=@Id AND
			A.AppointmentDate BETWEEN @AppointmentFromDate AND @AppointmentToDate AND
			A.AppointmentId=T.AppointmentId AND
			A.DoctorTimingId=DT.DoctorTimingId AND
			P.PatientId=@PatientId AND
			A.PatientId=P.PatientId			
		ORDER BY T.TokenId
	ELSE
		SELECT
			A.AppointmentId,
			P.PatientId,
			A.OrganizationId,
			T.TokenSequence,
			[Patient] = CASE
				WHEN P.ParentId=0 THEN P.FirstName + ' ' + ISNULL(P.LastName, '')
				WHEN P.ParentId>0 THEN P.FirstName + ' ' + ISNULL(P.LastName, '') + ' via ' + (SELECT FirstName + ' ' + LastName FROM TBL_Patient WHERE PatientId=P.ParentId)
				END,
			P.DateofBirth,
			'' [Age],
			A.AppointmentDate,
			A.AppointmentTime,
			[AppointmentDateTime]=A.AppointmentDate + ' '  +  CASE ISNULL(A.AppointmentTime,'')
																WHEN '' then (SELECT EndTime FROM TBL_Service_Timing WHERE ServiceTimingId = A.ServiceTimingId)
																ELSE ''
																END,
			[Timing] = CASE
				WHEN LEN(ST.Address) > 0 THEN ST.StartTime + ' - ' + ST.EndTime + ' - ' + ST.Address
				WHEN LEN(ST.Address) = 0 THEN ST.StartTime + ' - ' + ST.EndTime + ' - ' + (SELECT O.BranchName FROM TBL_Organization O WHERE O.OrganizationId=A.OrganizationId)
			END,
			ISNULL(A.PreferentialId, 0) [Preferential],
			A.IsCarParking,
			A.CarNumber,
			A.DoctorClosingNotes,
			Notes = CASE WHEN A.Notes = ' ' THEN 'Not Applicable'
						   ELSE A.Notes	
						   END,
			A.IsDirectAppointment,
			A.StatusId,
			(SELECT StatusName FROM TBL_Master_Status WHERE StatusId=A.StatusId) [Status],
			A.IsDeleted,
			ScheduleEndTime = (SELECT EndTime FROM TBL_Service_Timing WHERE ServiceTimingId = A.ServiceTimingId)
		FROM
			TBL_Appointment A,
			TBL_Token T,
			TBL_Service_Timing ST,
			TBL_Patient P
		WHERE
			A.ServiceId=@Id AND
			A.AppointmentDate BETWEEN @AppointmentFromDate AND @AppointmentToDate AND
			A.AppointmentId=T.AppointmentId AND
			A.ServiceTimingId=ST.ServiceTimingId AND
			A.PatientId=@PatientId AND
			A.PatientId=P.PatientId 
		ORDER BY T.TokenId
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Appointment_GetAppointmentsCount]    Script Date: 07/13/2012 18:10:28 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Appointment_GetAppointmentsCount]
(
	@TimingId INT,
	@Type INT,
	@CurrentDate VARCHAR(15)
)
AS
BEGIN
DECLARE @MaxApps INT
DECLARE @CountApps INT

IF @Type = 0
BEGIN
	SELECT @CountApps=COUNT(*) FROM TBL_Appointment WHERE DoctorTimingId=@TimingId AND CONVERT(VARCHAR,AppointmentDate,103)=@CurrentDate AND StatusId<>5 AND IsDeleted=0
	SELECT @MaxApps=MaxApps FROM TBL_Doctor_Timing WHERE DoctorTimingId=@TimingId AND IsDeleted=0
END
ELSE
BEGIN
	SELECT @CountApps=COUNT(*) FROM TBL_Appointment WHERE ServiceTimingId=@TimingId AND CONVERT(VARCHAR,AppointmentDate,103)=@CurrentDate AND StatusId<>5 AND IsDeleted=0
	SELECT @MaxApps=MaxApps FROM TBL_Service_Timing WHERE ServiceTimingId=@TimingId AND IsDeleted=0
END

IF @CountApps>=@MaxApps
	SELECT 0
ELSE
	SELECT 1

END
GO

/****** Object:  StoredProcedure [dbo].[USP_Appointment_GetAvailableDoctorTimingById]    Script Date: 07/13/2012 18:10:29 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Appointment_GetAvailableDoctorTimingById] 
(
	@DoctorTimingId INT,
	@ActualTime DateTime
)
AS
BEGIN

	DECLARE @IsFound INT

	SELECT @IsFound=COUNT(*) FROM
		TBL_Doctor_Timing
	WHERE
		DoctorTimingId=@DoctorTimingId AND
		((DATEPART(weekday, @ActualTime)=1 AND Sunday=1) OR
		(DATEPART(weekday, @ActualTime)=2 AND Monday=1) OR
		(DATEPART(weekday, @ActualTime)=3 AND Tuesday=1) OR
		(DATEPART(weekday, @ActualTime)=4 AND Wednesday=1) OR
		(DATEPART(weekday, @ActualTime)=5 AND Thursday=1) OR
		(DATEPART(weekday, @ActualTime)=6 AND Friday=1) OR
		(DATEPART(weekday, @ActualTime)=7 AND Saturday=1))

	IF @IsFound>0
		SELECT DT.StartTime, DT.EndTime, O.MaxAppointmentDays, DT.PatientDuration, DT.Conditions FROM
		TBL_Doctor_Timing DT,
		TBL_Doctor D,
		TBL_Organization O
		WHERE
		DT.DoctorTimingId=@DoctorTimingId AND
		D.DoctorId=DT.DoctorId AND
		O.OrganizationId=D.OrganizationId
	ELSE
		SELECT DT.StartTime, DT.EndTime, O.MaxAppointmentDays, DT.PatientDuration, DT.Conditions FROM
		TBL_Doctor_Timing DT,
		TBL_Doctor D,
		TBL_Organization O
		WHERE
		DT.DoctorTimingId=-1
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Appointment_GetAvailableServiceTimingById]    Script Date: 07/13/2012 18:10:29 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Appointment_GetAvailableServiceTimingById]
(
	@ServiceTimingId INT,
	@ActualTime DateTime
)
AS
BEGIN

	DECLARE @IsFound INT

	SELECT @IsFound=COUNT(*) FROM
		TBL_Service_Timing
	WHERE
		ServiceTimingId=@ServiceTimingId AND
		((DATEPART(weekday, @ActualTime)=1 AND Sunday=1) OR
		(DATEPART(weekday, @ActualTime)=2 AND Monday=1) OR
		(DATEPART(weekday, @ActualTime)=3 AND Tuesday=1) OR
		(DATEPART(weekday, @ActualTime)=4 AND Wednesday=1) OR
		(DATEPART(weekday, @ActualTime)=5 AND Thursday=1) OR
		(DATEPART(weekday, @ActualTime)=6 AND Friday=1) OR
		(DATEPART(weekday, @ActualTime)=7 AND Saturday=1))

	IF @IsFound>0
		SELECT ST.StartTime, ST.EndTime, O.MaxAppointmentDays, ST.PatientDuration, ST.Conditions FROM
			TBL_Service_Timing ST,
			TBL_Service S,
			TBL_Organization O
		WHERE
			ST.ServiceTimingId=@ServiceTimingId AND
			S.ServiceId=ST.ServiceId AND
			O.OrganizationId=S.OrganizationId
	ELSE
		SELECT ST.StartTime, ST.EndTime, O.MaxAppointmentDays, ST.PatientDuration, ST.Conditions FROM
			TBL_Service_Timing ST,
			TBL_Service S,
			TBL_Organization O
		WHERE
			ST.ServiceTimingId=-1
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Appointment_GetBlockCalendarDates]    Script Date: 07/13/2012 18:10:29 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Appointment_GetBlockCalendarDates] 
(
	@TimingId INT,
	@BlockTypeId INT,
	@Type BIT
)
AS
BEGIN
	IF @Type = 0
		SELECT BlockStart, BlockEnd
		 FROM TBL_BlockCalendar WHERE DoctorTimingId=@TimingId and BlockTypeId=@BlockTypeId and BlockStart < getdate()+31 and IsDeleted = 0
	ELSE
		SELECT BlockStart, BlockEnd
	     FROM TBL_BlockCalendar WHERE ServiceTimingId=@TimingId and BlockTypeId=@BlockTypeId and BlockStart < getdate()+31 and IsDeleted = 0
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Appointment_GetBlockCalendarDatesByDoctorServiceId]    Script Date: 07/13/2012 18:10:29 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Appointment_GetBlockCalendarDatesByDoctorServiceId] 
(
	@Id INT,
	@TimingId INT,
	@BlockTypeId INT,
	@Type BIT
)
AS
BEGIN
	IF @Type = 0
		SELECT BlockStart, BlockEnd
		 FROM TBL_BlockCalendar WHERE DoctorId=@Id and DoctorTimingId=@TimingId and BlockTypeId=@BlockTypeId and IsDeleted = 0
	ELSE
		SELECT BlockStart, BlockEnd
	     FROM TBL_BlockCalendar WHERE ServiceId=@Id and ServiceTimingId=@TimingId and BlockTypeId=@BlockTypeId and IsDeleted = 0
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Appointment_GetDeletedBlockCalendarDates]    Script Date: 07/13/2012 18:10:29 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Appointment_GetDeletedBlockCalendarDates] 
(
	@BlockId INT
)
AS
BEGIN
	IF((SELECT DoctorId FROM TBL_BlockCalendar WHERE BlockId=@BlockId) > 0)
	BEGIN
		SELECT A.*,B.*,DT.* FROM TBL_Appointment A, TBL_BlockCalendar B, TBL_Doctor_Timing DT
				   WHERE B.BlockId=@BlockId AND DT.DoctorTimingId=B.DoctorTimingId AND B.DoctorId = A.DoctorId AND B.DoctorTimingId =A.DoctorTimingId AND A.AppointmentTime LIKE 'Waiting%' AND A.IsDeleted = 0  AND CONVERT(VARCHAR, A.AppointmentDate, 101) BETWEEN 
				   CONVERT(VARCHAR, B.BlockStart, 101) AND CONVERT(VARCHAR, B.BlockEnd, 101)  
				   ORDER BY A.AppointmentDate, A.AppointmentTime 
	END
	ELSE
	BEGIN
		SELECT A.*,B.*,ST.* FROM TBL_Appointment A, TBL_BlockCalendar B, TBL_Service_Timing ST
				   WHERE B.BlockId=@BlockId AND ST.ServiceTimingId=B.ServiceTimingId AND B.ServiceId = A.ServiceId AND B.ServiceTimingId =A.ServiceTimingId AND A.AppointmentTime LIKE 'Waiting%' AND A.IsDeleted = 0  AND CONVERT(VARCHAR, A.AppointmentDate, 101) BETWEEN 
				   CONVERT(VARCHAR, B.BlockStart, 101) AND CONVERT(VARCHAR, B.BlockEnd, 101) 
				   ORDER BY A.AppointmentDate, A.AppointmentTime    
	END
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Appointment_GetDoctorTimingByAppointmentDoctorId]    Script Date: 07/13/2012 18:10:29 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Appointment_GetDoctorTimingByAppointmentDoctorId] 
(
	@DoctorId INT
)
AS
SELECT *, StartTime + ' - ' + EndTime [Timing], StartTime + ' - ' + EndTime + ' (' + ScheduleName +')'[ScheduleTiming] FROM TBL_Doctor_Timing WHERE DoctorId=@DoctorId AND IsDeleted = 0
GO

/****** Object:  StoredProcedure [dbo].[USP_Appointment_GetDoctorTimingByDoctorId]    Script Date: 07/13/2012 18:10:29 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Appointment_GetDoctorTimingByDoctorId] 
(
	@DoctorId INT,
	@OrganizationId INT
)
AS
SELECT *, StartTime + ' - ' + EndTime [Timing], StartTime + ' - ' + EndTime + ' (' + ScheduleName +')'[ScheduleTiming] FROM TBL_Doctor_Timing WHERE DoctorId IN (
	SELECT DoctorId FROM TBL_Doctor WHERE LoginId IN (
		SELECT LoginId FROM TBL_Doctor WHERE DoctorId=@DoctorId AND IsDeleted=0 AND OrganizationId IN ( SELECT OrganizationId FROM TBL_Organization WHERE OrganizationId=@OrganizationId AND IsActivated=1)
	) AND OrganizationId=@OrganizationId AND IsDeleted = 0
) AND IsDeleted = 0
GO

/****** Object:  StoredProcedure [dbo].[USP_Appointment_GetDoctorTimingByDoctorIdOnly]    Script Date: 07/13/2012 18:10:29 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Appointment_GetDoctorTimingByDoctorIdOnly] 
(
	@DoctorId INT
)
AS
SELECT dt.*, dt.StartTime + ' - ' + dt.EndTime [Timing], dt.StartTime + ' - ' + dt.EndTime + ' (' + dt.ScheduleName +')' [ScheduleTiming], D.OrganizationId FROM TBL_Doctor_Timing dt, TBL_Doctor d WHERE dt.DoctorId IN (
	SELECT DoctorId FROM TBL_Doctor WHERE LoginId IN (
		SELECT LoginId FROM TBL_Doctor WHERE DoctorId=@DoctorId AND IsDeleted=0 
	) AND IsDeleted = 0 AND IsActivated=1
) AND dt.IsDeleted = 0 AND d.IsDeleted=0 AND dt.DoctorId=D.DoctorId AND OrganizationId in (SELECT OrganizationId FROM TBL_Organization WHERE OrganizationId=D.OrganizationId AND IsActivated=1)
GO

/****** Object:  StoredProcedure [dbo].[USP_Appointment_GetDoctorTimingById]    Script Date: 07/13/2012 18:10:29 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Appointment_GetDoctorTimingById]
(
	@DoctorTimingId INT
)
AS
SELECT * FROM TBL_Doctor_Timing WHERE DoctorTimingId=@DoctorTimingId
GO

/****** Object:  StoredProcedure [dbo].[USP_Appointment_GetDoctorTimingByServiceId]    Script Date: 07/13/2012 18:10:29 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Appointment_GetDoctorTimingByServiceId] 
(
	@ServiceId INT,
	@OrganizationId INT
)
AS
BEGIN
	SELECT *, StartTime + ' - ' + EndTime [Timing] FROM TBL_Service_Timing WHERE ServiceId IN (SELECT ServiceId FROM TBL_Service WHERE ServiceName=
	(SELECT ServiceName FROM TBL_Service WHERE ServiceId=@ServiceId) AND LoginId=(SELECT LoginId FROM TBL_Service WHERE ServiceId=@ServiceId) AND OrganizationId=@OrganizationId AND IsDeleted = 0) AND IsDeleted = 0
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Appointment_GetEmailIdBySelectedId]    Script Date: 07/13/2012 18:10:29 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Appointment_GetEmailIdBySelectedId]
(
	@AppointmentIds VARCHAR(MAX)
)
AS
BEGIN 

	DECLARE @sqlquery NVARCHAR(MAX)

	SET @sqlquery = 'SELECT EmailId, MobileId FROM TBL_Login WHERE LoginId IN (SELECT LoginId FROM TBL_Patient WHERE PatientId IN (SELECT PatientId FROM TBL_Appointment WHERE AppointmentId IN ('+@AppointmentIds  +')))'

	EXECUTE sp_executesql @sqlquery	
	
--SELECT EmailId, MobileId FROM TBL_Login WHERE LoginId IN (SELECT LoginId FROM TBL_Patient WHERE PatientId IN (SELECT PatientId FROM TBL_Appointment WHERE AppointmentId IN (CAST(@AppointmentIds AS INT))))

END
GO

/****** Object:  StoredProcedure [dbo].[USP_Appointment_GetOrganizationByDoctorTimingId]    Script Date: 07/13/2012 18:10:29 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Appointment_GetOrganizationByDoctorTimingId] 
(
	@DoctorTimingId INT
)
AS
BEGIN
	SELECT
		L.*,
		O.*,
		D.*,
		'Dr. ' + D.DoctorName + ', ' + D.Degrees [DoctorNameWithDegree],
		(SELECT CityName FROM TBL_GeoPostcodes_City WHERE CityId=O.CityId) [CityName],
		(SELECT StateName FROM TBL_GeoPostcodes_State WHERE StateId=O.StateId) [StateName],
		(SELECT CountryName FROM TBL_GeoPostcodes_Country WHERE CountryId=O.CountryId) [CountryName],
		T.Address [ScheduleAddress]
	FROM
		TBL_Doctor_Timing T,
		TBL_Organization O,
		TBL_Doctor D,
		TBL_Login L
	WHERE
		T.DoctorTimingId=@DoctorTimingId AND
		D.DoctorId=T.DoctorId AND
		O.OrganizationId = D.OrganizationId AND
		L.LoginId=O.LoginId
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Appointment_GetOrganizationByServiceTimingId]    Script Date: 07/13/2012 18:10:29 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Appointment_GetOrganizationByServiceTimingId] 
(
	@ServiceTimingId INT
)
AS
BEGIN
	SELECT
		L.*,
		O.*,
		S.*,
		(SELECT CityName FROM TBL_GeoPostcodes_City WHERE CityId=O.CityId) [CityName],
		(SELECT StateName FROM TBL_GeoPostcodes_State WHERE StateId=O.StateId) [StateName],
		(SELECT CountryName FROM TBL_GeoPostcodes_Country WHERE CountryId=O.CountryId) [CountryName],
		T.Address [ScheduleAddress]
	FROM
		TBL_Service_Timing T,
		TBL_Organization O,
		TBL_Service S,
		TBL_Login L
	WHERE
		T.ServiceTimingId=@ServiceTimingId AND
		S.ServiceId=T.ServiceId AND
		O.OrganizationId=S.OrganizationId AND
		L.LoginId=O.LoginId
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Appointment_GetPatientByParentId]    Script Date: 07/13/2012 18:10:30 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Appointment_GetPatientByParentId]
(
	@PatientId INT
)
AS
BEGIN
	SELECT P.PatientId, P.FirstName + ' ' + ISNULL(P.LastName, '') + ' (' + (SELECT Relationship FROM TBL_Master_Relationship WHERE RelationshipId=P.RelationshipId) + ')' [PatientName], (SELECT IsDirect FROM TBL_Login WHERE LoginId=P.LoginId) [IsDirect] FROM TBL_Patient P WHERE P.PatientId=@PatientId OR P.ParentId=@PatientId AND P.IsDeleted=0
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Appointment_GetPatientReference]    Script Date: 07/13/2012 18:10:30 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Appointment_GetPatientReference]
(
	@PatientId INT,
	@OrganizationId INT
)
AS
SELECT * FROM TBL_Patient_Reference WHERE PatientId=@PatientId AND OrganizationId=@OrganizationId
GO

/****** Object:  StoredProcedure [dbo].[USP_Appointment_GetScheduledAppointment]    Script Date: 07/13/2012 18:10:30 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROC [dbo].[USP_Appointment_GetScheduledAppointment] 
(
	@OrganizationId INT,
	@Type INT,
	@Id INT,
	@TimingId INT,
	@AppointmentDate VARCHAR(10)
)
AS
BEGIN
	IF (@Type = 0)
		SELECT
			AppointmentTime
		FROM
			TBL_Appointment
		WHERE
			--StatusId in (1,2,5) AND --Unscheduled and scheduled
			OrganizationId=@OrganizationId AND
			DoctorId=@Id AND
			DoctorTimingId=@TimingId AND
			CONVERT(VARCHAR,AppointmentDate, 101)=@AppointmentDate AND			
			IsDeleted = 0 AND
			StatusId not in (5)
	ELSE
		SELECT
			AppointmentTime
		FROM
			TBL_Appointment
		WHERE
			--StatusId in (1,2,5) AND --Unscheduled and scheduled
			OrganizationId=@OrganizationId AND
			ServiceId=@Id AND
			ServiceTimingId=@TimingId AND
			CONVERT(VARCHAR,AppointmentDate, 101)=@AppointmentDate AND			
			IsDeleted = 0 AND
			StatusId not in (5)
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Appointment_GetScheduleEndTime]    Script Date: 07/13/2012 18:10:30 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Appointment_GetScheduleEndTime]
(
	@AppointmentId INT,
	@AccountTypeId INT
)
as
if @AccountTypeId=3
	select EndTime from TBL_Doctor_Timing WHERE DoctorTimingId=(select DoctorTimingId from TBL_Appointment where AppointmentId=@AppointmentId)
else
	select EndTime from TBL_Service_Timing WHERE ServiceTimingId=(select ServiceTimingId from TBL_Appointment where AppointmentId=@AppointmentId)

GO

/****** Object:  StoredProcedure [dbo].[USP_Appointment_GetScheduleEndTimeByAppointmentId]    Script Date: 07/13/2012 18:10:30 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Appointment_GetScheduleEndTimeByAppointmentId]
(
	@AppointmentId INT
)
as
declare @doctor int
select @doctor=ISNULL(DoctorId, 0) from TBL_Appointment WHERE AppointmentId=@AppointmentId
if @doctor>0
	select EndTime from TBL_Doctor_Timing WHERE DoctorTimingId=(select DoctorTimingId from TBL_Appointment where AppointmentId=@AppointmentId)
else
	select EndTime from TBL_Service_Timing WHERE ServiceTimingId=(select ServiceTimingId from TBL_Appointment where AppointmentId=@AppointmentId)

GO

/****** Object:  StoredProcedure [dbo].[USP_Appointment_GetServiceTimingById]    Script Date: 07/13/2012 18:10:30 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Appointment_GetServiceTimingById]
(
	@ServiceTimingId INT
)
AS
SELECT * FROM TBL_Service_Timing WHERE ServiceTimingId=@ServiceTimingId
GO

/****** Object:  StoredProcedure [dbo].[USP_Appointment_GetServiceTimingByServiceId]    Script Date: 07/13/2012 18:10:30 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Appointment_GetServiceTimingByServiceId] 
(
	@ServiceId INT,
	@OrganizationId INT
)
AS
SELECT *, StartTime + ' - ' + EndTime [Timing], StartTime + ' - ' + EndTime + ' (' + ScheduleName +')'[ScheduleTiming] FROM TBL_Service_Timing WHERE ServiceId IN (
	SELECT ServiceId FROM TBL_Service WHERE LoginId IN (
		SELECT LoginId FROM TBL_Service WHERE ServiceId=@ServiceId AND IsDeleted=0 AND OrganizationId IN ( SELECT OrganizationId FROM TBL_Organization WHERE OrganizationId=@OrganizationId AND IsActivated=1)
	) AND OrganizationId=@OrganizationId AND IsDeleted = 0
) AND IsDeleted = 0
GO

/****** Object:  StoredProcedure [dbo].[USP_Appointment_GetServiceTimingByServiceIdOnly]    Script Date: 07/13/2012 18:10:30 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Appointment_GetServiceTimingByServiceIdOnly] 
(
	@ServiceId INT
)
AS
SELECT dt.*, dt.StartTime + ' - ' + dt.EndTime [Timing], dt.StartTime + ' - ' + dt.EndTime + ' (' + dt.ScheduleName +')' [ScheduleTiming], D.OrganizationId FROM TBL_Service_Timing dt, TBL_Service d WHERE dt.ServiceId=@ServiceId AND dt.IsDeleted = 0 AND d.IsDeleted=0 AND d.IsActivated=1 AND dt.ServiceId=D.ServiceId
GO

/****** Object:  StoredProcedure [dbo].[USP_Appointment_GetTodayAppointments]    Script Date: 07/13/2012 18:10:30 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Appointment_GetTodayAppointments] 
(
	@OrganizationId INT,
	@Type INT,
	@Id INT,
	@AppointmentDate VARCHAR(10)
)
AS
BEGIN
	IF (@Type = 0)
		SELECT
			A.AppointmentId,
			P.PatientId,
			T.TokenSequence,
			[Patient] = CASE
				WHEN P.ParentId=0 THEN P.FirstName + ' ' + ISNULL(P.LastName, '')
				WHEN P.ParentId>0 THEN P.FirstName + ' ' + ISNULL(P.LastName, '') + ' via ' + (SELECT FirstName + ' ' + LastName FROM TBL_Patient WHERE PatientId=P.ParentId)
				END,
			P.DateofBirth,
			'' [Age],
			A.AppointmentDate,
			A.AppointmentTime,
			[AppointmentDateTime]=A.AppointmentDate + ' '  +  CASE ISNULL(A.AppointmentTime,'')
																WHEN '' then (SELECT EndTime FROM TBL_Doctor_Timing WHERE DoctorTimingId = A.DoctorTimingId)
																ELSE ''
																END,
			[Timing] = CASE
				WHEN LEN(DT.Address) > 0 THEN DT.StartTime + ' - ' + DT.EndTime + ' -> ' + DT.Address
				WHEN LEN(DT.Address) = 0 THEN DT.StartTime + ' - ' + DT.EndTime + ' -> ' + O.BranchName
			END,
			ISNULL(A.PreferentialId, 0) [Preferential],
			A.IsCarParking,
			A.CarNumber,
			A.IsDirectAppointment,
			A.DoctorClosingNotes,
			Notes = CASE WHEN A.Notes = ' ' THEN 'Not Applicable'
						   ELSE A.Notes	
						   END,
			A.StatusId,
			(SELECT StatusName FROM TBL_Master_Status WHERE StatusId=A.StatusId) [Status],
			A.IsDeleted,
			ScheduleEndTime = (SELECT EndTime FROM TBL_Doctor_Timing WHERE DoctorTimingId = A.DoctorTimingId)
		FROM
			TBL_Appointment A,
			TBL_Token T,
			TBL_Doctor_Timing DT,
			TBL_Patient P,
			TBL_Organization O
		WHERE
			--A.StatusId=2 AND
			A.OrganizationId=@OrganizationId AND
			A.OrganizationId=O.OrganizationId AND
			A.DoctorId=@Id AND
			CONVERT(VARCHAR,A.AppointmentDate, 101)>=@AppointmentDate AND
			A.AppointmentId=T.AppointmentId AND
			A.DoctorTimingId=DT.DoctorTimingId AND
			A.PatientId=P.PatientId
		ORDER BY A.AppointmentDate
	ELSE
		SELECT
			A.AppointmentId,
			P.PatientId,
			T.TokenSequence,
			[Patient] = CASE
				WHEN P.ParentId=0 THEN P.FirstName + ' ' + ISNULL(P.LastName, '')
				WHEN P.ParentId>0 THEN P.FirstName + ' ' + ISNULL(P.LastName, '') + ' via ' + (SELECT FirstName + ' ' + LastName FROM TBL_Patient WHERE PatientId=P.ParentId)
				END,
			P.DateofBirth,
			'' [Age],
			A.AppointmentDate,
			A.AppointmentTime,
			[AppointmentDateTime]=A.AppointmentDate + ' '  +  CASE ISNULL(A.AppointmentTime,'')
																WHEN '' then (SELECT EndTime FROM TBL_Service_Timing WHERE ServiceTimingId = A.ServiceTimingId)
																ELSE ''
																END,
			[Timing] = CASE
				WHEN LEN(ST.Address) > 0 THEN ST.StartTime + ' - ' + ST.EndTime + ' -> ' + ST.Address
				WHEN LEN(ST.Address) = 0 THEN ST.StartTime + ' - ' + ST.EndTime + ' -> ' + O.BranchName
			END,
			ISNULL(A.PreferentialId, 0) [Preferential],
			A.IsCarParking,
			A.CarNumber,
			A.IsDirectAppointment,
			A.DoctorClosingNotes,
			Notes = CASE WHEN A.Notes = ' ' THEN 'Not Applicable'
						   ELSE A.Notes	
						   END,
			A.StatusId,
			(SELECT StatusName FROM TBL_Master_Status WHERE StatusId=A.StatusId) [Status],
			A.IsDeleted,
			ScheduleEndTime = (SELECT EndTime FROM TBL_Service_Timing WHERE ServiceTimingId = A.ServiceTimingId)
		FROM
			TBL_Appointment A,
			TBL_Token T,
			TBL_Service_Timing ST,
			TBL_Patient P,
			TBL_Organization O
		WHERE
			--A.StatusId=2 AND
			A.OrganizationId=@OrganizationId AND
			A.OrganizationId=O.OrganizationId AND
			A.ServiceId=@Id AND
			CONVERT(VARCHAR,A.AppointmentDate, 101)>=@AppointmentDate AND
			A.AppointmentId=T.AppointmentId AND
			A.ServiceTimingId=ST.ServiceTimingId AND
			A.PatientId=P.PatientId
		ORDER BY A.AppointmentDate
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Appointment_InsertAppointment]    Script Date: 07/13/2012 18:10:30 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Appointment_InsertAppointment]
(
	@PatientId INT,
	@OrganizationId INT,
	@ServiceId INT,
	@ServiceTimingId INT,
	@DoctorId INT,
	@DoctorTimingId INT,
	@AppointmentDate DATETIME,
	@AppointmentTime NVARCHAR(15),
	@Notes NVARCHAR(MAX),
	@IsCarParking BIT,
	@CarNumber NVARCHAR(50),
	@PreferentialId INT,
	@PreferentialBoarding NVARCHAR(15),
	@StatusId INT,
	@IsDirectAppointment BIT
)
AS
BEGIN
	DECLARE @AppointmentId INT
	DECLARE @TokenSeq INT
	DECLARE @TokenNumber NVARCHAR(100)
	
	SET @TokenSeq = 0
--INCASE OF MULTIPLE APPOINTMENTS AT A TIME
IF (@DoctorId in (SELECT DoctorId FROM TBL_Appointment WHERE DoctorId=@DoctorId AND DoctorTimingId=@DoctorTimingId AND AppointmentDate=@AppointmentDate AND AppointmentTime=@AppointmentTime AND IsDeleted=0 AND StatusId NOT IN (5)))
BEGIN
 SET @TokenSeq=null
 SELECT @TokenSeq, NULL
END
ELSE 
 IF (@ServiceId in (SELECT DoctorId FROM TBL_Appointment WHERE ServiceId=@ServiceId AND ServiceTimingId=@ServiceTimingId AND AppointmentDate=@AppointmentDate AND AppointmentTime=@AppointmentTime AND IsDeleted=0 AND StatusId NOT IN (5)))
 BEGIN
	SET @TokenSeq=null
	SELECT @TokenSeq, NULL
 END
ELSE
 BEGIN	
	IF @DoctorId > 0
	BEGIN
		SELECT @TokenSeq=ISNULL(TokenSequence,0)+1 FROM TBL_Token WHERE AppointmentId in (
			SELECT ISNULL(MAX(AppointmentId),0) FROM TBL_Appointment WHERE OrganizationId=@OrganizationId
		)
		
		IF (@TokenSeq = 0)
			SET @TokenSeq = 1
		
		SET @TokenNumber = 'D-' + cast(@OrganizationId as varchar) + '-' + cast(@DoctorId as varchar) + '-' + cast(@TokenSeq as varchar)
	END
	ELSE
	BEGIN
		SELECT @TokenSeq=ISNULL(TokenSequence,0)+1 FROM TBL_Token WHERE AppointmentId in (
			SELECT ISNULL(MAX(AppointmentId),0) FROM TBL_Appointment WHERE OrganizationId=@OrganizationId
		)
		
		IF (@TokenSeq = 0)
			SET @TokenSeq = 1
		
		SET @TokenNumber = 'S-' + cast(@OrganizationId as varchar) + '-' + cast(@ServiceId as varchar) + '-' + cast(@TokenSeq as varchar)
	END

	INSERT INTO TBL_Appointment
		(PatientId, OrganizationId, ServiceId, ServiceTimingId, DoctorId, DoctorTimingId, AppointmentDate, AppointmentTime, Notes, IsCarParking, CarNumber, PreferentialId, PreferentialBoarding, StatusId, IsDirectAppointment, CreatedOn, IsDeleted)
	VALUES
		(@PatientId, @OrganizationId, @ServiceId, @ServiceTimingId, @DoctorId, @DoctorTimingId, @AppointmentDate, @AppointmentTime, @Notes, @IsCarParking, @CarNumber, @PreferentialId, @PreferentialBoarding, @StatusId, @IsDirectAppointment, getdate(), 0)

	SET @AppointmentId=@@IDENTITY;
	
	INSERT INTO TBL_Token 
		(TokenNumber, TokenSequence, AppointmentId, CreatedOn, IsDeleted)
	VALUES
		(@TokenNumber, @TokenSeq, @@IDENTITY, getdate(), 0)
		
	SELECT TokenSequence, @AppointmentId FROM TBL_Token WHERE TokenId=@@IDENTITY
END

SELECT 	@TokenSeq [Token], @AppointmentId [AppointmentId]

END
GO

/****** Object:  StoredProcedure [dbo].[USP_Appointment_InsertBlockCalendar]    Script Date: 07/13/2012 18:10:30 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Appointment_InsertBlockCalendar]
(
	@BlockId int,
	@BlockTypeId int,
	@Type bit,
	@DoctorId int,
	@ServiceId int,
	@DoctorTimingId int,
	@ServiceTimingId int,
	@BlockStart datetime,
	@BlockEnd datetime,
	@Reason nvarchar(max)
)
AS
BEGIN
	IF @BlockId = 0
	BEGIN
		INSERT INTO TBL_BlockCalendar
			(BlockTypeId, Type, DoctorId, ServiceId, DoctorTimingId, ServiceTimingId, BlockStart, BlockEnd, Reason, CreatedOn, IsDeleted)
		VALUES
			(@BlockTypeId, @Type, @DoctorId, @ServiceId, @DoctorTimingId, @ServiceTimingId, @BlockStart, @BlockEnd, @Reason, GETDATE(), 0)
	END
	ELSE
	BEGIN
		UPDATE TBL_BlockCalendar SET 
			BlockTypeId=@BlockTypeId,
			Type=@Type,
			DoctorId=@DoctorId,
			ServiceId=@ServiceId,
			DoctorTimingId=@DoctorTimingId,
			ServiceTimingId=@ServiceTimingId,
			BlockStart=@BlockStart,
			BlockEnd=@BlockEnd,
			Reason=@Reason
		WHERE
			BlockId=@BlockId
	END
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Appointment_InsertPatientReference]    Script Date: 07/13/2012 18:10:30 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Appointment_InsertPatientReference]
(
	@PatientId INT,
	@OrganizationId INT,
	@ReferenceNumber NVARCHAR(250)
)
AS
INSERT INTO TBL_Patient_Reference (PatientId, OrganizationId, ReferenceNumber) VALUES (@PatientId, @OrganizationId, @ReferenceNumber)

GO

/****** Object:  StoredProcedure [dbo].[USP_Appointment_UpdateAppointmentStatus]    Script Date: 07/13/2012 18:10:31 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Appointment_UpdateAppointmentStatus]
(
	@AppointmentIds VARCHAR(MAX),
	@StatusId INT,
	@ClosingNotes VARCHAR(MAX)
)
AS
BEGIN
	DECLARE @sqlquery NVARCHAR(MAX)

	SET @sqlquery = 'UPDATE TBL_Appointment SET StatusId=' + CAST(@StatusId AS VARCHAR) + ',DoctorClosingNotes=''' + @ClosingNotes + ''' WHERE AppointmentId IN (' + @AppointmentIds + ')'

	EXECUTE sp_executesql @sqlquery
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Appointment_UpdateWinServiceDoctorServiceDetail]    Script Date: 07/13/2012 18:10:31 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Appointment_UpdateWinServiceDoctorServiceDetail] 
(
	@DoctorServiceId INT,
	@TimingId INT,
	@Type INT,
	@AppointmentDate DATETIME,
	@MobileId NVARCHAR(50),
	@EmailId NVARCHAR(250),
	@MessageDescription NVARCHAR(250),
	@IsSmsSent BIT,
	@IsEmailSent BIT,
	@Mobile	NVARCHAR(100),
	@ExternalId NVARCHAR(100)	
)
AS
BEGIN
	
	--THIS IS WHILE SENDING MESSAGE TO DOCTOR/SERVICE 1 HOUR PRIOR TO SCHEDULE IF APPOINTMENTS THERE (AccountTypeId = 3(Doctor)/AccountTypeId = 2(Service) )
	IF(@Type = 0)
		INSERT INTO TBL_Appointment_Winservice (AppointmentId, PatientId, DoctorId, DoctorTimingId, ServiceId, ServiceTimingId, EmailId, MobileId, AppointmentDate, MessageDescription, AccountTypeId, IsSmsSent, IsEmailSent, Mobile, ExternalId, CreatedOn)
									VALUES(NULL, NULL, @DoctorServiceId, @TimingId, NULL, NULL, @EmailId, @MobileId, @AppointmentDate, @MessageDescription, 3, @IsSmsSent, @IsEmailSent, @Mobile, @ExternalId, GETDATE())
	ELSE
		INSERT INTO TBL_Appointment_Winservice (AppointmentId, PatientId, DoctorId, DoctorTimingId, ServiceId, ServiceTimingId, EmailId, MobileId, AppointmentDate, MessageDescription, AccountTypeId, IsSmsSent, IsEmailSent, Mobile, ExternalId, CreatedOn)
									VALUES(NULL, NULL, NULL, NULL, @DoctorServiceId, @TimingId, @EmailId, @MobileId, @AppointmentDate, @MessageDescription, 2, @IsSmsSent, @IsEmailSent, @Mobile, @ExternalId, GETDATE())
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Appointment_UpdateWinServicePatientDetail]    Script Date: 07/13/2012 18:10:31 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Appointment_UpdateWinServicePatientDetail] 
(
	@AppointmentId INT,
	@PatientId INT,
	@DoctorServiceId INT,
	@TimingId INT,
	@Type INT,
	@AppointmentDate DATETIME,
	@MobileId NVARCHAR(50),
	@EmailId NVARCHAR(250),
	@MessageDescription NVARCHAR(250),
	@AccountTypeId INT,
	@IsSmsSent BIT,
	@IsEmailSent BIT,
	@Mobile	NVARCHAR(100),
	@ExternalId NVARCHAR(100)
)
AS
BEGIN
	
	--THIS IS WHILE SENDING MESSAGE TO PATIENT 1 HOUR PRIOR TO APPOINTMENT (AccountTypeId = 4 )
	IF(@Type = 0)
		INSERT INTO TBL_Appointment_Winservice (AppointmentId, PatientId, DoctorId, DoctorTimingId, ServiceId, ServiceTimingId, EmailId, MobileId, AppointmentDate, MessageDescription, AccountTypeId, IsSmsSent, IsEmailSent, Mobile, ExternalId, CreatedOn)
									VALUES(@AppointmentId, @PatientId, @DoctorServiceId, @TimingId, NULL, NULL, @EmailId, @MobileId, @AppointmentDate, @MessageDescription, @AccountTypeId, @IsSmsSent, @IsEmailSent, @Mobile, @ExternalId, GETDATE())
	ELSE
		INSERT INTO TBL_Appointment_Winservice (AppointmentId, PatientId, DoctorId, DoctorTimingId, ServiceId, ServiceTimingId, EmailId, MobileId, AppointmentDate, MessageDescription, AccountTypeId, IsSmsSent, IsEmailSent, Mobile, ExternalId, CreatedOn)
									VALUES(@AppointmentId, @PatientId, NULL, NULL, @DoctorServiceId, @TimingId, @EmailId, @MobileId, @AppointmentDate, @MessageDescription, @AccountTypeId, @IsSmsSent, @IsEmailSent, @Mobile, @ExternalId, GETDATE())

END
GO

/****** Object:  StoredProcedure [dbo].[USP_Appointment_ValidateAppointmentByDoctorService]    Script Date: 07/13/2012 18:10:31 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Appointment_ValidateAppointmentByDoctorService]
(
	@DoctorServiceId INT,
	@DoctorServiceTimingId INT,
	@Type INT,
	@AppointmentTime NVARCHAR(15),
	@AppointmentDate NVARCHAR(25)
)
AS
BEGIN

--Validating appointment for same doctor with same time and date and diff patients

IF(@Type = 0)
BEGIN
	SELECT COUNT(AppointmentId) 
	FROM TBL_Appointment 
	WHERE 
		IsDeleted=0 AND 
		DoctorId=@DoctorServiceId AND 
		DoctorTimingId=@DoctorServiceTimingId AND 
		AppointmentTime=@AppointmentTime AND 
		@AppointmentDate=CONVERT(VARCHAR,AppointmentDate, 101) AND
		StatusId <> 5
END
ELSE
	SELECT COUNT(AppointmentId) 
	FROM TBL_Appointment 
	WHERE 
		IsDeleted=0 AND 
		ServiceId=@DoctorServiceId AND 
		ServiceTimingId=@DoctorServiceTimingId AND 
		AppointmentTime=@AppointmentTime AND 
		@AppointmentDate=CONVERT(VARCHAR,AppointmentDate, 101) AND
		StatusId <> 5
 
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Appointment_ValidateAppointmentByPatient]    Script Date: 07/13/2012 18:10:31 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Appointment_ValidateAppointmentByPatient]
(
	@PatientId INT,
	@AppointmentTime NVARCHAR(15),
	@AppointmentDate NVARCHAR(25)
)
AS
BEGIN

--Validating appointment for same patient with same time and date

	SELECT COUNT(AppointmentId) FROM TBL_Appointment WHERE IsDeleted=0 AND PatientId=@PatientId AND AppointmentTime=@AppointmentTime AND CONVERT(VARCHAR,AppointmentDate, 101)=@AppointmentDate AND StatusId <> 5
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Appointment_ValidateBlockTypeById]    Script Date: 07/13/2012 18:10:31 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Appointment_ValidateBlockTypeById] 
(
	@BlockId INT
)
AS
BEGIN
	SELECT COUNT(BlockId) FROM TBL_BlockCalendar WHERE BlockId=@BlockId AND BlockTypeId=2 AND IsDeleted=0
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Appointment_ValidateCancelAppointment]    Script Date: 07/13/2012 18:10:31 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Appointment_ValidateCancelAppointment]
(
	@AppointmentId NVARCHAR(MAX),
	@AppointmentDate NVARCHAR(25)
)
AS
begin
	DECLARE @sqlquery NVARCHAR(MAX)

	SET @sqlquery = 'select COUNT(*) from TBL_Appointment where AppointmentId in (' + @AppointmentId + ') and AppointmentTime IS NOT NULL and AppointmentDate < ''' + @AppointmentDate + ''''
	
	EXECUTE sp_executesql @sqlquery
end
GO

/****** Object:  StoredProcedure [dbo].[USP_Appointment_ValidateCancelAppointmentFCFS]    Script Date: 07/13/2012 18:10:31 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Appointment_ValidateCancelAppointmentFCFS]
(
	@AppointmentId NVARCHAR(MAX),
	@AppointmentDate NVARCHAR(25)
)
AS
begin
	DECLARE @sqlquery NVARCHAR(MAX)

	SET @sqlquery = 'SELECT COUNT(*) FROM TBL_Appointment a WHERE AppointmentId IN ('+ @AppointmentId + ') AND a.AppointmentTime IS NULL AND CONVERT(DATETIME, CONVERT(VARCHAR,AppointmentDate,23) + '' '' + case ISNULL((a.servicetimingid),'' '') WHEN '' '' THEN (SELECT EndTime FROM TBL_Doctor_Timing WHERE DoctorTimingId=a.DoctorTimingId) ELSE (SELECT EndTime FROM TBL_Service_Timing WHERE ServiceTimingId=a.ServiceTimingId) END)  < ''' + @AppointmentDate + ''''
																																								
	EXECUTE sp_executesql @sqlquery
end
GO

/****** Object:  StoredProcedure [dbo].[USP_Appointment_ValidateWaitingTimeByPatient]    Script Date: 07/13/2012 18:10:32 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Appointment_ValidateWaitingTimeByPatient]
(
	@PatientId INT,
	@TimingId INT,
	@Type int,
	@AppointmentDate NVARCHAR(50),
	@AppointmentTime NVARCHAR(50)
)
AS
BEGIN
	IF (@AppointmentTime = '') 
	BEGIN
		IF(@Type = 0)
			SELECT COUNT(AppointmentId) FROM TBL_Appointment WHERE PatientId=@PatientId  AND CONVERT(VARCHAR,AppointmentDate, 101)=@AppointmentDate AND DoctorTimingId=@TimingId and IsDeleted=0 AND StatusId<>5
		ELSE
			SELECT COUNT(AppointmentId) FROM TBL_Appointment WHERE PatientId=@PatientId  AND CONVERT(VARCHAR,AppointmentDate, 101)=@AppointmentDate AND ServiceTimingId=@TimingId and IsDeleted=0 AND StatusId<>5
	END
	ELSE
	BEGIN
		IF(@Type = 0)
			SELECT COUNT(AppointmentId) FROM TBL_Appointment WHERE PatientId=@PatientId  AND CONVERT(VARCHAR,AppointmentDate, 101)=@AppointmentDate AND DoctorTimingId=@TimingId and IsDeleted=0 AND StatusId<>5 AND (CONVERT(DATETIME, AppointmentTime, 114) > CONVERT(DATETIME, @AppointmentTime, 114))
		ELSE
			SELECT COUNT(AppointmentId) FROM TBL_Appointment WHERE PatientId=@PatientId  AND CONVERT(VARCHAR,AppointmentDate, 101)=@AppointmentDate AND ServiceTimingId=@TimingId and IsDeleted=0 AND StatusId<>5 AND (CONVERT(DATETIME, AppointmentTime, 114) > CONVERT(DATETIME, @AppointmentTime, 114))
	END	
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Appointment_WinServiceDoctorServiceDetail]    Script Date: 07/13/2012 18:10:32 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Appointment_WinServiceDoctorServiceDetail] 
AS
BEGIN

DECLARE @DoctorServiceDetail TABLE
(
	Type INT,
	DoctorServiceId INT,
	TimingId INT,
	StartTime NVARCHAR(250),
	TimeZone NVARCHAR(250),
	DoctorServiceName NVARCHAR(250),
	HospitalName NVARCHAR(1000),
	BranchName NVARCHAR(250),
	AppointmentDate NVARCHAR(250),
	MobileId NVARCHAR(50),
	EmailId NVARCHAR(250)
)
	INSERT INTO @DoctorServiceDetail
	SELECT CASE	WHEN A.ServiceId is null THEN 0
				ELSE  1
				END [Type],	
			
		  CASE WHEN A.ServiceId is null THEN A.DoctorId
				ELSE  A.ServiceId
				END [DoctorServiceId],	
				
		   CASE WHEN A.ServiceId is null THEN A.DoctorTimingId
				ELSE  A.ServiceTimingId
				END [TimingId],	
				
			CASE WHEN A.ServiceId is null THEN (SELECT StartTime FROM TBL_Doctor_Timing WHERE DoctorTimingId = A.DoctorTimingId)
				ELSE (SELECT StartTime FROM TBL_Service_Timing WHERE ServiceTimingId = A.ServiceTimingId)
				END [StartTime],
		   
		   CASE	WHEN A.ServiceId is null THEN (SELECT TimeZone FROM TBL_Organization WHERE OrganizationId IN (SELECT OrganizationId FROM TBL_Doctor WHERE DoctorId=A.DoctorId))
				ELSE (SELECT TimeZone FROM TBL_Organization WHERE OrganizationId IN (SELECT OrganizationId FROM TBL_Service WHERE ServiceId=A.ServiceId))
				END [TimeZone],
						   
		   CASE	WHEN A.ServiceId is null THEN (SELECT 'Dr. ' + DoctorName FROM TBL_Doctor WHERE DoctorId=A.DoctorId)
				ELSE (SELECT 'Service - ' + ServiceName  FROM TBL_Service WHERE ServiceId=A.ServiceId)
				END [DoctorServiceName],
				
		   (SELECT OrganizationName FROM TBL_Organization WHERE OrganizationId=A.OrganizationId) [HospitalName],
		   
		   (SELECT BranchName FROM TBL_Organization WHERE OrganizationId=A.OrganizationId) [BranchName],
		   
		   CONVERT(VARCHAR,A.AppointmentDate, 106) [AppointmentDate],
		   
		   CASE	WHEN A.ServiceId is null THEN (SELECT MobileId FROM TBL_Login WHERE LoginId IN (SELECT LoginId FROM TBL_Doctor WHERE DoctorId=A.DoctorId))
				ELSE (SELECT MobileId FROM TBL_Login WHERE LoginId IN (SELECT LoginId FROM TBL_Service WHERE ServiceId=A.ServiceId))
				END [MobileId],
				
		   CASE	WHEN A.ServiceId is null THEN (SELECT EmailId FROM TBL_Login WHERE LoginId IN (SELECT LoginId FROM TBL_Doctor WHERE DoctorId=A.DoctorId))
				ELSE (SELECT EmailId FROM TBL_Login WHERE LoginId IN (SELECT LoginId FROM TBL_Service WHERE ServiceId=A.ServiceId))
				END [EmailId]
	
	FROM TBL_Appointment A
	
	WHERE 
		 A.IsDeleted = 0 AND
		 A.StatusId = 2 AND  --A.AppointmentTime NOT LIKE 'wait%' AND--Only scheduled appointments
		 A.AppointmentDate BETWEEN GETDATE()-1 AND GETDATE()+1 AND
		 (
			A.DoctorTimingId NOT IN (SELECT distinct DoctorTimingId FROM TBL_Appointment_Winservice WHERE AccountTypeId=3 AND CONVERT(VARCHAR, CreatedOn,103)=CONVERT(VARCHAR,SWITCHOFFSET(SYSDATETIMEOFFSET(), '+05:30'), 103)) OR
			A.ServiceTimingId NOT IN (SELECT distinct ServiceTimingId FROM TBL_Appointment_Winservice WHERE AccountTypeId=2 AND CONVERT(VARCHAR, CreatedOn,103)=CONVERT(VARCHAR,SWITCHOFFSET(SYSDATETIMEOFFSET(), '+05:30'), 103))
		)
			
	ORDER BY A.AppointmentDate ASC
	
SELECT COUNT(DoctorServiceId) AS AppointmentCount, Type, DoctorServiceId, TimingId, StartTime, TimeZone, DoctorServiceName, HospitalName, BranchName, AppointmentDate, MobileId, EmailId FROM @DoctorServiceDetail
		 GROUP BY  Type, DoctorServiceId, TimingId, StartTime, TimeZone, DoctorServiceName, HospitalName, BranchName, AppointmentDate, MobileId, EmailId
		 ORDER BY AppointmentDate ASC 

END 
GO

/****** Object:  StoredProcedure [dbo].[USP_Appointment_WinServicePatientDetail]    Script Date: 07/13/2012 18:10:32 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Appointment_WinServicePatientDetail] 
AS
BEGIN
	SELECT A.AppointmentId, 
	
		  A.PatientId [PatientId],
	
		  (SELECT CASE ISNULL(LastName, '')
				  WHEN '' THEN FirstName 
				  ELSE FirstName + ' ' + LastName
				  END FROM TBL_Patient WHERE PatientId=A.PatientId) [PatientName],
			
		  CASE	WHEN A.ServiceId is null THEN (SELECT TimeZone FROM TBL_Organization WHERE OrganizationId IN (SELECT OrganizationId FROM TBL_Doctor WHERE DoctorId=A.DoctorId))
				ELSE (SELECT TimeZone FROM TBL_Organization WHERE OrganizationId IN (SELECT OrganizationId FROM TBL_Service WHERE ServiceId=A.ServiceId))
				END [TimeZone],
				
			CASE WHEN A.ServiceId is null THEN A.DoctorId
				ELSE  A.ServiceId
				END [DoctorServiceId],	
				
		   CASE WHEN A.ServiceId is null THEN A.DoctorTimingId
				ELSE  A.ServiceTimingId
				END [TimingId],	
				
			CASE WHEN A.ServiceId is null THEN 0
				ELSE  1
				END [Type],
				
			CASE WHEN A.ServiceId is null THEN (SELECT StartTime FROM TBL_Doctor_Timing WHERE DoctorTimingId = A.DoctorTimingId)
				ELSE (SELECT StartTime FROM TBL_Service_Timing WHERE ServiceTimingId = A.ServiceTimingId)
				END [StartTime],
				
			CASE WHEN A.ServiceId is null THEN (SELECT EndTime FROM TBL_Doctor_Timing WHERE DoctorTimingId = A.DoctorTimingId)
				ELSE (SELECT EndTime FROM TBL_Service_Timing WHERE ServiceTimingId = A.ServiceTimingId)
				END [EndTime],
				
			CASE WHEN A.ServiceId is null THEN (SELECT IsFCFS FROM TBL_Doctor_Timing WHERE DoctorTimingId = A.DoctorTimingId)
				ELSE (SELECT IsFCFS FROM TBL_Service_Timing WHERE ServiceTimingId = A.ServiceTimingId)
				END [IsFCFS],
				
			CASE WHEN A.ServiceId is null THEN (SELECT Address FROM TBL_Doctor_Timing WHERE DoctorTimingId = A.DoctorTimingId)
				ELSE (SELECT Address FROM TBL_Service_Timing WHERE ServiceTimingId = A.ServiceTimingId)
				END [NewAddress],
	
		   PatientName = (SELECT FirstName +' '+LastName FROM TBL_Patient WHERE PatientId=A.PatientId),
		   
		   CASE	WHEN A.ServiceId is null THEN (SELECT 'Dr. ' + DoctorName FROM TBL_Doctor WHERE DoctorId=A.DoctorId)
				ELSE (SELECT ServiceName  FROM TBL_Service WHERE ServiceId=A.ServiceId)
				END [DoctorServiceName],
				
		   (SELECT OrganizationName FROM TBL_Organization WHERE OrganizationId=A.OrganizationId) [HospitalName],
		   
		   (SELECT BranchName FROM TBL_Organization WHERE OrganizationId=A.OrganizationId) [BranchName],
		   
		   CONVERT(VARCHAR,A.AppointmentDate, 106) [AppointmentDate],
		   
		   A.AppointmentTime,		   
		   
		   (SELECT TokenSequence FROM TBL_Token WHERE AppointmentId=A.AppointmentId) [Token], 
		   
		   (SELECT MobileId FROM TBL_Login WHERE LoginId IN (SELECT CASE ISNULL(LoginId, '') 
																	WHEN  '' THEN (SELECT LoginId FROM TBL_Patient WHERE PatientId IN (SELECT ParentId FROM TBL_Patient WHERE PatientId=A.PatientId))
																	WHEN  '' THEN (SELECT LoginId FROM TBL_Patient WHERE ParentId=A.PatientId)
																	ELSE LoginId 
																	END 
															  FROM TBL_Patient WHERE PatientId=A.PatientId)) [MobileId],
															  
		   (SELECT EmailId FROM TBL_Login WHERE LoginId IN (SELECT CASE ISNULL(LoginId, '') 
																	WHEN  '' THEN (SELECT LoginId FROM TBL_Patient WHERE PatientId IN (SELECT ParentId FROM TBL_Patient WHERE PatientId=A.PatientId))
																	WHEN  '' THEN (SELECT LoginId FROM TBL_Patient WHERE ParentId=A.PatientId)
																	ELSE LoginId 
																	END 
															  FROM TBL_Patient WHERE PatientId=A.PatientId)) [EmailId]
	
	FROM TBL_Appointment A 
		
	WHERE A.AppointmentId NOT IN (SELECT AppointmentId FROM TBL_Appointment_Winservice WHERE AccountTypeId=4 AND CONVERT(VARCHAR, AppointmentDate,103)=CONVERT(VARCHAR,SWITCHOFFSET(SYSDATETIMEOFFSET(), '+05:30'), 103) AND CONVERT(VARCHAR, CreatedOn, 103)=CONVERT(VARCHAR,SWITCHOFFSET(SYSDATETIMEOFFSET(), '+05:30'), 103)) AND
		  A.IsDeleted = 0 AND
		  A.StatusId = 2  AND --A.AppointmentTime NOT LIKE 'wait%' AND --Only scheduled appointments
		  CONVERT(VARCHAR, A.AppointmentDate,103)=CONVERT(VARCHAR,SWITCHOFFSET(SYSDATETIMEOFFSET(), '+05:30'), 103)
		  
	ORDER BY A.AppointmentDate ASC
	
	END 
GO

/****** Object:  StoredProcedure [dbo].[USP_Common_AccountSetting]    Script Date: 07/13/2012 18:10:32 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Common_AccountSetting]
(
	@SignInId NVARCHAR(50),
	@Password NVARCHAR(50),
	@IsEmailNotification BIT,
	@IsSMSNotification BIT
)
AS
BEGIN

IF @Password = ''
	UPDATE 
		TBL_Login 
	SET 
		IsEmailNotification=@IsEmailNotification,IsSMSNotification=@IsSMSNotification,ModifiedOn=GETDATE()
	WHERE 
		EmailId=@SignInId OR MedAppId=@SignInId OR MobileId=@SignInId
ELSE
	UPDATE 
		TBL_Login 
	SET 
		Password=@Password,IsEmailNotification=@IsEmailNotification,IsSMSNotification=@IsSMSNotification,ModifiedOn=GETDATE()
	WHERE 
		EmailId=@SignInId OR MedAppId=@SignInId OR MobileId=@SignInId
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Common_ActivateAccount]    Script Date: 07/13/2012 18:10:32 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Common_ActivateAccount]
(
	@LoginId INT
)
AS
BEGIN
	
	UPDATE TBL_Login SET IsActivated=1, IsSMSNotification=1 WHERE LoginId=@LoginId
	
	SELECT COUNT(LoginId) FROM TBL_Login WHERE IsActivated=1 AND LoginId=@LoginId
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Common_ActivateAccountBySignInId]    Script Date: 07/13/2012 18:10:32 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROC [dbo].[USP_Common_ActivateAccountBySignInId]
(
	@SignInId NVARCHAR(max),
	@Token NVARCHAR(max)
)
AS
BEGIN
	SET @Token = @Token + '%'

	UPDATE TBL_Login SET IsActivated=1, IsSMSNotification=1 WHERE (EmailId=@SignInId OR MobileId=@SignInId) AND TransactionToken LIKE @Token
	
	SELECT COUNT(LoginId) FROM TBL_Login WHERE IsActivated=1 AND (EmailId=@SignInId OR MobileId=@SignInId) AND TransactionToken LIKE @Token
END


GO

/****** Object:  StoredProcedure [dbo].[USP_Common_ActivateEmail]    Script Date: 07/13/2012 18:10:32 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Common_ActivateEmail]
(
	@Token NVARCHAR(MAX)
)
AS
BEGIN

UPDATE 
	TBL_Login
SET 
	IsEmailActivated = 1, IsEmailNotification = 1
WHERE 
	TransactionToken = @Token
	
SELECT COUNT(LoginId) FROM TBL_Login WHERE TransactionToken = @Token

END
GO

/****** Object:  StoredProcedure [dbo].[USP_Common_ApproveAppointment]    Script Date: 07/13/2012 18:10:32 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Common_ApproveAppointment]
(
	@AppointmentId NVARCHAR(MAX)
)
AS
BEGIN

UPDATE 
	TBL_Appointment
SET 
	StatusId=2
WHERE 
	AppointmentId=@AppointmentId AND
	StatusId=1
	
SELECT COUNT(AppointmentId) FROM TBL_Appointment WHERE AppointmentId=@AppointmentId AND StatusId=2

END

GO

/****** Object:  StoredProcedure [dbo].[USP_Common_ChangePassword]    Script Date: 07/13/2012 18:10:32 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Common_ChangePassword]
(
@SignInId NVARCHAR(50),
@Password NVARCHAR(50)
)
AS
BEGIN

UPDATE 
	TBL_Login 
SET 
	Password=@Password,ModifiedOn=GETDATE()
WHERE 
	EmailId=@SignInId OR MedAppId=@SignInId OR MobileId=@SignInId
	
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Common_EmailCount]    Script Date: 07/13/2012 18:10:32 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Common_EmailCount] 
(
	@Mobile NVARCHAR(50)
) 
AS
BEGIN
	INSERT INTO TBL_SMS VALUES(NULL,@Mobile,NULL,NULL,NULL,NULL,NULL,1,Null,NULL,GETDATE())
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Common_EmailSwitch]    Script Date: 07/13/2012 18:10:32 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Common_EmailSwitch]
(
	@SignInId NVARCHAR(50)
)
AS
BEGIN
	SELECT ISNULL(IsEmailNotification,0) FROM TBL_Login WHERE EmailId=@SignInId OR MobileId=@SignInId
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Common_ForgotPassword]    Script Date: 07/13/2012 18:10:32 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Common_ForgotPassword] 
(
@SignInId NVARCHAR(50)
)
AS
BEGIN

SELECT	
	Password 
FROM 
	TBL_Login 
WHERE 
	EmailId=@SignInId OR MedAppId=@SignInId OR MobileId=@SignInId
		
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Common_GenerateToken]    Script Date: 07/13/2012 18:10:32 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Common_GenerateToken]
AS
BEGIN
DECLARE @alpha_numeric VARCHAR(12)

	SET @alpha_numeric=''

	SELECT @alpha_numeric=@alpha_numeric+CHAR(n) FROM
	(
		SELECT TOP 12 number AS n FROM  master..spt_values

		WHERE TYPE='p' and (number between 48 and 57 or number between 65 and 90)

		ORDER BY NEWID()
	) AS t

 SELECT @alpha_numeric as  Token
 
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Common_GetAccountSetting]    Script Date: 07/13/2012 18:10:33 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Common_GetAccountSetting] 
(
	@SignInId NVARCHAR(50)
)
AS
BEGIN

SELECT * FROM TBL_Login WHERE (EmailId=@SignInId OR MobileId=@SignInId) AND IsActivated=1
	
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Common_GetAccountTypeBySignInId]    Script Date: 07/13/2012 18:10:33 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Common_GetAccountTypeBySignInId]
(
	@SignInId nvarchar(250)
)
AS
BEGIN
	DECLARE @LoginId INT
	DECLARE @AccountCount INT
	
	SET @LoginId = 0
	SET @AccountCount = 0
	
	SELECT @LoginId=LoginId FROM TBL_Login
	WHERE
		IsDeleted=0 AND
		IsActivated=1 AND
		(EmailId=@SignInId OR MedAppId=@SignInId OR MobileId=@SignInId)
	
	IF @LoginId > 0
	BEGIN
		SELECT @AccountCount=COUNT(PatientId) FROM TBL_Patient WHERE LoginId=@LoginId AND IsDeleted=0
		IF @AccountCount = 1
		BEGIN
			SELECT 4 [AccountTypeId]
			RETURN
		END
		
		SELECT @AccountCount=COUNT(OrganizationId) FROM TBL_Organization WHERE LoginId=@LoginId AND IsDeleted=0
		IF @AccountCount = 1
		BEGIN
			SELECT 1 [AccountTypeId]
			RETURN
		END
		
		SELECT @AccountCount=COUNT(DoctorId) FROM TBL_Doctor WHERE LoginId=@LoginId AND IsDeleted=0
		IF @AccountCount = 1
		BEGIN
			SELECT 3 [AccountTypeId]
			RETURN
		END
		
		SELECT @AccountCount=COUNT(ServiceId) FROM TBL_Service WHERE LoginId=@LoginId AND IsDeleted=0
		IF @AccountCount = 1
		BEGIN
			SELECT 2 [AccountTypeId]
			RETURN
		END
		
		SELECT @AccountCount
	END
	ELSE
	BEGIN
		SELECT @AccountCount
	END	
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Common_GetActivationCodeById]    Script Date: 07/13/2012 18:10:33 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Common_GetActivationCodeById]
(
	@SignInId NVARCHAR(max)
)
AS
BEGIN
	
	SELECT TOP 1 TransactionToken, LoginId, FirstName, LastName, CountryId, EmailId, MobileId FROM TBL_Login WHERE IsDeleted=0 AND (EmailId=@SignInId OR MobileId=@SignInId) ORDER BY LoginId DESC
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Common_GetApprovalReadyCount]    Script Date: 07/13/2012 18:10:33 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Common_GetApprovalReadyCount]
(
	@AccountTypeId INT,
	@OrganizationId INT,
	@DoctorServiceId INT
)
AS
BEGIN
	DECLARE @ApprovalCount TABLE
	(
		AppointmentDate NVARCHAR(MAX),
		AppointmentTime NVARCHAR(MAX),
		ScheduleEndTime NVARCHAR(MAX)
	)
	IF (@AccountTypeId = 1)
	BEGIN
		INSERT INTO @ApprovalCount
		
		SELECT 
		CONVERT(VARCHAR,A.AppointmentDate, 101) AppointmentDate,
		A.AppointmentTime AppointmentTime,
		dt.EndTime
		
		FROM TBL_Appointment A , TBL_Doctor_Timing dt
		WHERE A.StatusId = 1 AND	A.OrganizationId = @OrganizationId AND dt.DoctorTimingId = A.DoctorTimingId AND	dt.IsApprovalSystem = 1 AND A.IsDeleted = 0		
		
		INSERT INTO @ApprovalCount
		SELECT 
		CONVERT(VARCHAR,A.AppointmentDate, 101) AppointmentDate,
		A.AppointmentTime AppointmentTime,
		st.EndTime
		
		FROM TBL_Appointment A , TBL_Service_Timing st
		WHERE A.StatusId = 1 AND	A.OrganizationId = @OrganizationId AND st.ServiceTimingId = A.ServiceTimingId AND	st.IsApprovalSystem = 1 AND A.IsDeleted = 0		
		
		SELECT * FROM @ApprovalCount
	END
	ELSE IF (@AccountTypeId = 2)
	BEGIN
		SELECT 
		[AppointmentDate] = CONVERT(VARCHAR,A.AppointmentDate, 101),
		A.AppointmentTime,
		[ScheduleEndTime] = st.EndTime
		
		FROM TBL_Appointment A, TBL_Service_Timing st
		WHERE A.StatusId = 1 AND	A.OrganizationId = @OrganizationId AND A.ServiceId = @DoctorServiceId AND st.ServiceTimingId = a.ServiceTimingId AND st.IsApprovalSystem = 1 AND A.IsDeleted = 0		
	END
	ELSE IF (@AccountTypeId = 3)
	BEGIN
	
		SELECT 
		[AppointmentDate] = CONVERT(VARCHAR,A.AppointmentDate, 101),
		A.AppointmentTime,
		[ScheduleEndTime] = dt.EndTime
		
		FROM TBL_Appointment A , TBL_Doctor_Timing dt
		WHERE A.StatusId = 1 AND	A.OrganizationId = @OrganizationId AND A.DoctorId = @DoctorServiceId AND dt.DoctorTimingId = A.DoctorTimingId AND	dt.IsApprovalSystem = 1 AND A.IsDeleted = 0
	END
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Common_GetApprovalReadyProfileCount]    Script Date: 07/13/2012 18:10:33 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Common_GetApprovalReadyProfileCount]
(
	@AccountTypeId INT,
	@OrganizationId INT,
	@DoctorServiceId INT,
	@ScheduledId INT
)
AS
BEGIN
	DECLARE @ApprovalCount INT
	
	IF (@AccountTypeId = 1)
	BEGIN
		SELECT @ApprovalCount=COUNT(*) FROM
			TBL_Appointment a,
			TBL_Doctor_Timing dt
		WHERE
			a.StatusId=1 AND
			a.OrganizationId=@OrganizationId AND
			dt.DoctorTimingId=@ScheduledId AND
			dt.DoctorTimingId=a.DoctorTimingId AND
			dt.IsApprovalSystem=1 AND
			a.IsDeleted=0
			
		SELECT @ApprovalCount+=COUNT(*) FROM
			TBL_Appointment a,
			TBL_Service_Timing st
		WHERE
			a.StatusId=1 AND
			a.OrganizationId=@OrganizationId AND
			st.ServiceTimingId=@ScheduledId AND
			st.ServiceTimingId=a.ServiceTimingId AND
			st.IsApprovalSystem=1 AND
			a.IsDeleted=0
	END
	ELSE IF (@AccountTypeId = 2)
	BEGIN
		SELECT @ApprovalCount=COUNT(*) FROM
			TBL_Appointment a,
			TBL_Service_Timing st
		WHERE
			a.StatusId=1 AND
			a.OrganizationId=@OrganizationId AND
			a.ServiceId=@DoctorServiceId AND
			st.ServiceTimingId=@ScheduledId AND
			st.ServiceTimingId=a.ServiceTimingId AND
			st.IsApprovalSystem=1 AND
			a.IsDeleted=0
	END
	ELSE IF (@AccountTypeId = 3)
	BEGIN
		SELECT @ApprovalCount=COUNT(*) FROM
			TBL_Appointment a,
			TBL_Doctor_Timing dt
		WHERE
			a.StatusId=1 AND
			a.OrganizationId=@OrganizationId AND
			a.DoctorId=@DoctorServiceId AND
			dt.DoctorTimingId=@ScheduledId AND
			dt.DoctorTimingId=a.DoctorTimingId AND
			dt.IsApprovalSystem=1 AND
			a.IsDeleted=0
	END
	
	SELECT @ApprovalCount
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Common_GetCount]    Script Date: 07/13/2012 18:10:33 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Common_GetCount]
AS

BEGIN
SELECT 
	 COUNT(A.AppointmentId) [AppointmentId]
FROM  
	dbo.TBL_Appointment A
end
GO

/****** Object:  StoredProcedure [dbo].[USP_Common_GetCountOfRecentlyRegistered]    Script Date: 07/13/2012 18:10:33 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Common_GetCountOfRecentlyRegistered]
AS
BEGIN
	DECLARE @Organization INT
	DECLARE @Doctor INT
	DECLARE @Service INT
	DECLARE @Patient INT
	DECLARE @Appointment INT
	
	CREATE TABLE #RecentlyRegistered
	(
		OrganizationCount INT,
		DoctorCount INT,
		ServiceCount INT,
		PatientCount INT,
		AppointmentCount INT
	);

	SELECT @Organization=COUNT(OrganizationId) FROM dbo.TBL_Organization WHERE IsDeleted=0

	SELECT @Doctor=COUNT(DISTINCT LoginId) FROM dbo.TBL_Doctor WHERE IsDeleted=0
	
	SELECT @Service=COUNT(ServiceId) FROM TBL_Service WHERE IsDeleted=0
	
	SELECT @Patient=COUNT(PatientID) FROM TBL_Patient WHERE IsDeleted=0
	
	SELECT @Appointment=COUNT(AppointmentId) FROM TBL_Appointment WHERE IsDeleted=0
	
	INSERT INTO #RecentlyRegistered VALUES (@Organization, @Doctor, @Service, @Patient, @Appointment)

	SELECT * FROM #RecentlyRegistered
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Common_GetCountOfRecentlyRegisteredByDoctorId]    Script Date: 07/13/2012 18:10:33 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Common_GetCountOfRecentlyRegisteredByDoctorId]
(
	@DoctorId INT
)
AS
BEGIN
	DECLARE @LoginId INT
	DECLARE @TodayAppointment INT
	DECLARE @Appointment INT
	
	SELECT @LoginId=LoginId FROM TBL_Doctor WHERE DoctorId=@DoctorId
	
	CREATE TABLE #RecentlyRegistered
	(
		TodayAppointmentCount INT,
		AppointmentCount INT
	);

	SELECT @Appointment=COUNT(AppointmentId) FROM TBL_Appointment WHERE IsDeleted=0 AND DoctorId IN (SELECT DoctorId FROM TBL_Doctor WHERE LoginId=@LoginId)
	SELECT @TodayAppointment=COUNT(AppointmentId) FROM TBL_Appointment WHERE IsDeleted=0 AND DoctorId IN (SELECT DoctorId FROM TBL_Doctor WHERE LoginId=@LoginId) AND CONVERT(VARCHAR, AppointmentDate, 101)=CONVERT(VARCHAR, GETDATE(), 101)

	INSERT INTO #RecentlyRegistered VALUES (@TodayAppointment, @Appointment)

	SELECT * FROM #RecentlyRegistered
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Common_GetCountOfRecentlyRegisteredByOrganizationId]    Script Date: 07/13/2012 18:10:33 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Common_GetCountOfRecentlyRegisteredByOrganizationId]
(
	@OrganizationId INT
)
AS
BEGIN
	DECLARE @Organization INT
	DECLARE @Doctor INT
	DECLARE @Service INT
	DECLARE @Patient INT
	DECLARE @Appointment INT
	
	CREATE TABLE #RecentlyRegistered
	(
		OrganizationCount INT,
		DoctorCount INT,
		ServiceCount INT,
		PatientCount INT,
		AppointmentCount INT
	);

	SELECT @Organization=COUNT(OrganizationId) FROM dbo.TBL_Organization WHERE IsDeleted=0 AND OrganizationId=@OrganizationId

	SELECT @Doctor=COUNT(DoctorId) FROM dbo.TBL_Doctor WHERE IsDeleted=0 AND OrganizationId=@OrganizationId
	
	SELECT @Service=COUNT(ServiceId) FROM TBL_Service WHERE IsDeleted=0 AND OrganizationId=@OrganizationId
	
	SELECT @Patient=COUNT(DISTINCT PatientId) FROM TBL_Appointment WHERE IsDeleted=0 AND OrganizationId=@OrganizationId
	
	SELECT @Appointment=COUNT(AppointmentId) FROM TBL_Appointment WHERE IsDeleted=0 AND OrganizationId=@OrganizationId
	
	INSERT INTO #RecentlyRegistered VALUES (@Organization, @Doctor, @Service, @Patient, @Appointment)

	SELECT * FROM #RecentlyRegistered
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Common_GetCountryCodeByCountryId]    Script Date: 07/13/2012 18:10:33 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Common_GetCountryCodeByCountryId]
(
	@CountryId INT
)
AS
BEGIN
	SELECT InternationalCode FROM TBL_GeoPostcodes_Country WHERE CountryId=@CountryId
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Common_GetCountryCodeByOrganizationId]    Script Date: 07/13/2012 18:10:33 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Common_GetCountryCodeByOrganizationId]
(
	@OrganizationId INT
)
AS
BEGIN
	SELECT
		(SELECT InternationalCode FROM TBL_GeoPostcodes_Country WHERE CountryId=O.CountryId) [CountryCode]
	FROM TBL_Organization O WHERE O.OrganizationId=@OrganizationId
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Common_GetCountryIdByOrganizationId]    Script Date: 07/13/2012 18:10:33 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Common_GetCountryIdByOrganizationId]
(
	@OrganizationId INT
)
AS
BEGIN
	SELECT CountryId FROM TBL_Organization O WHERE O.OrganizationId=@OrganizationId
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Common_GetCredentialsBySignInId]    Script Date: 07/13/2012 18:10:33 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Common_GetCredentialsBySignInId]
(
	@SignInId nvarchar(250)
)
AS
BEGIN
	SELECT TOP 1 MobileId, EmailId, Password, TransactionToken FROM TBL_Login
	WHERE
		IsDeleted=0 AND
		(EmailId=@SignInId OR MobileId=@SignInId) AND IsActivated=1
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Common_GetDoctorIdBySignInId]    Script Date: 07/13/2012 18:10:33 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Common_GetDoctorIdBySignInId]
(
	@SignInId nvarchar(250)
)
AS
SELECT DoctorId FROM TBL_Doctor WHERE LoginId=(
	SELECT LoginId FROM TBL_Login
	WHERE
		IsDeleted=0 AND
		(EmailId=@SignInId OR
		MedAppId=@SignInId OR
		MobileId=@SignInId) 
) AND IsDeleted=0
GO

/****** Object:  StoredProcedure [dbo].[USP_Common_GetDoctorServiceIdById]    Script Date: 07/13/2012 18:10:33 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Common_GetDoctorServiceIdById]
(
	@Type INT,
	@DoctorServiceId INT,
	@OrganizationId INT
)
AS
BEGIN
	DECLARE @Id INT
	SET @Id = 0
	
	IF (@Type = 0)
		SELECT
			@Id=D.DoctorId
		FROM
			TBL_Login L,
			TBL_Doctor D
		WHERE
			 L.IsDeleted=0 AND
			D.DoctorId=@DoctorServiceId AND
			L.LoginId=D.LoginId AND
			D.OrganizationId=@OrganizationId
	ELSE
		SELECT
			@Id=S.ServiceId
		FROM
			TBL_Login L,
			TBL_Service S
		WHERE
			 L.IsDeleted=0 AND
			 S.ServiceId=@DoctorServiceId AND
			 L.LoginId=s.LoginId AND
			 S.OrganizationId=@OrganizationId
			 
	SELECT @Id
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Common_GetDoctorServiceIdBySignInId]    Script Date: 07/13/2012 18:10:34 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Common_GetDoctorServiceIdBySignInId]
(
	@Type INT,
	@SignInId nvarchar(250),
	@OrganizationId INT
)
AS
BEGIN
	DECLARE @Id INT
	SET @Id = 0
	
	IF (@Type = 0)
		SELECT
			@Id=D.DoctorId
		FROM
			TBL_Login L,
			TBL_Doctor D
		WHERE
			 L.IsDeleted=0 AND
			(L.EmailId=@SignInId OR L.MedAppId=@SignInId OR L.MobileId=@SignInId) AND
			L.LoginId=D.LoginId AND
			D.OrganizationId=@OrganizationId AND D.IsDeleted=0
	ELSE
		SELECT
			@Id=S.ServiceId
		FROM
			TBL_Login L,
			TBL_Service S
		WHERE
			 L.IsDeleted=0 AND
			(L.EmailId=@SignInId OR L.MedAppId=@SignInId OR L.MobileId=@SignInId) AND
			 L.LoginId=s.LoginId AND
			 S.OrganizationId=@OrganizationId AND S.IsDeleted=0 
			 
	SELECT @Id
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Common_GetMobileIdBySignInId]    Script Date: 07/13/2012 18:10:34 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Common_GetMobileIdBySignInId]
(
@SignInId NVARCHAR(50)
)
AS
BEGIN

SELECT 
	MobileId	
FROM 
	TBL_Login
WHERE 
	EmailId=@SignInId OR MedAppId=@SignInId OR MobileId=@SignInId
	
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Common_GetNameBySignInId]    Script Date: 07/13/2012 18:10:34 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Common_GetNameBySignInId]
(
	@SignInId nvarchar(250),
	@AccountTypeId INT,
	@Id INT,
	@OrganizationId INT
)
AS
BEGIN
	DECLARE @DisplayName NVARCHAR(MAX)
	IF @AccountTypeId = 1
		SELECT @DisplayName=OrganizationName FROM TBL_Organization WHERE OrganizationId=@OrganizationId
		
	ELSE IF @AccountTypeId = 2
		SELECT @DisplayName=ServiceName FROM TBL_Service WHERE ServiceId=@Id
		
	ELSE IF @AccountTypeId = 3
		SELECT @DisplayName='Dr. ' + DoctorName FROM TBL_Doctor WHERE DoctorId=@Id
		
	ELSE IF @AccountTypeId = 4
		SELECT @DisplayName=FirstName + ' ' + LastName FROM TBL_Patient WHERE PatientId=@Id
	ELSE	
		SELECT @DisplayName=CASE ISNULL(LastName, '')
				WHEN '' THEN  FirstName 
				ELSE  FirstName + ' ' + ISNULL(LastName, '') 
				END
		 FROM TBL_Login WHERE (EmailId=@SignInId OR MobileId=@SignInId) AND IsDeleted=0 AND IsActivated=1
		 
	SET @DisplayName = ISNULL(@DisplayName, '')
	SELECT @DisplayName [DisplayName]
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Common_GetOrganizationBySignIn]    Script Date: 07/13/2012 18:10:34 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Common_GetOrganizationBySignIn]
(
	@SignInId nvarchar(250)
)
AS
BEGIN
	CREATE TABLE #MyOrganization
	(
		OrganizationId INT,
		OrganizationName NVARCHAR(1000),
		AccountTypeId INT,
		Id INT,
		Name NVARCHAR(250)
	);

	INSERT INTO #MyOrganization
	SELECT OrganizationId, OrganizationName, 1,0,'' FROM TBL_Organization WHERE LoginId in (
		SELECT LoginId FROM TBL_Login
		WHERE
			IsDeleted=0 AND
			(EmailId=@SignInId OR MedAppId=@SignInId OR MobileId=@SignInId)
	) AND IsDeleted=0

	INSERT INTO #MyOrganization
	SELECT S.OrganizationId, (SELECT OrganizationName FROM TBL_Organization WHERE OrganizationId=S.OrganizationId) [OrganizationName], 2, S.ServiceId, S.ServiceName FROM TBL_Service S WHERE S.LoginId in (
		SELECT LoginId FROM TBL_Login
		WHERE
			IsDeleted=0 AND
			(EmailId=@SignInId OR MedAppId=@SignInId OR MobileId=@SignInId)
	) AND IsDeleted=0

	INSERT INTO #MyOrganization
	SELECT D.OrganizationId, (SELECT OrganizationName FROM TBL_Organization WHERE OrganizationId=D.OrganizationId) [OrganizationName], 3, D.DoctorId, D.DoctorName FROM TBL_Doctor D WHERE D.LoginId in (
		SELECT LoginId FROM TBL_Login
		WHERE
			IsDeleted=0 AND
			(EmailId=@SignInId OR MedAppId=@SignInId OR MobileId=@SignInId)
	) AND IsDeleted=0
	
	INSERT INTO #MyOrganization
	SELECT P.PatientId, P.FirstName + ' ' + P.LastName, 4,0,'' FROM TBL_Patient P WHERE P.LoginId in (
		SELECT LoginId FROM TBL_Login
		WHERE
			IsDeleted=0 AND
			(EmailId=@SignInId OR MedAppId=@SignInId OR MobileId=@SignInId)
	) AND IsDeleted=0
	
	SELECT * FROM #MyOrganization
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Common_GetOrganizationBySignInAccountType]    Script Date: 07/13/2012 18:10:34 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Common_GetOrganizationBySignInAccountType]
(
	@SignInId nvarchar(250),
	@AccountType INT
)
AS
BEGIN
	IF @AccountType = 1
		SELECT TOP 1 OrganizationId FROM TBL_Organization WHERE LoginId in (
			SELECT LoginId FROM TBL_Login
			WHERE
				IsDeleted=0 AND
				(EmailId=@SignInId OR MedAppId=@SignInId OR MobileId=@SignInId)
		)
	ELSE IF @AccountType = 2
		SELECT TOP 1 OrganizationId FROM TBL_Service WHERE LoginId in (
			SELECT LoginId FROM TBL_Login
			WHERE
				IsDeleted=0 AND
				(EmailId=@SignInId OR MedAppId=@SignInId OR MobileId=@SignInId)
		)
	ELSE IF @AccountType = 3
		SELECT TOP 1 OrganizationId FROM TBL_Doctor WHERE LoginId in (
			SELECT LoginId FROM TBL_Login
			WHERE
				IsDeleted=0 AND
				(EmailId=@SignInId OR MedAppId=@SignInId OR MobileId=@SignInId)
		)
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Common_GetOrganizationIds]    Script Date: 07/13/2012 18:10:34 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Common_GetOrganizationIds]
(
	@SignInId nvarchar(250)
)
AS
BEGIN
	CREATE TABLE #MyOrganizationId
	(
		OrganizationId INT
	);

	INSERT INTO #MyOrganizationId
	SELECT OrganizationId FROM TBL_Organization WHERE LoginId in (
		SELECT LoginId FROM TBL_Login
		WHERE
			IsDeleted=0 AND
			(EmailId=@SignInId OR MedAppId=@SignInId OR MobileId=@SignInId)
	) AND IsDeleted=0

	INSERT INTO #MyOrganizationId
	SELECT OrganizationId FROM TBL_Service WHERE LoginId in (
		SELECT LoginId FROM TBL_Login
		WHERE
			IsDeleted=0 AND
			(EmailId=@SignInId OR MedAppId=@SignInId OR MobileId=@SignInId)
	) AND IsDeleted=0
	
	INSERT INTO #MyOrganizationId
	SELECT OrganizationId FROM TBL_Doctor WHERE LoginId in (
		SELECT LoginId FROM TBL_Login
		WHERE
			IsDeleted=0 AND
			(EmailId=@SignInId OR MedAppId=@SignInId OR MobileId=@SignInId)
	) AND IsDeleted=0
	
	SELECT DISTINCT OrganizationId FROM #MyOrganizationId
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Common_GetPatientIdBySignInId]    Script Date: 07/13/2012 18:10:34 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Common_GetPatientIdBySignInId] 
(
	@SignInId nvarchar(250)
)
AS
SELECT PatientId FROM TBL_Patient WHERE LoginId IN (
	SELECT LoginId FROM TBL_Login
	WHERE
		IsDeleted=0 AND
		(EmailId=@SignInId OR
		MedAppId=@SignInId OR
		MobileId=@SignInId)
) 
GO

/****** Object:  StoredProcedure [dbo].[USP_Common_GetRecentlyRegisteredOrganization]    Script Date: 07/13/2012 18:10:34 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Common_GetRecentlyRegisteredOrganization]
AS

SELECT TOP 10 OrganizationName + 
	CASE
		WHEN LOWER(BranchName) = 'main branch' THEN
			''
		ELSE
			' - ' + BranchName
	END
 [RecentlyRegistered] 
FROM 
	dbo.TBL_Organization
WHERE	
	IsDeleted=0  
ORDER BY OrganizationId DESC
GO

/****** Object:  StoredProcedure [dbo].[USP_Common_GetScheduleByDoctorServiceId]    Script Date: 07/13/2012 18:10:34 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Common_GetScheduleByDoctorServiceId] 
(
	@DoctorServiceId INT,
	@Type INT,
	@ScheduleId INT
)
AS
BEGIN
	IF (@Type = 0)
		SELECT
			Hospital = O.OrganizationName + '-' + O.BranchName,
			DT.Address,
			DT.Sunday,
			DT.Monday,
			DT.Tuesday,
			DT.Wednesday,
			DT.Thursday,
			DT.Friday,
			DT.Saturday,
			[Timing] = DT.StartTime +' - '+DT.EndTime,
			DT.Conditions
		FROM
			TBL_Doctor D,
			TBL_Doctor_Timing DT,			
			TBL_Organization O
		WHERE				
			O.OrganizationId=D.OrganizationId AND
			D.DoctorId=DT.DoctorId AND
			DT.DoctorId IN (SELECT DoctorId FROM TBL_Doctor WHERE LoginId = (SELECT LoginId FROM TBL_Doctor WHERE DoctorId = @DoctorServiceId) AND IsDeleted=0) AND 
			DT.IsDeleted=0 AND DT.DoctorTimingId <> @ScheduleId --for exception of the editable schedule
		ORDER BY OrganizationName ASC
	ELSE
		SELECT
			Hospital = O.OrganizationName + '-' + O.BranchName,
			ST.Address,
			ST.Sunday,
			ST.Monday,
			ST.Tuesday,
			ST.Wednesday,
			ST.Thursday,
			ST.Friday,
			ST.Saturday,
			[Timing] = ST.StartTime +' - '+ST.EndTime,
			ST.Conditions
		FROM
			TBL_Service S,
			TBL_Service_Timing ST,			
			TBL_Organization O
		WHERE				
			O.OrganizationId=S.OrganizationId AND
			S.ServiceId=ST.ServiceId AND
			ST.ServiceId=@DoctorServiceId AND
			ST.IsDeleted=0 AND ST.ServiceTimingId <> @ScheduleId
		ORDER BY OrganizationName ASC
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Common_GetSignInPassword]    Script Date: 07/13/2012 18:10:34 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Common_GetSignInPassword]
(
	@EmailId NVARCHAR(250)
)
AS
BEGIN
	SELECT Password FROM TBL_Login WHERE EmailId=@EmailId OR MobileId=@EmailId
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Common_GetSymptom]    Script Date: 07/13/2012 18:10:34 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Common_GetSymptom]
AS
select * from dbo.TBL_Master_Symptom
GO

/****** Object:  StoredProcedure [dbo].[USP_Common_GupShupResponse]    Script Date: 07/13/2012 18:10:35 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Common_GupShupResponse]
(
	@ExternalId NVARCHAR(100),
	@DeliveredTS NVARCHAR(50),
	@Status NVARCHAR(10),
	@PhoneNo NVARCHAR(100),
	@Cause NVARCHAR(100)
)
AS
BEGIN
	INSERT INTO TBL_GupShup (ExternalId, DeliveredTS, Status, PhoneNo, Cause) VALUES (@ExternalId, @DeliveredTS, @Status, @PhoneNo, @Cause)
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Common_SaveKeywordSMS]    Script Date: 07/13/2012 18:10:35 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Common_SaveKeywordSMS]
(
	@PhoneCode NVARCHAR(25),
	@Keyword NVARCHAR(200),
	@Location NVARCHAR(500),
	@Carrier NVARCHAR(500),
	@Contents NVARCHAR(MAX),
	@PhoneNo NVARCHAR(25),
	@Time NVARCHAR(100)
)
AS
BEGIN
	INSERT INTO TBL_KeywordSMS
		(PhoneCode, Keyword, Location, Carrier, Contents, PhoneNo, Time, CreatedOn)
	VALUES
		(@PhoneCode, @Keyword, @Location, @Carrier, @Contents, @PhoneNo, @Time, GETDATE())
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Common_SaveSMS]    Script Date: 07/13/2012 18:10:35 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Common_SaveSMS]
(
	@SignInId NVARCHAR(max),
	@AccountTypeId INT,
	@SMSMessage NVARCHAR(200),
	@Action NVARCHAR(MAX),
	@MobileId NVARCHAR(max),
	@ExternalId NVARCHAR(max),
	@AppointmentId INT
)
AS
BEGIN
	IF @AccountTypeId = 1
	BEGIN
		INSERT INTO TBL_SMS
		SELECT TOP 1 LoginId, Mobile, OrganizationId, @AccountTypeId, NULL, @SMSMessage, @Action, NULL, @MobileId, @ExternalId, GETDATE() FROM TBL_Organization WHERE LoginId IN (
			SELECT LoginId FROM TBL_Login WHERE (EmailId=@SignInId OR MobileId=@SignInId)
		) ORDER BY CreatedOn DESC
	END
	ELSE IF @AccountTypeId = 2
	BEGIN
		INSERT INTO TBL_SMS
		SELECT TOP 1 LoginId, Mobile, ServiceId, @AccountTypeId, NULL, @SMSMessage, @Action, NULL, @MobileId, @ExternalId, GETDATE() FROM TBL_Service WHERE LoginId IN (
			SELECT LoginId FROM TBL_Login WHERE (EmailId=@SignInId OR MobileId=@SignInId)
		) ORDER BY CreatedOn DESC
	END
	ELSE IF @AccountTypeId = 3
	BEGIN
		INSERT INTO TBL_SMS
		SELECT TOP 1 LoginId, Mobile, DoctorId, @AccountTypeId, NULL, @SMSMessage, @Action, NULL, @MobileId, @ExternalId, GETDATE() FROM TBL_Doctor WHERE LoginId IN (
			SELECT LoginId FROM TBL_Login WHERE (EmailId=@SignInId OR MobileId=@SignInId)
		) ORDER BY CreatedOn DESC
	END
	ELSE IF @AccountTypeId = 4
	BEGIN
		INSERT INTO TBL_SMS
		SELECT LoginId, Mobile, PatientId, @AccountTypeId, @AppointmentId, @SMSMessage, @Action, NULL, @MobileId, @ExternalId, GETDATE() FROM TBL_Patient WHERE LoginId IN (
			SELECT LoginId FROM TBL_Login WHERE (EmailId=@SignInId OR MobileId=@SignInId)
		)
	END
	ELSE IF @AccountTypeId = 5
	BEGIN
		INSERT INTO TBL_SMS
		SELECT LoginId, MobileId, LoginId, @AccountTypeId, NULL, @SMSMessage, @Action, NULL, @MobileId, @ExternalId, GETDATE() FROM TBL_Login WHERE (EmailId=@SignInId OR MobileId=@SignInId)
	END
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Common_SMSSwitch]    Script Date: 07/13/2012 18:10:35 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Common_SMSSwitch]
(
	@SignInId NVARCHAR(50)
)
AS
BEGIN
	SELECT ISNULL(IsSMSNotification,0) FROM TBL_Login WHERE EmailId=@SignInId OR MobileId=@SignInId
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Common_UpdateCredentialsBySignInId]    Script Date: 07/13/2012 18:10:35 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Common_UpdateCredentialsBySignInId]
(
	@LoginId INT,
	@EmailId NVARCHAR(250),
	@MobileId NVARCHAR(20),
	@Password NVARCHAR(15)
)
AS
BEGIN
	UPDATE TBL_Login SET
		EmailId=@EmailId,
		MobileId=@MobileId,
		Password=@Password
	WHERE
		IsDeleted=0 AND
		LoginId=@LoginId
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Common_UpdateEmailAccountByLoginId]    Script Date: 07/13/2012 18:10:35 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Common_UpdateEmailAccountByLoginId]
(
	@Email NVARCHAR(250),
	@LoginId INT
)
AS
BEGIN
	
	UPDATE TBL_Login SET EmailId=@Email, IsEmailActivated=1, IsEmailNotification=1 WHERE LoginId=@LoginId
	
	SELECT COUNT(LoginId) FROM TBL_Login WHERE IsActivated=1 AND LoginId=@LoginId
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Common_UpdateMobileAccountByLoginId]    Script Date: 07/13/2012 18:10:35 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Common_UpdateMobileAccountByLoginId]
(
	@MobileId NVARCHAR(20),
	@CountryId INT,
	@LoginId INT
)
AS
BEGIN
	
	UPDATE TBL_Login SET MobileId=@MobileId, CountryId=@CountryId, IsSMSNotification=1 WHERE LoginId=@LoginId
	
	UPDATE TBL_Organization SET Mobile=@MobileId WHERE LoginId=@LoginId
	
	UPDATE TBL_Doctor SET Mobile=@MobileId WHERE LoginId=@LoginId
	
	UPDATE TBL_Service SET Mobile=@MobileId WHERE LoginId=@LoginId
	
	UPDATE TBL_Patient SET Mobile=@MobileId, CountryId=@CountryId, StateId=NULL, CityId=NULL WHERE LoginId=@LoginId
	
	SELECT COUNT(LoginId) FROM TBL_Login WHERE IsActivated=1 AND LoginId=@LoginId
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Common_ValidateBlockCalendar]    Script Date: 07/13/2012 18:10:35 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Common_ValidateBlockCalendar] 
(
@DoctorserviceType INT,
@DoctorserviceTimingId INT,
@FromDate NVARCHAR(15),
@ToDate NVARCHAR(15),
@StartTime NVARCHAR(15),
@EndTime NVARCHAR(15),
@BlockType INT
)
AS
BEGIN

--Validating block dates with booked appointment 

IF(@DoctorserviceType = 0)
BEGIN
	IF(@BlockType = 1)
	BEGIN
		SELECT COUNT(AppointmentId)
		FROM TBL_Appointment 
		WHERE 
			DoctorTimingId = @DoctorserviceTimingId AND
			CONVERT(VARCHAR, AppointmentDate, 101) BETWEEN @FromDate AND @ToDate AND  
			IsDeleted = 0 AND StatusId <> 5
	END 
	ELSE
	BEGIN
		SELECT COUNT(AppointmentId)
		FROM TBL_Appointment 
		WHERE 
			DoctorTimingId = @DoctorserviceTimingId AND
			CONVERT(VARCHAR, AppointmentDate, 101) BETWEEN @FromDate AND @ToDate AND
			IsDeleted = 0 AND StatusId <> 5
	END
END
ELSE
BEGIN
	IF(@BlockType = 1)
	BEGIN		
		SELECT COUNT(AppointmentId)
		FROM TBL_Appointment 
		WHERE 
			ServiceTimingId = @DoctorserviceTimingId AND
			CONVERT(VARCHAR, AppointmentDate, 101) BETWEEN @FromDate AND @ToDate  AND
			IsDeleted = 0 AND StatusId <> 5
	END 
	ELSE
	BEGIN
		SELECT COUNT(AppointmentId)
		FROM TBL_Appointment 
		WHERE 
			ServiceTimingId = @DoctorserviceTimingId AND
			CONVERT(VARCHAR, AppointmentDate, 101) BETWEEN @FromDate AND @ToDate AND
			IsDeleted = 0 AND StatusId <> 5  -- for Doctor cancelling appointments status=5
	END
END
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Common_ValidateDoctorDepartmentByAppointment]    Script Date: 07/13/2012 18:10:35 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Common_ValidateDoctorDepartmentByAppointment] 
(
	@DoctorId NVARCHAR(20),
	@currentDate DATETIME
	
)
AS
BEGIN

--validating the doctor while editing the department with booked patient appointment's

	SELECT COUNT(AppointmentId) FROM TBL_Appointment  WHERE DoctorId IN (SELECT DoctorId FROM TBL_Doctor WHERE LoginId=(SELECT LoginId FROM TBL_Doctor WHERE DoctorId=@DoctorId)) AND 
								  AppointmentDate>=@currentDate AND StatusId <> 5 AND
								  IsDeleted=0
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Common_ValidateDoctorSchedule]    Script Date: 07/13/2012 18:10:35 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Common_ValidateDoctorSchedule] 
(
	@DoctorId INT,
	@Day INT,
	@StartTime NVARCHAR(15),
	@EndTime NVARCHAR(15),
	@ScheduleId INT
)
AS
BEGIN
 
 IF(@Day = 0) 
	    
    SELECT COUNT(DoctorId) 
    FROM TBL_Doctor_Timing 
    WHERE 
		DoctorId IN (SELECT DoctorId FROM TBL_Doctor WHERE LoginId = (SELECT LoginId FROM TBL_Doctor WHERE DoctorId = @DoctorId) AND IsDeleted=0) AND Sunday=1 AND
		(CONVERT(DATETIME, @StartTime, 114) BETWEEN CONVERT(DATETIME, StartTime, 114) AND CONVERT(DATETIME, EndTime, 114) OR
		CONVERT(DATETIME, @EndTime, 114) BETWEEN CONVERT(DATETIME, StartTime, 114) AND CONVERT(DATETIME, EndTime, 114) OR
		((CONVERT(DATETIME, @StartTime, 114) < CONVERT(DATETIME, StartTime, 114) AND CONVERT(DATETIME, @StartTime, 114) < CONVERT(DATETIME, EndTime, 114))) AND 
		(CONVERT(DATETIME, @EndTime, 114) > CONVERT(DATETIME, StartTime, 114) AND CONVERT(DATETIME, @EndTime, 114) > CONVERT(DATETIME, EndTime, 114))) AND
		IsDeleted = 0 AND DoctorTimingId <> @ScheduleId
 
 ELSE
 IF(@Day = 1)
 
	SELECT COUNT(DoctorId) 
    FROM TBL_Doctor_Timing 
    WHERE 
		DoctorId IN (SELECT DoctorId FROM TBL_Doctor WHERE LoginId = (SELECT LoginId FROM TBL_Doctor WHERE DoctorId = @DoctorId) AND IsDeleted=0) AND Monday=1 AND
		(CONVERT(DATETIME, @StartTime, 114) BETWEEN CONVERT(DATETIME, StartTime, 114) AND CONVERT(DATETIME, EndTime, 114) OR
		CONVERT(DATETIME, @EndTime, 114) BETWEEN CONVERT(DATETIME, StartTime, 114) AND CONVERT(DATETIME, EndTime, 114) OR
		((CONVERT(DATETIME, @StartTime, 114) < CONVERT(DATETIME, StartTime, 114) AND CONVERT(DATETIME, @StartTime, 114) < CONVERT(DATETIME, EndTime, 114))) AND 
		(CONVERT(DATETIME, @EndTime, 114) > CONVERT(DATETIME, StartTime, 114) AND CONVERT(DATETIME, @EndTime, 114) > CONVERT(DATETIME, EndTime, 114))) AND
		IsDeleted = 0 AND DoctorTimingId <> @ScheduleId

ELSE
 IF(@Day = 2)
 
	SELECT COUNT(DoctorId) 
    FROM TBL_Doctor_Timing 
    WHERE 
		DoctorId IN (SELECT DoctorId FROM TBL_Doctor WHERE LoginId = (SELECT LoginId FROM TBL_Doctor WHERE DoctorId = @DoctorId) AND IsDeleted=0) AND Tuesday=1 AND
		(CONVERT(DATETIME, @StartTime, 114) BETWEEN CONVERT(DATETIME, StartTime, 114) AND CONVERT(DATETIME, EndTime, 114) OR
		CONVERT(DATETIME, @EndTime, 114) BETWEEN CONVERT(DATETIME, StartTime, 114) AND CONVERT(DATETIME, EndTime, 114) OR
		((CONVERT(DATETIME, @StartTime, 114) < CONVERT(DATETIME, StartTime, 114) AND CONVERT(DATETIME, @StartTime, 114) < CONVERT(DATETIME, EndTime, 114))) AND 
		(CONVERT(DATETIME, @EndTime, 114) > CONVERT(DATETIME, StartTime, 114) AND CONVERT(DATETIME, @EndTime, 114) > CONVERT(DATETIME, EndTime, 114))) AND
		IsDeleted = 0 AND DoctorTimingId <> @ScheduleId
		
ELSE
 IF(@Day = 3)
 
	SELECT COUNT(DoctorId) 
    FROM TBL_Doctor_Timing 
    WHERE 
		DoctorId IN (SELECT DoctorId FROM TBL_Doctor WHERE LoginId = (SELECT LoginId FROM TBL_Doctor WHERE DoctorId = @DoctorId) AND IsDeleted=0) AND Wednesday=1 AND
		(CONVERT(DATETIME, @StartTime, 114) BETWEEN CONVERT(DATETIME, StartTime, 114) AND CONVERT(DATETIME, EndTime, 114) OR
		CONVERT(DATETIME, @EndTime, 114) BETWEEN CONVERT(DATETIME, StartTime, 114) AND CONVERT(DATETIME, EndTime, 114) OR
		((CONVERT(DATETIME, @StartTime, 114) < CONVERT(DATETIME, StartTime, 114) AND CONVERT(DATETIME, @StartTime, 114) < CONVERT(DATETIME, EndTime, 114))) AND 
		(CONVERT(DATETIME, @EndTime, 114) > CONVERT(DATETIME, StartTime, 114) AND CONVERT(DATETIME, @EndTime, 114) > CONVERT(DATETIME, EndTime, 114))) AND
		IsDeleted = 0 AND DoctorTimingId <> @ScheduleId
		
ELSE
 IF(@Day = 4)
 
	SELECT COUNT(DoctorId) 
    FROM TBL_Doctor_Timing 
    WHERE 
		DoctorId IN (SELECT DoctorId FROM TBL_Doctor WHERE LoginId = (SELECT LoginId FROM TBL_Doctor WHERE DoctorId = @DoctorId) AND IsDeleted=0) AND Thursday=1 AND
		(CONVERT(DATETIME, @StartTime, 114) BETWEEN CONVERT(DATETIME, StartTime, 114) AND CONVERT(DATETIME, EndTime, 114) OR
		CONVERT(DATETIME, @EndTime, 114) BETWEEN CONVERT(DATETIME, StartTime, 114) AND CONVERT(DATETIME, EndTime, 114) OR
		((CONVERT(DATETIME, @StartTime, 114) < CONVERT(DATETIME, StartTime, 114) AND CONVERT(DATETIME, @StartTime, 114) < CONVERT(DATETIME, EndTime, 114))) AND 
		(CONVERT(DATETIME, @EndTime, 114) > CONVERT(DATETIME, StartTime, 114) AND CONVERT(DATETIME, @EndTime, 114) > CONVERT(DATETIME, EndTime, 114))) AND
		IsDeleted = 0 AND DoctorTimingId <> @ScheduleId
		
ELSE
 IF(@Day = 5)
 
	SELECT COUNT(DoctorId) 
    FROM TBL_Doctor_Timing 
    WHERE 
		DoctorId IN (SELECT DoctorId FROM TBL_Doctor WHERE LoginId = (SELECT LoginId FROM TBL_Doctor WHERE DoctorId = @DoctorId) AND IsDeleted=0) AND Friday=1 AND
		(CONVERT(DATETIME, @StartTime, 114) BETWEEN CONVERT(DATETIME, StartTime, 114) AND CONVERT(DATETIME, EndTime, 114) OR
		CONVERT(DATETIME, @EndTime, 114) BETWEEN CONVERT(DATETIME, StartTime, 114) AND CONVERT(DATETIME, EndTime, 114) OR
		((CONVERT(DATETIME, @StartTime, 114) < CONVERT(DATETIME, StartTime, 114) AND CONVERT(DATETIME, @StartTime, 114) < CONVERT(DATETIME, EndTime, 114))) AND 
		(CONVERT(DATETIME, @EndTime, 114) > CONVERT(DATETIME, StartTime, 114) AND CONVERT(DATETIME, @EndTime, 114) > CONVERT(DATETIME, EndTime, 114))) AND
		IsDeleted = 0 AND DoctorTimingId <> @ScheduleId
		
ELSE
 IF(@Day = 6)
 
	SELECT COUNT(DoctorId) 
    FROM TBL_Doctor_Timing 
    WHERE 
		DoctorId IN (SELECT DoctorId FROM TBL_Doctor WHERE LoginId = (SELECT LoginId FROM TBL_Doctor WHERE DoctorId = @DoctorId) AND IsDeleted=0) AND Saturday=1 AND
		(CONVERT(DATETIME, @StartTime, 114) BETWEEN CONVERT(DATETIME, StartTime, 114) AND CONVERT(DATETIME, EndTime, 114) OR
		CONVERT(DATETIME, @EndTime, 114) BETWEEN CONVERT(DATETIME, StartTime, 114) AND CONVERT(DATETIME, EndTime, 114) OR
		((CONVERT(DATETIME, @StartTime, 114) < CONVERT(DATETIME, StartTime, 114) AND CONVERT(DATETIME, @StartTime, 114) < CONVERT(DATETIME, EndTime, 114))) AND 
		(CONVERT(DATETIME, @EndTime, 114) > CONVERT(DATETIME, StartTime, 114) AND CONVERT(DATETIME, @EndTime, 114) > CONVERT(DATETIME, EndTime, 114))) AND
		IsDeleted = 0 AND DoctorTimingId <> @ScheduleId
 
 END
 
GO

/****** Object:  StoredProcedure [dbo].[USP_Common_ValidateDoctorServiceByAppointment]    Script Date: 07/13/2012 18:10:35 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Common_ValidateDoctorServiceByAppointment]
(
	@DoctorServiceId NVARCHAR(20),
	@Type INT,
	@currentDate DATETIME
	
)
AS
BEGIN

--validating the doctor while deleting it with booked patient appointment's

IF(@Type = 0)
	SELECT COUNT(AppointmentId) FROM TBL_Appointment WHERE DoctorId=@DoctorServiceId AND AppointmentDate>=@currentDate AND AppointmentDate<=GETDATE()+20 AND IsDeleted=0 AND StatusId<>5
ELSE
	SELECT COUNT(AppointmentId) FROM TBL_Appointment WHERE ServiceId=@DoctorServiceId AND AppointmentDate>=@currentDate AND AppointmentDate<=GETDATE()+20 AND IsDeleted=0 AND StatusId<>5
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Common_ValidateEmail]    Script Date: 07/13/2012 18:10:35 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Common_ValidateEmail]
(
	@Email nvarchar(250)
)
AS
BEGIN
	SELECT COUNT(LoginId) FROM TBL_Login WHERE EmailId=@Email AND IsDeleted=0 AND IsActivated=1
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Common_ValidateEmailByLogInId]    Script Date: 07/13/2012 18:10:36 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Common_ValidateEmailByLogInId]
(
	@Email nvarchar(250),
	@LoginId INT
)
AS
BEGIN
	SELECT COUNT(LoginId) FROM TBL_Login WHERE EmailId=@Email AND LoginId<>@LoginId AND IsDeleted=0 AND IsActivated=1
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Common_ValidateEmailByService]    Script Date: 07/13/2012 18:10:36 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Common_ValidateEmailByService] 
(
	@Email nvarchar(250)
)
AS
BEGIN
	SELECT COUNT(LoginId) FROM TBL_Service WHERE LoginId IN (SELECT LoginId FROM TBL_Login WHERE IsDeleted=0 AND EmailId=@Email) AND IsDeleted=0 
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Common_ValidateEmailBySignIn]    Script Date: 07/13/2012 18:10:36 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Common_ValidateEmailBySignIn] 
(
	@Email nvarchar(250)
)
AS
BEGIN
	SELECT COUNT(LoginId) FROM TBL_Doctor WHERE LoginId IN (SELECT LoginId FROM TBL_Login WHERE IsDeleted=0 AND EmailId=@Email) AND IsDeleted=0 
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Common_ValidateEmailBySignInService]    Script Date: 07/13/2012 18:10:36 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Common_ValidateEmailBySignInService] 
(
	@Email nvarchar(250)
)
AS
BEGIN	
	SELECT COUNT(LoginId) FROM TBL_Login WHERE IsDeleted=0 AND EmailId=@Email AND CountryId IS NOT NULL AND IsActivated=1
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Common_ValidateEmailOrganization]    Script Date: 07/13/2012 18:10:36 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Common_ValidateEmailOrganization]
(
	@EmailId nvarchar(250),
	@OrganizationId int
)
AS
BEGIN
	SELECT COUNT(DoctorId) FROM TBL_Doctor WHERE LoginId IN (
		SELECT LoginId FROM TBL_Login WHERE EmailId=@EmailId
	) 
	AND OrganizationId=@OrganizationId AND IsDeleted=0
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Common_ValidateForgetPasswordEmail]    Script Date: 07/13/2012 18:10:36 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Common_ValidateForgetPasswordEmail] 
(
	@Mobile NVARCHAR(50)
)
AS
BEGIN
	SELECT COUNT(Id) FROM TBL_SMS WHERE Mobile=@Mobile AND (CONVERT(nvarchar(15), CreatedOn, 101))= (CONVERT(nvarchar(15), GETDATE(), 101)) AND EmailCount>0
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Common_ValidateForgetPasswordSMS]    Script Date: 07/13/2012 18:10:36 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Common_ValidateForgetPasswordSMS] 
(
	@Mobile NVARCHAR(50)
)
AS
BEGIN
	SELECT COUNT(Id) FROM TBL_SMS WHERE Mobile=@Mobile AND Action='Forgot Password' AND (CONVERT(nvarchar(15), CreatedOn, 101))=(CONVERT(nvarchar(15),GETDATE(),101))
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Common_ValidateMobile]    Script Date: 07/13/2012 18:10:36 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Common_ValidateMobile]
(
	@MobileId nvarchar(20)
)
AS
BEGIN
	SELECT COUNT(LoginId) FROM TBL_Login WHERE MobileId=@MobileId AND IsDeleted=0 AND IsActivated=1
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Common_ValidateMobileByLogInId]    Script Date: 07/13/2012 18:10:36 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Common_ValidateMobileByLogInId]
(
	@MobileId NVARCHAR(20),
	@LoginId INT
)
AS
BEGIN
	SELECT COUNT(LoginId) FROM TBL_Login WHERE MobileId=@MobileId AND LoginId<>@LoginId AND IsDeleted=0 AND IsActivated=1
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Common_ValidateMobileByService]    Script Date: 07/13/2012 18:10:36 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Common_ValidateMobileByService]
(
	@MobileId nvarchar(20)
)
AS
BEGIN
	SELECT COUNT(LoginId) FROM TBL_Service WHERE LoginId IN (SELECT LoginId FROM TBL_Login WHERE IsDeleted=0 AND MobileId=@MobileId) AND IsDeleted=0 AND IsActivated=1
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Common_ValidateMobileBySignIn]    Script Date: 07/13/2012 18:10:36 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Common_ValidateMobileBySignIn]
(
	@MobileId nvarchar(20)
)
AS
BEGIN
	SELECT COUNT(LoginId) FROM TBL_Doctor WHERE LoginId IN (SELECT LoginId FROM TBL_Login WHERE IsDeleted=0 AND MobileId=@MobileId) AND IsDeleted=0 AND IsActivated=1
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Common_ValidateMobileBySignInService]    Script Date: 07/13/2012 18:10:36 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Common_ValidateMobileBySignInService] 
(
	@MobileId nvarchar(20)
)
AS
BEGIN

	SELECT COUNT(LoginId) FROM TBL_Login WHERE IsDeleted=0 AND MobileId=@MobileId AND CountryId IS NOT NULL AND IsActivated=1
	
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Common_ValidateMobileOrganization]    Script Date: 07/13/2012 18:10:36 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Common_ValidateMobileOrganization]
(
	@MobileId nvarchar(20),
	@OrganizationId int
)
AS
BEGIN
	SELECT COUNT(DoctorId) FROM TBL_Doctor WHERE LoginId IN (
		SELECT LoginId FROM TBL_Login WHERE MobileId=@MobileId
	)
	AND OrganizationId=@OrganizationId AND IsDeleted = 0
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Common_ValidatePatientMobileById]    Script Date: 07/13/2012 18:10:36 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Common_ValidatePatientMobileById] 
(
	@SignInId nvarchar(max)
)
AS
BEGIN
	SELECT COUNT(LoginId) FROM TBL_Patient WHERE LoginId IN (SELECT LoginId FROM TBL_Login WHERE IsDeleted=0 AND (MobileId=@SignInId OR EmailId=@SignInId)) AND IsDeleted=0 
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Common_ValidateRegistrationNumber]    Script Date: 07/13/2012 18:10:36 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Common_ValidateRegistrationNumber] 
(
	@RegistrationNumber nvarchar(250),
	@RegistrationYear int, 
	@MobileId NVARCHAR(25)
)
AS
BEGIN
	IF((SELECT COUNT(DoctorId) FROM TBL_Doctor WHERE RegistrationNumber=@RegistrationNumber AND RegistrationYear=@RegistrationYear) > 0)
	BEGIN
		SELECT COUNT(DoctorId) FROM TBL_Doctor WHERE RegistrationNumber=@RegistrationNumber AND RegistrationYear=@RegistrationYear AND
		LoginId=(SELECT TOP 1 LoginId FROM TBL_Doctor WHERE LoginId IN (SELECT LoginId FROM TBL_Login WHERE IsDeleted=0 AND MobileId=@MobileId) AND IsDeleted = 0) AND IsDeleted=0
	END	
	ELSE
		SELECT -1
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Common_ValidateRegistrationYear]    Script Date: 07/13/2012 18:10:36 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Common_ValidateRegistrationYear] 
(
	@RegistrationNumber nvarchar(250),
	@RegistrationYear int, 
	@MobileId NVARCHAR(25)
)
AS
BEGIN
-- VALIDATION OF REGISTRATION NUMBER WHILE EDITING	

	SELECT COUNT(DoctorId) FROM TBL_Doctor WHERE RegistrationNumber=@RegistrationNumber AND RegistrationYear=@RegistrationYear AND
	LoginId <> (SELECT TOP 1 LoginId FROM TBL_Doctor WHERE LoginId IN (SELECT LoginId FROM TBL_Login WHERE IsDeleted=0 AND MobileId=@MobileId AND EmailId IS NOT NULL) AND IsDeleted = 0) AND IsDeleted=0	
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Common_ValidateScheduleByAppointment]    Script Date: 07/13/2012 18:10:36 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Common_ValidateScheduleByAppointment] 
(
	@DoctorServiceTimingId NVARCHAR(20),
	@Type INT,
	@currentDate DATETIME
)
AS
BEGIN

--validating the schedule while deleting it with booked patient appointment

IF(@Type = 0)
	SELECT COUNT(AppointmentId) FROM TBL_Appointment WHERE DoctorTimingId=@DoctorServiceTimingId AND AppointmentDate>=@currentDate AND IsDeleted=0 AND StatusId<>5
ELSE
	SELECT COUNT(AppointmentId) FROM TBL_Appointment WHERE ServiceTimingId=@DoctorServiceTimingId AND AppointmentDate>=@currentDate AND IsDeleted=0 AND StatusId<>5
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Common_ValidateScheduleByAppointmentEndTime]    Script Date: 07/13/2012 18:10:36 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Common_ValidateScheduleByAppointmentEndTime]
(
	@DoctorServiceTimingId NVARCHAR(20),
	@Type INT,
	@scheduleEndTime datetime
)
AS
BEGIN
	IF(@Type = 0)
		SELECT COUNT(AppointmentId) FROM TBL_Appointment A WHERE DoctorTimingId=@DoctorServiceTimingId AND A.AppointmentDate  + (SELECT EndTime FROM TBL_Doctor_Timing WHERE DoctorTimingId = @DoctorServiceTimingId) >=@scheduleEndTime AND IsDeleted=0 AND StatusId<>5
	ELSE
		SELECT COUNT(AppointmentId) FROM TBL_Appointment A WHERE ServiceTimingId=@DoctorServiceTimingId AND A.AppointmentDate  + (SELECT EndTime FROM TBL_Service_Timing WHERE ServiceTimingId = @DoctorServiceTimingId)>=@scheduleEndTime AND IsDeleted=0 AND StatusId<>5
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Common_ValidateServiceNameOrganization]    Script Date: 07/13/2012 18:10:37 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Common_ValidateServiceNameOrganization] 
(	
	@ServiceName nvarchar(250),
	@OrganizationId int,
	@ServiceId nvarchar(250) 
)
AS
BEGIN
	SELECT COUNT(ServiceId) FROM TBL_Service WHERE ServiceId<>@ServiceId AND ServiceName=@ServiceName AND OrganizationId=@OrganizationId AND IsDeleted=0
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Common_ValidateServiceSchedule]    Script Date: 07/13/2012 18:10:37 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Common_ValidateServiceSchedule] 
(
	@ServcieId INT,
	@Day INT,
	@StartTime NVARCHAR(15),
	@EndTime NVARCHAR(15),
	@ScheduleId INT
)
AS
BEGIN
 
 IF(@Day = 0) 
	    
    SELECT COUNT(ServiceId) 
		FROM TBL_Service_Timing 
		WHERE 
			ServiceId=@ServcieId AND Sunday = 1 AND
			(CONVERT(DATETIME, @StartTime, 114) BETWEEN CONVERT(DATETIME, StartTime, 114) AND CONVERT(DATETIME, EndTime, 114) OR
			CONVERT(DATETIME, @EndTime, 114) BETWEEN CONVERT(DATETIME, StartTime, 114) AND CONVERT(DATETIME, EndTime, 114) OR
			((CONVERT(DATETIME, @StartTime, 114) < CONVERT(DATETIME, StartTime, 114) AND CONVERT(DATETIME, @StartTime, 114) < CONVERT(DATETIME, EndTime, 114))) AND 
			(CONVERT(DATETIME, @EndTime, 114) > CONVERT(DATETIME, StartTime, 114) AND CONVERT(DATETIME, @EndTime, 114) > CONVERT(DATETIME, EndTime, 114))) AND
			IsDeleted = 0 AND ServiceTimingId <> @ScheduleId
 
 ELSE
 IF(@Day = 1)
 
	SELECT COUNT(ServiceId) 
		FROM TBL_Service_Timing 
		WHERE 
			ServiceId=@ServcieId AND Monday = 1 AND
			(CONVERT(DATETIME, @StartTime, 114) BETWEEN CONVERT(DATETIME, StartTime, 114) AND CONVERT(DATETIME, EndTime, 114) OR
			CONVERT(DATETIME, @EndTime, 114) BETWEEN CONVERT(DATETIME, StartTime, 114) AND CONVERT(DATETIME, EndTime, 114) OR
			((CONVERT(DATETIME, @StartTime, 114) < CONVERT(DATETIME, StartTime, 114) AND CONVERT(DATETIME, @StartTime, 114) < CONVERT(DATETIME, EndTime, 114))) AND 
			(CONVERT(DATETIME, @EndTime, 114) > CONVERT(DATETIME, StartTime, 114) AND CONVERT(DATETIME, @EndTime, 114) > CONVERT(DATETIME, EndTime, 114))) AND
			IsDeleted = 0 AND ServiceTimingId <> @ScheduleId

ELSE
 IF(@Day = 2)
 
	SELECT COUNT(ServiceId) 
		FROM TBL_Service_Timing 
		WHERE 
			ServiceId=@ServcieId AND Tuesday = 1 AND
			(CONVERT(DATETIME, @StartTime, 114) BETWEEN CONVERT(DATETIME, StartTime, 114) AND CONVERT(DATETIME, EndTime, 114) OR
			CONVERT(DATETIME, @EndTime, 114) BETWEEN CONVERT(DATETIME, StartTime, 114) AND CONVERT(DATETIME, EndTime, 114) OR
			((CONVERT(DATETIME, @StartTime, 114) < CONVERT(DATETIME, StartTime, 114) AND CONVERT(DATETIME, @StartTime, 114) < CONVERT(DATETIME, EndTime, 114))) AND 
			(CONVERT(DATETIME, @EndTime, 114) > CONVERT(DATETIME, StartTime, 114) AND CONVERT(DATETIME, @EndTime, 114) > CONVERT(DATETIME, EndTime, 114))) AND
			IsDeleted = 0 AND ServiceTimingId <> @ScheduleId
		
ELSE
 IF(@Day = 3)
 
	SELECT COUNT(ServiceId) 
		FROM TBL_Service_Timing 
		WHERE 
			ServiceId=@ServcieId AND Wednesday = 1 AND
			(CONVERT(DATETIME, @StartTime, 114) BETWEEN CONVERT(DATETIME, StartTime, 114) AND CONVERT(DATETIME, EndTime, 114) OR
			CONVERT(DATETIME, @EndTime, 114) BETWEEN CONVERT(DATETIME, StartTime, 114) AND CONVERT(DATETIME, EndTime, 114) OR
			((CONVERT(DATETIME, @StartTime, 114) < CONVERT(DATETIME, StartTime, 114) AND CONVERT(DATETIME, @StartTime, 114) < CONVERT(DATETIME, EndTime, 114))) AND 
			(CONVERT(DATETIME, @EndTime, 114) > CONVERT(DATETIME, StartTime, 114) AND CONVERT(DATETIME, @EndTime, 114) > CONVERT(DATETIME, EndTime, 114))) AND
			IsDeleted = 0 AND ServiceTimingId <> @ScheduleId
		
ELSE
 IF(@Day = 4)
 
	SELECT COUNT(ServiceId) 
		FROM TBL_Service_Timing 
		WHERE 
			ServiceId=@ServcieId AND Thursday = 1 AND
			(CONVERT(DATETIME, @StartTime, 114) BETWEEN CONVERT(DATETIME, StartTime, 114) AND CONVERT(DATETIME, EndTime, 114) OR
			CONVERT(DATETIME, @EndTime, 114) BETWEEN CONVERT(DATETIME, StartTime, 114) AND CONVERT(DATETIME, EndTime, 114) OR
			((CONVERT(DATETIME, @StartTime, 114) < CONVERT(DATETIME, StartTime, 114) AND CONVERT(DATETIME, @StartTime, 114) < CONVERT(DATETIME, EndTime, 114))) AND 
			(CONVERT(DATETIME, @EndTime, 114) > CONVERT(DATETIME, StartTime, 114) AND CONVERT(DATETIME, @EndTime, 114) > CONVERT(DATETIME, EndTime, 114))) AND
			IsDeleted = 0 AND ServiceTimingId <> @ScheduleId
		
ELSE
 IF(@Day = 5)
 
	SELECT COUNT(ServiceId) 
		FROM TBL_Service_Timing 
		WHERE 
			ServiceId=@ServcieId AND Friday = 1 AND
			(CONVERT(DATETIME, @StartTime, 114) BETWEEN CONVERT(DATETIME, StartTime, 114) AND CONVERT(DATETIME, EndTime, 114) OR
			CONVERT(DATETIME, @EndTime, 114) BETWEEN CONVERT(DATETIME, StartTime, 114) AND CONVERT(DATETIME, EndTime, 114) OR
			((CONVERT(DATETIME, @StartTime, 114) < CONVERT(DATETIME, StartTime, 114) AND CONVERT(DATETIME, @StartTime, 114) < CONVERT(DATETIME, EndTime, 114))) AND 
			(CONVERT(DATETIME, @EndTime, 114) > CONVERT(DATETIME, StartTime, 114) AND CONVERT(DATETIME, @EndTime, 114) > CONVERT(DATETIME, EndTime, 114))) AND
			IsDeleted = 0 AND ServiceTimingId <> @ScheduleId
		
ELSE
 IF(@Day = 6)
 
	SELECT COUNT(ServiceId) 
		FROM TBL_Service_Timing 
		WHERE 
			ServiceId=@ServcieId AND Saturday = 1 AND
			(CONVERT(DATETIME, @StartTime, 114) BETWEEN CONVERT(DATETIME, StartTime, 114) AND CONVERT(DATETIME, EndTime, 114) OR
			CONVERT(DATETIME, @EndTime, 114) BETWEEN CONVERT(DATETIME, StartTime, 114) AND CONVERT(DATETIME, EndTime, 114) OR
			((CONVERT(DATETIME, @StartTime, 114) < CONVERT(DATETIME, StartTime, 114) AND CONVERT(DATETIME, @StartTime, 114) < CONVERT(DATETIME, EndTime, 114))) AND 
			(CONVERT(DATETIME, @EndTime, 114) > CONVERT(DATETIME, StartTime, 114) AND CONVERT(DATETIME, @EndTime, 114) > CONVERT(DATETIME, EndTime, 114))) AND
			IsDeleted = 0 AND ServiceTimingId <> @ScheduleId
 
 END
GO

/****** Object:  StoredProcedure [dbo].[USP_Common_ValidateSignIn]    Script Date: 07/13/2012 18:10:37 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Common_ValidateSignIn] 
(
	@SignInId nvarchar(250),
	@Password nvarchar(15)
)
AS
BEGIN
	DECLARE @LoginId INT
	DECLARE @AccountCount INT
	
	SET @LoginId = 0
	SET @AccountCount = 0
	
	SELECT @LoginId=LoginId FROM TBL_Login
	WHERE
		IsDeleted=0 AND
		IsActivated=1 AND
		((MedAppId=@SignInId AND Password=@Password) OR
		(EmailId=@SignInId AND Password=@Password) OR
		(MobileId=@SignInId AND Password=@Password))
		
	IF @LoginId > 0
	BEGIN
		SELECT @AccountCount=@AccountCount+COUNT(PatientId) FROM TBL_Patient WHERE LoginId=@LoginId
		SELECT @AccountCount=@AccountCount+COUNT(OrganizationId) FROM TBL_Organization WHERE LoginId=@LoginId 
		SELECT @AccountCount=@AccountCount+COUNT(DoctorId) FROM TBL_Doctor WHERE LoginId=@LoginId
		SELECT @AccountCount=@AccountCount+COUNT(ServiceId) FROM TBL_Service WHERE LoginId=@LoginId
		
		IF @AccountCount > 0
			SELECT @AccountCount
		ELSE
			SELECT -1 --New Account
	END
	ELSE
	BEGIN
		SELECT @AccountCount
	END
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Common_ValidateSignInByAccountTypeId]    Script Date: 07/13/2012 18:10:37 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Common_ValidateSignInByAccountTypeId]
(
	@SignInId nvarchar(250),
	@AccountTypeId INT
)
AS
BEGIN
	IF @AccountTypeId = 2
		SELECT COUNT(LoginId) FROM TBL_Service WHERE LoginId in (
			SELECT LoginId FROM TBL_Login
			WHERE
				IsDeleted=0 AND
				(EmailId=@SignInId OR MedAppId=@SignInId OR MobileId=@SignInId)
		)
	IF @AccountTypeId = 3
		SELECT COUNT(LoginId) FROM TBL_Doctor WHERE LoginId in (
			SELECT LoginId FROM TBL_Login
			WHERE
				IsDeleted=0 AND
				(EmailId=@SignInId OR MedAppId=@SignInId OR MobileId=@SignInId)
		)
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Common_ValidateSignInNonActivate]    Script Date: 07/13/2012 18:10:37 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Common_ValidateSignInNonActivate]
(
	@SignInId nvarchar(250),
	@Password nvarchar(15)
)
AS
BEGIN
	DECLARE @LoginEmail VARCHAR(100)
	DECLARE @AccountCount INT
	
	SELECT @LoginEmail=EmailId FROM TBL_Login WHERE MobileId=@SignInId OR EmailId=@SignInId
	SELECT @AccountCount=COUNT(LoginId) FROM TBL_Login WHERE IsDeleted=0 AND EmailId=@LoginEmail AND IsActivated=1
	
	IF(@AccountCount<=0)
	BEGIN
		SELECT COUNT(LoginId) FROM TBL_Login
		WHERE
			IsDeleted=0 AND
			IsActivated=0 AND
			((MedAppId=@SignInId AND Password=@Password) OR
			(EmailId=@SignInId AND Password=@Password) OR
			(MobileId=@SignInId AND Password=@Password))
	END
	ELSE
	BEGIN
		SELECT -1
	END
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Doctor_Acceptance]    Script Date: 07/13/2012 18:10:37 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Doctor_Acceptance]
(
	@DoctorId INT
)
AS
BEGIN
	SELECT COUNT(DoctorId) FROM TBL_Doctor WHERE DoctorId=@DoctorId AND IsActivated=1
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Doctor_DeleteDepartmentDiagnosis]    Script Date: 07/13/2012 18:10:37 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Doctor_DeleteDepartmentDiagnosis]
(
	@DepartmentId INT
)
AS
DELETE FROM TBL_Diagnosis_Department WHERE 
	DiagnosisId IN (
	SELECT DiagnosisId FROM TBL_Master_Diagnosis WHERE DiagnosisId IN (
	SELECT DiagnosisId FROM TBL_Diagnosis_Department WHERE DepartmentId = @DepartmentId
	) AND IsTreatment = 0 
	)
GO

/****** Object:  StoredProcedure [dbo].[USP_Doctor_DeleteDoctorById]    Script Date: 07/13/2012 18:10:37 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Doctor_DeleteDoctorById] 
(
	@DoctorId INT
)
AS
BEGIN

DECLARE @Count INT

SELECT @Count = COUNT(LoginId) FROM TBL_Doctor WHERE LoginId = (SELECT LoginId FROM TBL_Doctor WHERE DoctorId=@DoctorId) AND IsDeleted=0

UPDATE TBL_Doctor SET
	IsDeleted=1,
	ModifiedOn=GETDATE()
WHERE
	DoctorId=@DoctorId
	
UPDATE TBL_Doctor_Timing SET
	IsDeleted=1,
	ModifiedOn=GETDATE()
WHERE
	DoctorId=@DoctorId
	
DELETE FROM dbo.TBL_Doctor_Diagnosis WHERE DoctorId=@DoctorId

DELETE FROM TBL_Doctor_Education WHERE DoctorId=@DoctorId

DELETE FROM TBL_Doctor_Experience WHERE DoctorId=@DoctorId

END
GO

/****** Object:  StoredProcedure [dbo].[USP_Doctor_DeleteDoctorDiagnosis]    Script Date: 07/13/2012 18:10:37 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Doctor_DeleteDoctorDiagnosis]
(
	@DoctorId INT
)
AS
DELETE FROM TBL_Doctor_Diagnosis WHERE DoctorId=@DoctorId
GO

/****** Object:  StoredProcedure [dbo].[USP_Doctor_DeleteDoctorEducation]    Script Date: 07/13/2012 18:10:37 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Doctor_DeleteDoctorEducation]
(
	@DoctorId INT
)
AS
BEGIN
	DELETE FROM TBL_Doctor_Education WHERE DoctorId IN 
				(SELECT DoctorId FROM TBL_Doctor WHERE LoginId IN
				(SELECT LoginId FROM TBL_Doctor WHERE DoctorId=@DoctorId))
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Doctor_DeleteDoctorExperience]    Script Date: 07/13/2012 18:10:37 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Doctor_DeleteDoctorExperience]
(
	@DoctorId INT
)
AS
BEGIN
	DELETE FROM TBL_Doctor_Experience WHERE DoctorId IN 
				(SELECT DoctorId FROM TBL_Doctor WHERE LoginId IN
				(SELECT LoginId FROM TBL_Doctor WHERE DoctorId=@DoctorId))
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Doctor_DeleteEducationById]    Script Date: 07/13/2012 18:10:38 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Doctor_DeleteEducationById]  
(
@EducationId INT
)
AS
BEGIN
	DELETE FROM TBL_Doctor_Education WHERE EducationId=@EducationId
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Doctor_DeleteExperienceById]    Script Date: 07/13/2012 18:10:38 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Doctor_DeleteExperienceById]  
(
@ExperienceId INT
)
AS
BEGIN
	DELETE FROM TBL_Doctor_Experience WHERE  ExperienceId=@ExperienceId
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Doctor_DeleteSchedule]    Script Date: 07/13/2012 18:10:38 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROC [dbo].[USP_Doctor_DeleteSchedule]
(
	@DoctorTimingId INT
)
AS
UPDATE TBL_BlockCalendar SET
	IsDeleted=1
	WHERE
	DoctorTimingId=@DoctorTimingId

GO

/****** Object:  StoredProcedure [dbo].[USP_Doctor_DeleteScheduleById]    Script Date: 07/13/2012 18:10:38 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Doctor_DeleteScheduleById]
(
	@DoctorTimingId INT
)
AS
BEGIN
	UPDATE TBL_Doctor_Timing SET
		IsDeleted=1,
		ModifiedOn=GETDATE()
	WHERE
		DoctorTimingId=@DoctorTimingId
		
	UPDATE TBL_BlockCalendar SET
		IsDeleted=1
	WHERE
		DoctorTimingId=@DoctorTimingId
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Doctor_DeleteSymptomDiagnosis]    Script Date: 07/13/2012 18:10:38 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROC [dbo].[USP_Doctor_DeleteSymptomDiagnosis]
(
	@DiagnosisId INT
)
AS
DELETE FROM TBL_Symptom_Diagnosis WHERE DiagnosisId=@DiagnosisId

GO

/****** Object:  StoredProcedure [dbo].[USP_Doctor_FindDoctorBySearch]    Script Date: 07/13/2012 18:10:38 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Doctor_FindDoctorBySearch]
(
	@Doctor NVARCHAR(MAX)
)
AS
BEGIN

	SELECT 
		TOP 1
		D.DoctorId,
		'Dr. ' + D.DoctorName + ', ' + D.Degrees [DoctorName],
		D.DoctorName [DoctorNameOnly],
		D.Gender,
		MD.DepartmentName [Department],
		D.RegistrationYear,
		D.RegistrationNumber,
		D.Experience,
		D.PhotoName
	FROM
		TBL_Doctor D,
		TBL_Organization O,
		TBL_Master_Department MD
	WHERE
		D.PreferredName=@Doctor AND
		D.IsDeleted=0 AND
		D.OrganizationId=O.OrganizationId AND
		D.DepartmentId=MD.DepartmentId
	ORDER BY D.DoctorId
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Doctor_GetBlockCalendarBySearch]    Script Date: 07/13/2012 18:10:38 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Doctor_GetBlockCalendarBySearch]
(
	@Search NVARCHAR(250),
	@DoctorId INT
)
AS
BEGIN
	SELECT
		BC.BlockId,
		BC.DoctorId,
		DT.StartTime + ' - ' + DT.EndTime [Timing],
		DT.Address,
		BlockType=CASE BC.BlockTypeId
			WHEN 1 THEN 'Block by Date'
			WHEN 2 THEN 'Block by Date & Time'
		END,
		BC.BlockTypeId,
		Type=CASE BC.Type
			WHEN 'False' THEN 0
			WHEN 'True' THEN 1
		END,
		BC.BlockStart,
		BC.BlockEnd,
		BC.Reason,
		BC.CreatedOn
	FROM
		TBL_BlockCalendar BC,
		TBL_Doctor_Timing DT
	WHERE
	BC.IsDeleted=0 AND
	BC.DoctorTimingId=DT.DoctorTimingId AND
	BC.DoctorId=@DoctorId AND
	(
		BC.Reason LIKE '%' + @Search + '%' OR
		DT.StartTime LIKE '%' + @Search + '%' OR
		DT.EndTime LIKE '%' + @Search + '%'
	) AND BC.IsDeleted = 0
	ORDER BY DT.DoctorTimingId
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Doctor_GetDiagnosisByDepartmentId]    Script Date: 07/13/2012 18:10:38 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Doctor_GetDiagnosisByDepartmentId]
(
@DepartmentId INT
)
AS
SELECT 
	DD.DiagnosisId [DiagnosisId],
	D.Diagnosis [Diagnosis]
FROM 
	TBL_Diagnosis_Department DD, 
	dbo.TBL_Master_Diagnosis D
WHERE 
	DD.DepartmentId=@DepartmentId AND  
	DD.DiagnosisId=D.DiagnosisId  AND D.IsDeleted = 0 AND D.IsTreatment = 0
GO

/****** Object:  StoredProcedure [dbo].[USP_Doctor_GetDiagnosisByDoctorDepartmentId]    Script Date: 07/13/2012 18:10:38 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Doctor_GetDiagnosisByDoctorDepartmentId]
(
	@SignInId nvarchar(250),
	@OrganizationId INT
)
AS
BEGIN
	DECLARE @LoginId INT
	DECLARE @DepartmentId INT
	DECLARE @DoctorId INT
	
	SELECT @LoginId=LoginId FROM TBL_Login
	WHERE
		IsDeleted=0 AND
		(EmailId=@SignInId OR MedAppId=@SignInId OR MobileId=@SignInId)
		
	SELECT @DepartmentId=DepartmentId FROM TBL_Doctor 
	WHERE 
		LoginId=@LoginId AND OrganizationId=@OrganizationId

	SELECT 
		 Diagnosis, DiagnosisId
	FROM 
		TBL_Master_Diagnosis 
	WHERE
		DiagnosisId in(SELECT DiagnosisId FROM TBL_Diagnosis_Department WHERE DepartmentId=@DepartmentId)  
		
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Doctor_GetDiagnosisByDoctorId]    Script Date: 07/13/2012 18:10:38 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Doctor_GetDiagnosisByDoctorId]
(
@DoctorId INT
)
AS

SELECT DiagnosisId 
FROM dbo.TBL_Doctor_Diagnosis
WHERE DoctorId = @DoctorId
GO

/****** Object:  StoredProcedure [dbo].[USP_Doctor_GetDoctor]    Script Date: 07/13/2012 18:10:38 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Doctor_GetDoctor] 
(
	@SignInId nvarchar(250)
)
AS
BEGIN
	SELECT L.*, D.*, (SELECT DepartmentName FROM TBL_Master_Department WHERE DepartmentId=D.DepartmentId) [DepartmentName] FROM
		TBL_Login L,
		TBL_Doctor D
	WHERE
		L.IsDeleted=0 AND
		(L.EmailId=@SignInId OR L.MedAppId=@SignInId OR L.MobileId=@SignInId) AND
		D.LoginId=L.LoginId AND D.IsDeleted=0
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Doctor_GetDoctorById]    Script Date: 07/13/2012 18:10:38 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Doctor_GetDoctorById]
(
	@DoctorId INT
)
AS
BEGIN
	SELECT L.*, D.*, (SELECT DepartmentName FROM TBL_Master_Department WHERE DepartmentId=D.DepartmentId) [DepartmentName] FROM
		TBL_Login L,
		TBL_Doctor D
	WHERE
		D.IsDeleted=0 AND
		D.DoctorId=@DoctorId AND
		D.LoginId=L.LoginId
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Doctor_GetDoctorBySearch]    Script Date: 07/13/2012 18:10:38 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Doctor_GetDoctorBySearch]
(
	@Search NVARCHAR(250),
	@OrganizationId INT
)
AS
SELECT 
	D.DoctorId,
	CASE ISNULL(D.Degrees, '')
		WHEN '' THEN 'Dr. ' + D.DoctorName
		ELSE 'Dr. ' + D.DoctorName + ', ' + ISNULL(D.Degrees, '')
	END [DoctorName],
	MD.DepartmentName [Department]
FROM
	TBL_Doctor D,
	TBL_Master_Department MD
WHERE
D.OrganizationId=@OrganizationId AND
D.DepartmentId=MD.DepartmentId AND
D.IsDeleted=0 AND
(
	D.DoctorName LIKE '%' + @Search + '%' OR
	D.Degrees LIKE '%' + @Search + '%' OR
	MD.DepartmentName LIKE '%' + @Search + '%'
)
ORDER BY D.DoctorName
GO

/****** Object:  StoredProcedure [dbo].[USP_Doctor_GetDoctorEducationByDoctorId]    Script Date: 07/13/2012 18:10:39 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Doctor_GetDoctorEducationByDoctorId]
(
	@DoctorId INT
)
AS
BEGIN
	SELECT *,
	(SELECT CountryName FROM TBL_GeoPostcodes_Country WHERE CountryId=D.CountryId) [CountryName],
	(SELECT StateName FROM TBL_GeoPostcodes_State WHERE StateId=D.StateId) [StateName],
	(SELECT CityName FROM TBL_GeoPostcodes_City WHERE CityId=D.CityId) [CityName]
	 FROM TBL_Doctor_Education D WHERE DoctorId=@DoctorId
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Doctor_GetDoctorEducationByEducationId]    Script Date: 07/13/2012 18:10:39 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Doctor_GetDoctorEducationByEducationId]
(
	@EducationId INT
)
AS
BEGIN
	SELECT * FROM TBL_Doctor_Education WHERE EducationId=@EducationId
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Doctor_GetDoctorExperienceByDoctorId]    Script Date: 07/13/2012 18:10:39 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Doctor_GetDoctorExperienceByDoctorId]
(
	@DoctorId INT
)
AS
BEGIN
	SELECT
		*,
		(SELECT CountryName FROM TBL_GeoPostcodes_Country WHERE CountryId=D.CountryId) [CountryName],
		(SELECT StateName FROM TBL_GeoPostcodes_State WHERE StateId=D.StateId) [StateName],
		(SELECT CityName FROM TBL_GeoPostcodes_City WHERE CityId=D.CityId) [CityName]
	 FROM TBL_Doctor_Experience D WHERE DoctorId=@DoctorId
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Doctor_GetDoctorExperienceByExperienceId]    Script Date: 07/13/2012 18:10:39 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Doctor_GetDoctorExperienceByExperienceId]
(
	@ExperienceId INT
)
AS
BEGIN
	SELECT * FROM TBL_Doctor_Experience WHERE ExperienceId=@ExperienceId
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Doctor_GetDoctorNameByDoctorId]    Script Date: 07/13/2012 18:10:39 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Doctor_GetDoctorNameByDoctorId]
(
	@DoctorId INT
)
AS
	SELECT 'Dr. ' + D.DoctorName [DoctorName]
	FROM TBL_Doctor D
	WHERE D.DoctorId=@DoctorId
GO

/****** Object:  StoredProcedure [dbo].[USP_Doctor_GetDoctorNameById]    Script Date: 07/13/2012 18:10:39 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Doctor_GetDoctorNameById]
(
	@DoctorId INT
)
AS
SELECT 
	CASE ISNULL(D.Degrees, '')
		WHEN '' THEN 'Dr. ' + D.DoctorName
		ELSE 'Dr. ' + D.DoctorName + ', ' + ISNULL(D.Degrees, '')
	END [DoctorName]
FROM
	TBL_Doctor D
WHERE
	D.DoctorId=@DoctorId
GO

/****** Object:  StoredProcedure [dbo].[USP_Doctor_GetHospitalByDoctorId]    Script Date: 07/13/2012 18:10:39 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Doctor_GetHospitalByDoctorId]
(
@DoctorId INT
)
AS
BEGIN
	
SELECT DISTINCT (O.OrganizationName) + ' - ' + UPPER(O.BranchName) [OrganizationName],
	(SELECT CityName FROM TBL_GeoPostcodes_City WHERE CityId=O.CityId) [CityName],
	(SELECT StateName FROM TBL_GeoPostcodes_State WHERE StateId=O.StateId) [StateName],
	(SELECT CountryName FROM TBL_GeoPostcodes_Country WHERE CountryId=O.CountryId) [CountryName],
	 O.SubDomain, D.DoctorId
	FROM TBL_Organization O, TBL_Doctor D, TBL_Doctor_Timing DT 
	WHERE D.LoginId IN (SELECT LoginId FROM TBL_Doctor WHERE DoctorId=@DoctorId) AND O.OrganizationId=D.OrganizationId AND D.IsDeleted=0 AND D.DoctorId=DT.DoctorId AND DT.IsDeleted=0 AND O.IsActivated=1
	ORDER BY OrganizationName
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Doctor_GetScheduleByDoctorId]    Script Date: 07/13/2012 18:10:39 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Doctor_GetScheduleByDoctorId]
(
	@DoctorId NVARCHAR(20)
)
AS
BEGIN

--validating the doctor while editing the department with booked patient appointment's
	SELECT 
	dt.DoctorTimingId,
	DT.ScheduleName,
	DT.Address,
	DT.Sunday,
	DT.Monday,
	DT.Tuesday,
	DT.Wednesday,
	DT.Thursday,
	DT.Friday,
	DT.Saturday,
	DT.StartTime,
	DT.EndTime,
	DT.PatientDuration,
	IsApprovalSystem = CASE DT.IsApprovalSystem WHEN 0 THEN 'No' WHEN 1 THEN 'Yes' END,
	IsFCFS = CASE DT.IsFCFS WHEN 0 THEN 'No' WHEN 1 THEN 'Yes' END,
	DT.MaxApps,
	DT.AppointmentType
FROM
	TBL_Doctor_Timing DT
WHERE
DT.DoctorId IN (SELECT DoctorId FROM TBL_Doctor WHERE LoginId=(SELECT LoginId FROM TBL_Doctor WHERE DoctorId=@DoctorId)) AND
DT.IsDeleted = 0 
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Doctor_GetScheduleById]    Script Date: 07/13/2012 18:10:39 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Doctor_GetScheduleById]
(
	@DoctorTimingId INT
)
AS
BEGIN
	SELECT * FROM
		TBL_Doctor_Timing
	WHERE
		--IsDeleted=0 AND
		DoctorTimingId=@DoctorTimingId
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Doctor_GetScheduleBySearch]    Script Date: 07/13/2012 18:10:39 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Doctor_GetScheduleBySearch]
(
	@Search NVARCHAR(250),
	@DoctorId INT
)
AS
SELECT 
	dt.DoctorTimingId,
	D.DoctorId,
	'Dr. ' + D.DoctorName + ', ' + D.Degrees [DoctorName],
	DT.ScheduleName,
	DT.Address,
	DT.Sunday,
	DT.Monday,
	DT.Tuesday,
	DT.Wednesday,
	DT.Thursday,
	DT.Friday,
	DT.Saturday,
	DT.StartTime,
	DT.EndTime,
	DT.PatientDuration,
	IsApprovalSystem = CASE DT.IsApprovalSystem WHEN 0 THEN 'No' WHEN 1 THEN 'Yes' END,
	IsFCFS = CASE DT.IsFCFS WHEN 0 THEN 'No' WHEN 1 THEN 'Yes' END,
	DT.MaxApps,
	DT.AppointmentType
FROM
	TBL_Doctor D,
	TBL_Doctor_Timing DT
WHERE
D.DoctorId=@DoctorId AND
D.DoctorId=DT.DoctorId AND
(SELECT COUNT(OrganizationId) FROM TBL_Organization WHERE OrganizationId=D.OrganizationId AND IsActivated = 1) > 0 AND
D.IsDeleted=0 AND
DT.IsDeleted=0 AND
(
	DT.Address LIKE '%' + @Search + '%' OR
	DT.ScheduleName LIKE '%' + @Search + '%'
)
ORDER BY D.DoctorName
GO

/****** Object:  StoredProcedure [dbo].[USP_Doctor_GetScheduleBySearchWithoutOrganizationVerification]    Script Date: 07/13/2012 18:10:39 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Doctor_GetScheduleBySearchWithoutOrganizationVerification]
(
	@Search NVARCHAR(250),
	@DoctorId INT
)
AS
SELECT 
	dt.DoctorTimingId,
	D.DoctorId,
	'Dr. ' + D.DoctorName + ', ' + D.Degrees [DoctorName],
	DT.ScheduleName,
	DT.Address,
	DT.Sunday,
	DT.Monday,
	DT.Tuesday,
	DT.Wednesday,
	DT.Thursday,
	DT.Friday,
	DT.Saturday,
	DT.StartTime,
	DT.EndTime,
	DT.PatientDuration,
	IsApprovalSystem = CASE DT.IsApprovalSystem WHEN 0 THEN 'No' WHEN 1 THEN 'Yes' END,
	IsFCFS = CASE DT.IsFCFS WHEN 0 THEN 'No' WHEN 1 THEN 'Yes' END,
	DT.MaxApps,
	DT.AppointmentType
FROM
	TBL_Doctor D,
	TBL_Doctor_Timing DT
WHERE
D.DoctorId=@DoctorId AND
D.DoctorId=DT.DoctorId AND
D.IsDeleted=0 AND
DT.IsDeleted=0 AND
(
	DT.Address LIKE '%' + @Search + '%' OR
	DT.ScheduleName LIKE '%' + @Search + '%'
)
ORDER BY D.DoctorName
GO

/****** Object:  StoredProcedure [dbo].[USP_Doctor_GetSymptomByDiagnosisId]    Script Date: 07/13/2012 18:10:39 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Doctor_GetSymptomByDiagnosisId] 
(
@DiagnosisId INT
)
AS
BEGIN
	SELECT 
		S.SymptomId, S.Symptom  
	FROM 
		TBL_Master_Symptom S, 
		TBL_Symptom_Diagnosis SD
	WHERE 
		SD.DiagnosisId=@DiagnosisId AND
		S.SymptomId=SD.SymptomId AND S.IsDeleted = 0 
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Doctor_InsertDepartmentDiagnosis]    Script Date: 07/13/2012 18:10:39 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Doctor_InsertDepartmentDiagnosis]
(
	@DiagnosisId int,
	@DepartmentId int
)
AS
INSERT INTO TBL_Diagnosis_Department 
(DiagnosisId, DepartmentId) VALUES
(@DiagnosisId, @DepartmentId)
GO

/****** Object:  StoredProcedure [dbo].[USP_Doctor_InsertDoctor]    Script Date: 07/13/2012 18:10:39 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Doctor_InsertDoctor]
(
	@DoctorId INT,
	@OrganizationId INT,
	@DoctorName NVARCHAR(250),
	@DateofBirth DATETIME,
	@Gender BIT,
	@UniversityId INT,
	@RegistrationYear INT,
	@RegistrationNumber NVARCHAR(50),
	@Experience DECIMAL(18,1),
	@Degrees NVARCHAR(500),
	@Certifications NVARCHAR(500),
	@PhotoName NVARCHAR(250),
	@Mobile NVARCHAR(20),
	@DepartmentId INT,
	@PreferredName NVARCHAR(250),
	@EmailId NVARCHAR(250),
	@Password NVARCHAR(15),
	@TransactionToken NVARCHAR(250),
	@ReferenceToken NVARCHAR(10),
	@CountryId INT,
	@IsActivated BIT
)
AS
BEGIN
	DECLARE @NewLoginId INT
	DECLARE @MedAppId  NVARCHAR(20)

	DECLARE @NewDoctorId INT
	DECLARE @AccountEmailExist INT
	DECLARE @AccountMobileExist INT
	DECLARE @NewExperienceDoctorId INT
	
	IF @DoctorId = 0
	BEGIN
		SELECT @AccountEmailExist=COUNT(LoginId) FROM TBL_Login WHERE EmailId=@EmailId AND IsDeleted = 0 AND IsActivated=1 AND MobileId=@Mobile
		
		SELECT @AccountMobileExist=COUNT(LoginId) FROM TBL_Login WHERE MobileId=@Mobile AND IsDeleted = 0 AND IsActivated=1 AND IsDirect=1

		IF (@AccountEmailExist = 0 AND @AccountMobileExist = 0)
		BEGIN
			INSERT INTO TBL_Login
			(FirstName, MedAppId, CountryId, MobileId, EmailId, Password, IsDirect, IsActivated, IsEmailActivated, IsEmailNotification, IsSMSNotification, TransactionToken, CreatedOn, IsDeleted) VALUES
			(@DoctorName, NULL, @CountryId, @Mobile, @EmailId, @Password, 0, 1, 0, 0, 1, @TransactionToken, GETDATE(), 0)
			
			SET @NewLoginId = @@IDENTITY

			SET @MedAppId = 'MED-' + CONVERT(NVARCHAR, @NewLoginId) 
		
			UPDATE TBL_Login SET MedAppId=@MedAppId WHERE LoginId=@NewLoginId
		END
		ELSE
			IF(@AccountMobileExist = 1 AND @AccountEmailExist = 0)
			BEGIN
				UPDATE TBL_Login SET CountryId=@CountryId, 
									 EmailId=@EmailId, 
									 Password=@Password,
									 IsDirect=0,
									 IsEmailActivated=0,
									 TransactionToken=@TransactionToken,
									 IsEmailNotification=0,
									 IsSMSNotification=1,
									 ModifiedOn=GETDATE() 
								WHERE MobileId=@Mobile AND IsDeleted = 0 AND IsActivated=1 AND IsDirect=1
								
				 SET @NewLoginId = (SELECT LoginId FROM TBL_Login WHERE MobileId=@Mobile AND IsDeleted = 0 AND IsActivated=1)
			END
			ELSE
				IF(@AccountEmailExist = 1 AND @AccountMobileExist = 0)
				BEGIN
				UPDATE TBL_Login SET CountryId=@CountryId, 
									 EmailId=@EmailId, 
									 Password=@Password,
									 IsDirect=0,
									 IsEmailActivated=0,
									 TransactionToken=@TransactionToken,
									 IsEmailNotification=0,
									 IsSMSNotification=1,
									 ModifiedOn=GETDATE() 
								WHERE MobileId=@Mobile AND IsDeleted = 0 AND IsActivated=1 AND IsDirect=1
								
				 SET @NewLoginId = (SELECT LoginId FROM TBL_Login WHERE MobileId=@Mobile AND IsDeleted = 0 AND IsActivated=1)
			END
			ELSE
			BEGIN
				SELECT @NewLoginId=LoginId FROM TBL_Login WHERE EmailId=@EmailId AND IsDeleted=0 AND IsActivated=1
			END
		
		INSERT INTO TBL_Doctor
		(LoginId, OrganizationId, DoctorName, DateofBirth, Gender, RegistrationYear, RegistrationNumber, Experience, Degrees, Certifications, PhotoName, Mobile, DepartmentId, PreferredName, CreatedOn, ReferenceToken, IsActivated, IsDeleted, UniversityId) VALUES
		(@NewLoginId, @OrganizationId, @DoctorName, @DateofBirth, @Gender, @RegistrationYear, @RegistrationNumber, @Experience, @Degrees, @Certifications, @PhotoName, @Mobile, @DepartmentId, @PreferredName, GETDATE(), @ReferenceToken, @IsActivated, 0, @UniversityId)

		SET @NewDoctorId = @@IDENTITY
		
		
		SET @NewExperienceDoctorId = (SELECT TOP 1 DoctorId FROM TBL_Doctor WHERE LoginId=@NewLoginId AND IsDeleted=0 AND IsActivated=1)
		IF(@NewExperienceDoctorId > 0 AND (SELECT COUNT(ExperienceId) FROM TBL_Doctor_Experience WHERE DoctorId=@NewExperienceDoctorId) > 0)
		BEGIN
			INSERT INTO TBL_Doctor_Experience(MedicalServiceName, Title, CountryId, StateId, CityId, YearFrom, MonthFrom, YearTo, MonthTo, Notes, DoctorId)
			SELECT MedicalServiceName,Title, CountryId, StateId, CityId, YearFrom, MonthFrom, YearTo, MonthTo, Notes, @NewDoctorId FROM TBL_Doctor_Experience WHERE DoctorId=@NewExperienceDoctorId
		END	
		
		IF(@NewExperienceDoctorId > 0 AND (SELECT COUNT(EducationId) FROM TBL_Doctor_Education WHERE DoctorId=@NewExperienceDoctorId) > 0)
		BEGIN
			INSERT INTO TBL_Doctor_Education(University, Degree, YearFrom, YearTo, Notes, DoctorId)
			SELECT University, Degree, YearFrom, YearTo, Notes, @NewDoctorId FROM TBL_Doctor_Education WHERE DoctorId=@NewExperienceDoctorId
		END
		
		INSERT INTO TBL_Doctor_Diagnosis(DiagnosisId, DoctorId)
			SELECT DISTINCT DiagnosisId, @NewDoctorId FROM TBL_Diagnosis_Department WHERE DepartmentId=@DepartmentId
			
		SELECT @NewDoctorId
	END
	ELSE
	BEGIN
		UPDATE TBL_Doctor SET
			DoctorName=@DoctorName,
			DateofBirth=@DateofBirth,
			Gender=@Gender,
			UniversityId =@UniversityId,
			RegistrationYear=@RegistrationYear,
			RegistrationNumber=@RegistrationNumber,
			Experience=@Experience,
			Degrees=@Degrees,
			Certifications=@Certifications,
			PhotoName=@PhotoName,
			Mobile=@Mobile,
			DepartmentId=@DepartmentId,
			PreferredName=@PreferredName,
			ModifiedOn=GETDATE()
		WHERE
			 LoginId = (SELECT LoginId FROM TBL_Doctor WHERE DoctorId=@DoctorId) AND IsDeleted=0
			 
		--Reset the DoctorDiagnosis based on the department changed
			 
		DELETE FROM TBL_Doctor_Diagnosis WHERE DoctorId IN (SELECT DoctorId FROM TBL_Doctor WHERE LoginId = (SELECT LoginId FROM TBL_Doctor WHERE DoctorId=@DoctorId) AND IsDeleted=0)
		
		INSERT INTO TBL_Doctor_Diagnosis(DiagnosisId, DoctorId)
			SELECT DISTINCT DD.DiagnosisId, D.DoctorId 
			FROM TBL_Diagnosis_Department DD, TBL_Doctor D 
			WHERE DD.DepartmentId=@DepartmentId AND 
				  DD.DepartmentId=D.DepartmentId AND 
				  D.DoctorId IN (SELECT DoctorId FROM TBL_Doctor WHERE LoginId IN (
								 SELECT LoginId FROM TBL_Doctor WHERE DoctorId=@DoctorId
								 ) AND IsDeleted=0)
			
		SELECT @DoctorId
	END	
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Doctor_InsertDoctorDiagnosis]    Script Date: 07/13/2012 18:10:40 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Doctor_InsertDoctorDiagnosis]
(
	@DoctorId int,
	@DiagnosisId int
)
AS
INSERT INTO TBL_Doctor_Diagnosis 
(DoctorId, DiagnosisId) VALUES
(@DoctorId, @DiagnosisId)
GO

/****** Object:  StoredProcedure [dbo].[USP_Doctor_InsertDoctorEducation]    Script Date: 07/13/2012 18:10:40 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Doctor_InsertDoctorEducation]
(
	@EducationId INT,
	@University NVARCHAR(MAX),
	@Degree NVARCHAR(MAX),
	@CountryId INT,
	@StateId INT,
	@CityId INT,
	@YearFrom INT,
	@YearTo INT,
	@Notes NVARCHAR(MAX),
	@DoctorId INT
)
AS
BEGIN
	IF @EducationId = 0
	BEGIN
		INSERT INTO TBL_Doctor_Education (University, Degree, CountryId, StateId, CityId, YearFrom, YearTo, Notes, DoctorId)
		SELECT @University, @Degree, @CountryId, @StateId, @CityId, @YearFrom, @YearTo, @Notes, D.DoctorId
		FROM TBL_Doctor D
		WHERE D.DoctorId IN (SELECT DoctorId FROM TBL_Doctor WHERE LoginId IN (
								 SELECT LoginId FROM TBL_Doctor WHERE DoctorId=@DoctorId
								 ) AND IsDeleted=0)
	END
	ELSE
	BEGIN
		UPDATE TBL_Doctor_Education SET
			University=@University,
			Degree=@Degree,
			CountryId= @CountryId,
			StateId = @StateId,
			CityId = @CityId,
			YearFrom =@YearFrom,
			YearTo=@YearTo,
			Notes=@Notes,
			DoctorId=@DoctorId
		WHERE
			 EducationId=@EducationId
	END	
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Doctor_InsertDoctorEducationCollection]    Script Date: 07/13/2012 18:10:40 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Doctor_InsertDoctorEducationCollection]
(
	@OldDoctorId INT,
	@NewDoctorId INT
)
AS
BEGIN
	INSERT INTO	TBL_Doctor_Education 
		SELECT University, Degree, YearFrom, YearTo, Notes, @NewDoctorId FROM TBL_Doctor_Education WHERE DoctorId=@OldDoctorId
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Doctor_InsertDoctorExperience]    Script Date: 07/13/2012 18:10:40 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Doctor_InsertDoctorExperience]
(
	@ExperienceId INT,
	@MedicalServiceName NVARCHAR(MAX),
	@Title NVARCHAR(MAX),
	@CountryId INT,
	@StateId INT,
	@CityId INT,
	@YearFrom INT,
	@MonthFrom INT,
	@YearTo INT,
	@MonthTo INT,
	@Notes NVARCHAR(MAX),
	@DoctorId INT
)
AS
BEGIN
	IF @ExperienceId = 0
	BEGIN
		INSERT INTO TBL_Doctor_Experience (MedicalServiceName, Title, CountryId, StateId, CityId, YearFrom, MonthFrom, YearTo, MonthTo, Notes, DoctorId)
		SELECT @MedicalServiceName, @Title, @CountryId, @StateId, @CityId, @YearFrom, @MonthFrom, @YearTo, @MonthTo, @Notes, D.DoctorId
		FROM TBL_Doctor D
		WHERE D.DoctorId IN (SELECT DoctorId FROM TBL_Doctor WHERE LoginId IN (
								 SELECT LoginId FROM TBL_Doctor WHERE DoctorId=@DoctorId
								 ) AND IsDeleted=0)
	END
	ELSE
	BEGIN
		UPDATE TBL_Doctor_Experience SET
			MedicalServiceName=@MedicalServiceName,
			Title=@Title,
			CountryId=@CountryId,
			StateId=@StateId,
			CityId=@CityId,
			YearFrom =@YearFrom,
			MonthFrom=@MonthFrom,
			YearTo=@YearTo,
			MonthTo=@MonthTo,
			Notes=@Notes,
			DoctorId=@DoctorId
		WHERE
			 ExperienceId=@ExperienceId
	END	
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Doctor_InsertDoctorExperienceCollection]    Script Date: 07/13/2012 18:10:40 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Doctor_InsertDoctorExperienceCollection]
(
	@OldDoctorId INT,
	@NewDoctorId INT
)
AS
BEGIN
	INSERT INTO	TBL_Doctor_Experience 
		SELECT MedicalServiceName, Title, CountryId, StateId, CityId, YearFrom, MonthFrom, YearTo, MonthTo, Notes, @NewDoctorId FROM TBL_Doctor_Experience WHERE DoctorId=@OldDoctorId
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Doctor_InsertSchedule]    Script Date: 07/13/2012 18:10:40 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Doctor_InsertSchedule]
(
	@DoctorTimingId INT,
	@DoctorId INT,
	@ScheduleName NVARCHAR(1000),
	@Address NVARCHAR(1000),
	@Sunday BIT,
	@Monday BIT,
	@Tuesday BIT,
	@Wednesday BIT,
	@Thursday BIT,
	@Friday BIT,
	@Saturday BIT,
	@StartTime NVARCHAR(15),
	@EndTime NVARCHAR(15),
	@PatientDuration INT,
	@IsApprovalSystem BIT,
	@IsApprovalNotificationSMS BIT,
	@IsApprovalNotificationEmail BIT,
	@MaxAppointmentDays INT,
	@IsDefaultAddress BIT,
	@IsCarParkFacility BIT,
	@IsFCFS BIT,
	@MaxApps INT,
	@AppointmentType INT,
	@Conditions NVARCHAR(MAX)
)
AS
BEGIN
	IF @DoctorTimingId = 0
	BEGIN
		INSERT INTO TBL_Doctor_Timing
		(DoctorId, ScheduleName, Address, Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, StartTime, EndTime, PatientDuration, IsApprovalSystem, IsApprovalNotificationSMS, IsApprovalNotificationEmail, MaxAppointmentDays, IsFCFS, MaxApps, AppointmentType, Conditions, IsDefaultAddress, IsCarParkFacility, CreatedOn, IsDeleted) VALUES
		(@DoctorId, @ScheduleName, @Address, @Sunday, @Monday, @Tuesday, @Wednesday, @Thursday, @Friday, @Saturday, @StartTime, @EndTime, @PatientDuration, @IsApprovalSystem, @IsApprovalNotificationSMS, @IsApprovalNotificationEmail, @MaxAppointmentDays, @IsFCFS, @MaxApps, @AppointmentType, @Conditions, @IsDefaultAddress, @IsCarParkFacility, GETDATE(), 0)
	END
	ELSE
	BEGIN
		UPDATE TBL_Doctor_Timing SET
			ScheduleName=@ScheduleName,
			Address=@Address,
			Sunday=@Sunday,
			Monday=@Monday,
			Tuesday=@Tuesday,
			Wednesday=@Wednesday,
			Thursday=@Thursday,
			Friday=@Friday,
			Saturday=@Saturday,
			StartTime=@StartTime,
			EndTime=@EndTime,
			PatientDuration=@PatientDuration,
			IsApprovalSystem=@IsApprovalSystem,
			IsApprovalNotificationSMS=@IsApprovalNotificationSMS,
			IsApprovalNotificationEmail=@IsApprovalNotificationEmail,
			MaxAppointmentDays=@MaxAppointmentDays,
			IsFCFS=@IsFCFS,
			MaxApps=@MaxApps,
			AppointmentType=@AppointmentType,
			Conditions=@Conditions,
			IsDefaultAddress = @IsDefaultAddress,
			IsCarParkFacility=@IsCarParkFacility,
			ModifiedOn=GETDATE()
		WHERE
			DoctorTimingId=@DoctorTimingId
	END
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Doctor_InsertSymptomDiagnosis]    Script Date: 07/13/2012 18:10:40 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROC [dbo].[USP_Doctor_InsertSymptomDiagnosis]
(
	@SymptomId INT,
	@DiagnosisId INT	
)
AS
INSERT INTO TBL_Symptom_Diagnosis
(SymptomId, DiagnosisId) VALUES
(@SymptomId, @DiagnosisId)

GO

/****** Object:  StoredProcedure [dbo].[USP_Doctor_UpdateAcceptance]    Script Date: 07/13/2012 18:10:40 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Doctor_UpdateAcceptance]
(
	@DoctorId INT
)
AS
BEGIN
	UPDATE TBL_Doctor SET IsActivated=1 WHERE DoctorId=@DoctorId
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Doctor_UpdatePhotoNameByDoctorId]    Script Date: 07/13/2012 18:10:41 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Doctor_UpdatePhotoNameByDoctorId] 
(
@DoctorId INT
)
AS
BEGIN
	UPDATE TBL_Doctor SET PhotoName=NULL WHERE DoctorId=@DoctorId
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Doctor_ValidatePreferredName]    Script Date: 07/13/2012 18:10:41 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Doctor_ValidatePreferredName] 
(
	@PreferredName NVARCHAR(250),
	@DoctorId INT
)
AS
BEGIN
	IF(@DoctorId = 0)
		SELECT COUNT(DoctorId) FROM TBL_Doctor WHERE PreferredName=@PreferredName 
	ELSE
		SELECT COUNT(DoctorId) FROM TBL_Doctor WHERE PreferredName=@PreferredName AND LoginId<>(SELECT LoginId FROM TBL_Doctor WHERE DoctorId=@DoctorId) AND IsDeleted=0
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Doctor_ValidateScheduleByDoctorId]    Script Date: 07/13/2012 18:10:41 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Doctor_ValidateScheduleByDoctorId] 
(
@DoctorId INT
)
AS
BEGIN
	SELECT COUNT(DoctorTimingId) FROM TBL_Doctor_Timing WHERE DoctorId IN (
								 SELECT DoctorId FROM TBL_Doctor WHERE LoginId IN (
								 SELECT LoginId FROM TBL_Doctor WHERE DoctorId=@DoctorId) AND 
								 IsDeleted=0) AND IsDeleted=0
END
GO

/****** Object:  StoredProcedure [dbo].[USP_EmailTemplate_ApprovalNotification]    Script Date: 07/13/2012 18:10:41 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_EmailTemplate_ApprovalNotification]
(
	@AppointmentId INT,
	@Type INT
)
AS
BEGIN
IF @Type = 0
	SELECT 
		A.AppointmentId,
		(SELECT DoctorName from TBL_Doctor where DoctorId=A.DoctorId) [Name],
		(SELECT FirstName + ' ' + LastName FROM TBL_Patient WHERE PatientId=A.PatientId) [PatientName],
		(SELECT Mobile FROM TBL_Patient WHERE PatientId=A.PatientId) [Mobile],
		A.AppointmentDate,
		A.AppointmentTime,
		(SELECT OrganizationName FROM TBL_Organization WHERE OrganizationId=A.OrganizationId) [OrganizationName],
		(SELECT Address FROM TBL_Organization WHERE OrganizationId=A.OrganizationId) [OrganizationAddress],
		(SELECT Address FROM TBL_Doctor_Timing WHERE DoctorTimingId=A.DoctorTimingId) [OrganizationAddress1],
		(SELECT StartTime FROM TBL_Doctor_Timing WHERE DoctorTimingId=A.DoctorTimingId) [AppointmentStartTime],
		(SELECT EndTime FROM TBL_Doctor_Timing WHERE DoctorTimingId=A.DoctorTimingId) [AppointmentEndTime]
	FROM TBL_Appointment A WHERE A.AppointmentId=@AppointmentId
ELSE
	SELECT 
		A.AppointmentId,
		(SELECT ServiceName from TBL_Service where ServiceId=A.ServiceId) [Name],
		(SELECT FirstName + ' ' + LastName FROM TBL_Patient WHERE PatientId=A.PatientId) [PatientName],
		(SELECT Mobile FROM TBL_Patient WHERE PatientId=A.PatientId) [Mobile],
		A.AppointmentDate,
		A.AppointmentTime,
		(SELECT OrganizationName FROM TBL_Organization WHERE OrganizationId=A.OrganizationId) [OrganizationName],
		(SELECT Address FROM TBL_Organization WHERE OrganizationId=A.OrganizationId) [OrganizationAddress],
		(SELECT Address FROM TBL_Service_Timing WHERE ServiceTimingId=A.ServiceTimingId) [OrganizationAddress1],
		(SELECT StartTime FROM TBL_Service_Timing WHERE ServiceTimingId=A.ServiceTimingId) [AppointmentStartTime],
		(SELECT EndTime FROM TBL_Service_Timing WHERE ServiceTimingId=A.ServiceTimingId) [AppointmentEndTime]
	FROM TBL_Appointment A WHERE A.AppointmentId=@AppointmentId
END
GO

/****** Object:  StoredProcedure [dbo].[USP_GETLagitudeandLatitudebyIP]    Script Date: 07/13/2012 18:10:41 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE proc [dbo].[USP_GETLagitudeandLatitudebyIP]
(
@in_country nvarchar(1000),
@in_Region nvarchar(1000),
@in_City nvarchar(1000),
@Domain  nvarchar(1000),
@ORGIDS  nvarchar(1000)
)
As
Begin
Declare @CountryCode nvarchar(200),@tablename nvarchar(400)
SELECT @tablename='medappointment_geo.dbo.geodb_'+countryCode,@CountryCode=countryCode from IPLocationDB_Country where UPPER(countryName) in (UPPER(@in_country))
DECLARE @QRY nvarchar(max),@QRY1 nvarchar(max),@WhereQRY nvarchar(max)
SET @QRY = 'SELECT DISTINCT A.*,CASE WHEN Len(ISNULL(A.SubDomain,''''))>0 THEN  ''http://''+A.SubDomain+''.'+''+@Domain+''' ELSE ''http://'+@Domain+''' END as SubDomainURL,B.latitude,B.longitude FROM UVW_OrganizationInfo A RIGHT JOIN (select * from '+@tablename+' where UPPER(CountryCode) in(UPPER('''+@CountryCode+''')) '
SET @QRY1 = 'select TOP 1 * from '+@tablename+' where UPPER(CountryCode) in(UPPER('''+@CountryCode+''')) '
SET @WhereQRY =' AND UPPER(CountryName) in(UPPER('''+@in_country+''')) '

if(LEN(@in_Region)>0)
Begin
	SET @QRY = @QRY + ' and UPPER(REGION1) in (UPPER('''+@in_Region+'''))'
	SET @QRY1 = @QRY1 + ' and UPPER(REGION1) in (UPPER('''+@in_Region+'''))'
	SET @WhereQRY = @WhereQRY +' AND UPPER(StateName) in(UPPER('''+@in_Region+''')) '
END
if(LEN(@in_City)>0)
Begin
	SET @QRY = @QRY + ' and (UPPER(REGION2) in (UPPER('''+@in_City+''')) OR UPPER(region3) in (UPPER('''+@in_City+''')) OR UPPER(region4) in (UPPER('''+@in_City+''')) OR UPPER(place) in (UPPER('''+@in_City+''')) OR UPPER(place) in (UPPER('''+@in_City+'''))) '
	SET @QRY1 = @QRY1 + ' and (UPPER(REGION2) in (UPPER('''+@in_City+''')) OR UPPER(region3) in (UPPER('''+@in_City+''')) OR UPPER(region4) in (UPPER('''+@in_City+''')) OR UPPER(place) in (UPPER('''+@in_City+''')) OR UPPER(place) in (UPPER('''+@in_City+''')))'
	SET @WhereQRY = @WhereQRY +' and UPPER(CityName) in(UPPER('''+@in_City+''')) '
END

if(LEN(@ORGIDS)>0)
	SET @WhereQRY = @WhereQRY + ' and OrganizationId in('+@ORGIDS+') '
--ELSE
--	SET @QRY = @QRY + ' and OrganizationId=0'

SET @QRY = @QRY + ') B ON A.PostalCode=B.postalcode  WHERE 1=1 '+ @WhereQRY + ' ORDER BY A.PostalCode'
SET @QRY1 = @QRY1 + ' ORDER BY PostalCode'
PRINT @QRY
execute (@QRY);
PRINT @QRY1
execute (@QRY1);

--SET @QRY = @QRY + ' and CASE WHEN Len(Isnull(REGION2,''''))>0 THEN UPPER(REGION2) WHEN Len(Isnull(region3,''''))>0 THEN UPPER(region3) WHEN Len(Isnull(region4,''''))>0 THEN UPPER(region4) ELSE UPPER(place) END in (UPPER('''+@in_City+'''))) B ON A.PostalCode=B.postalcode WHERE UPPER(CountryName) in(UPPER('''+@in_country+''')) AND UPPER(StateName) in(UPPER('''+@in_Region+''')) and UPPER(CityName) in(UPPER('''+@in_City+''')) '
--SET @QRY1 = @QRY1 + ' and CASE WHEN Len(Isnull(REGION2,''''))>0 THEN UPPER(REGION2) WHEN Len(Isnull(region3,''''))>0 THEN UPPER(region3) WHEN Len(Isnull(region4,''''))>0 THEN UPPER(region4) ELSE UPPER(place) END in (UPPER('''+@in_City+'''))'


--SELECT * FROM UVW_OrganizationInfo WHERE UPPER(PostalCode) in (
--SELECT * FROM UVW_OrganizationInfo WHERE UPPER(CountryName) in (UPPER(@in_country)) and UPPER(StateName) in (UPPER(@in_Region)) and UPPER(CityName) in (UPPER(@in_City))
--SELECT countryCode,countryName from IPLocationDB_Country where countryName in (select DISTINCT Country from dbo.DV_LocationID_HW WHERE extractedInLatestRun='1' and LanguageID=1)

End
GO

/****** Object:  StoredProcedure [dbo].[USP_GetMapBasedSearch]    Script Date: 07/13/2012 18:10:41 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_GetMapBasedSearch]
(
@category VARCHAR(MAX)= NULL,
@Zipcode VARCHAR(MAX) = NULL,
@Country VARCHAR(MAX) = NULL,
@Region VARCHAR(MAX) = NULL,
@City VARCHAR(MAX) = NULL,
@Type bit
)
as
BEGIN

DECLARE 
@query VARCHAR(MAX),
@chkcat		int,
@Radius float

SET @Radius='10'

CREATE table #Careerjobslist 
				(
				ROW int,
				ID nvarchar(max),
				OrganizationId nvarchar(max),
				Name nvarchar(max),
				DepartmentId nvarchar(max),
				DepartmentName nvarchar(max),
				OrganizationName nvarchar(max),
				Country nvarchar(max),
				Region nvarchar(max),
				City nvarchar(max),
				CountryId nvarchar(max),
				StateId nvarchar(max),
				CityId nvarchar(max),
				Category nvarchar(max),
				Latitude2 nvarchar(max),
				Longitude2 nvarchar(max),
				PostalCode  nvarchar(max),
				Type bit)
IF Len(isnull(@Zipcode,''))>0
Begin
		DECLARE @l_qry VARCHAR(MAX),@zipcodes varchar(MAX),@CityS nvarchar(4000),@CCity nvarchar(4000),@Countrycodes nvarchar(4000)
 		Declare @Latitude2 float,@Longitude2 float,@tablename nvarchar(200),@region1 nvarchar(200),@region1Code nvarchar(200),@Country2ID nvarchar(100)
		SELECT @Country2ID=countryCode FROM medappointment_geo.dbo.IPLocationDB_Country WHERE UPPER(countryName) = UPPER(@Country)

		SET @region1 =''
		SET @region1Code =''
		SET @tablename ='medappointment_geo.dbo.geodb_'+ @Country2ID

		--Declare #Zipcoderesults table
		CREATE table #Zipcoderesults
		(
		CountryCode	nvarchar(max),
		postalcode	nvarchar(max),
		place	nvarchar(max),
		region1	nvarchar(max),
		region1code	nvarchar(max),
		region2	nvarchar(max),
		region3	nvarchar(max),
		region4	nvarchar(max),
		latitude	float,
		longitude	float,
		isCurrent bit,
		RowOrder int,
		DROWORDER int)

		DECLARE @QRYZIP varchar(max)
		SET @QRYZIP = 'If Exists (SELECT * from '+ @tablename +' WHERE UPPER(CountryCode) in (UPPER('''+@Country2ID+''')) and UPPER(region1) in (UPPER('''+@Region+''')) and UPPER(place) in(UPPER('''+@City+''')) and  UPPER(postalcode) in(UPPER('''+@Zipcode+''')))
		Begin
		PRINT ''1''
		INSERT INTO #Zipcoderesults(CountryCode,postalcode,place,region1,region1code,region2,region3,region4,latitude,longitude,isCurrent,RowOrder)
			SELECT TOP 1 CountryCode,postalcode,place,region1,region1code,region2,region3,region4,latitude,longitude,1,0 from '+ @tablename +' WHERE UPPER(CountryCode) in (UPPER('''+@Country2ID+''')) and UPPER(region1) in (UPPER('''+@Region+''')) and UPPER(place) in(UPPER('''+@City+''')) and  UPPER(postalcode) in(UPPER('''+@Zipcode+'''))
		End
		ELSE If Exists (SELECT * from '+ @tablename +' WHERE UPPER(CountryCode) in (UPPER('''+@Country2ID+''')) and UPPER(region1) in (UPPER('''+@Region+''')) and  UPPER(postalcode) in(UPPER('''+@Zipcode+''')))
		Begin
		PRINT ''2''
			INSERT INTO #Zipcoderesults(CountryCode,postalcode,place,region1,region1code,region2,region3,region4,latitude,longitude,isCurrent,RowOrder)
			SELECT TOP 1 CountryCode,postalcode,place,region1,region1code,region2,region3,region4,latitude,longitude,1,0 from '+ @tablename +' WHERE UPPER(CountryCode) in (UPPER('''+@Country2ID+''')) and UPPER(region1) in (UPPER('''+@Region+''')) and  UPPER(postalcode) in(UPPER('''+@Zipcode+'''))
		End	
		ELSE 
		Begin
		PRINT ''3''
			INSERT INTO #Zipcoderesults(CountryCode,postalcode,place,region1,region1code,region2,region3,region4,latitude,longitude,isCurrent,RowOrder)
			SELECT TOP 1 CountryCode,postalcode,place,region1,region1code,region2,region3,region4,latitude,longitude,1,0 from '+ @tablename +' WHERE UPPER(CountryCode) in (UPPER('''+@Country2ID+''')) and  UPPER(postalcode) in(UPPER('''+@Zipcode+'''))
		End'

		PRINT @QRYZIP
		execute (@QRYZIP);
		SET @QRYZIP =''
		SELECT * FROM #Zipcoderesults
		--IF EXISTS(SELECT * FROM #Zipcoderesults)
		--BEGIN
		--	SELECT @CCity = place,@Latitude2=latitude,@Longitude2=longitude,@Countrycodes=CountryCode,@tablename='medappointment_geo.dbo.geodb_'+CountryCode,@region1=region1,@region1Code=region1Code from #Zipcoderesults
		--END
		--ELSE
		--BEGIN
		--SET @Latitude2 = '1.00'
		--SET @Longitude2 = '1.00'
		--SET @tablename = 'medappointment_geo.dbo.geodb_US'
		--SET @Zipcode = ''
		--END
	End				
End
GO

/****** Object:  StoredProcedure [dbo].[USP_Job_CitySelectByClientIDCountryStateID]    Script Date: 07/13/2012 18:10:41 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_CitySelectByClientIDCountryStateID]
@ClientId INT,
@CountryId INT,
@StateId INT
AS
BEGIN
SELECT Distinct C.CityId,M.CityName FROM TBL_Job_City C JOIN TBL_Master_City M ON M.CityId=C.CityId 
WHERE C.CityId IN (SELECT Distinct CityId FROM TBL_Job_City) AND C.ClientId=@ClientId AND C.CountryId=@CountryId AND C.StateId=@StateId
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Job_CitySelectByClientIDCountryStateIDVisible]    Script Date: 07/13/2012 18:10:41 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_CitySelectByClientIDCountryStateIDVisible]
@ClientId INT,
@countryid NVARCHAR(MAX),
@stateid INT
AS
BEGIN
SELECT Distinct C.Lid,C.CityId,M.CityName FROM TBL_Job_Location C JOIN VW_Job_City M ON M.CityId=C.CityId 
JOIN VW_Job_Country C1 ON C1.CountryId=C.CountryId
WHERE C.CityId IN (SELECT Distinct CityId FROM TBL_Job_Location) AND C.ClientId=@ClientId AND C1.CountryName=@countryid 
AND C.StateId=@stateid AND C.Visibility=1 Order By M.CityName
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Job_CitySelectByClientIDCountryStateIDVisibleByAdmin]    Script Date: 07/13/2012 18:10:41 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_CitySelectByClientIDCountryStateIDVisibleByAdmin]
@ClientId INT,
@countryid INT,
@stateid INT
AS
BEGIN
IF EXISTS(SELECT * FROM  TBL_Job_Location WHERE StateId!=@stateid)
BEGIN
SELECT Distinct C.Lid,C.CityId,M.CityName FROM TBL_Job_Location C JOIN VW_Job_City M ON M.CityId=C.CityId 
WHERE C.CityId IN (SELECT Distinct CityId FROM TBL_Job_Location) AND C.ClientId=@ClientId AND C.CountryId=@countryid 
AND C.Visibility=1 Order By M.CityName
END
ELSE
BEGIN
SELECT Distinct C.Lid,C.CityId,M.CityName FROM TBL_Job_Location C JOIN VW_Job_City M ON M.CityId=C.CityId 
WHERE C.CityId IN (SELECT Distinct CityId FROM TBL_Job_Location) AND C.ClientId=@ClientId AND C.CountryId=@countryid 
AND C.StateId=@stateid AND C.Visibility=1 Order By M.CityName
END
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Job_CountryByClientIDVisible]    Script Date: 07/13/2012 18:10:41 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_CountryByClientIDVisible]
@ClientId INT
AS
BEGIN
SELECT Distinct S.CountryId,C.CountryName FROM TBL_Job_Country S JOIN TBL_Master_Country C ON C.CountryId=S.CountryId 
WHERE S.ClientId=@ClientId AND S.Visibility=1
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Job_CountrySelectByClientIDVisible]    Script Date: 07/13/2012 18:10:42 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_CountrySelectByClientIDVisible]
@ClientId INT
AS
BEGIN
SELECT Distinct C.CountryName FROM TBL_Job_Location S JOIN VW_Job_Country C ON C.CountryId=S.CountryId 
WHERE S.CountryId  IN (SELECT Distinct CountryId FROM TBL_Job_Location) AND S.ClientId=@ClientId AND S.Visibility=1 Order By C.CountryName ASC
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Job_CountrySelectInStateByClientIDVisible]    Script Date: 07/13/2012 18:10:42 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_CountrySelectInStateByClientIDVisible]
@ClientId INT
AS
BEGIN
SELECT Distinct S.CountryId,C.CountryName FROM TBL_Job_Location S JOIN VW_Job_Country C ON C.CountryId=S.CountryId 
WHERE S.CountryId  IN (SELECT Distinct CountryId FROM TBL_Job_Location) AND S.ClientId=@ClientId AND S.Visibility=1 Order By C.CountryName
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Job_DeleteCandidateDetailsById]    Script Date: 07/13/2012 18:10:42 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_DeleteCandidateDetailsById]
@Aid INT
AS
BEGIN
DELETE FROM TBL_Job_Apply WHERE Aid=@Aid
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Job_DeleteFacility]    Script Date: 07/13/2012 18:10:42 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_DeleteFacility]
@FacId INT,
@ClientId INT
AS
BEGIN
DELETE FROM TBL_Job_Facility WHERE FacId=@FacId AND ClientId=@ClientId
DELETE FROM TBL_Job_Jobs WHERE Facility=@FacId AND ClientId=@ClientId
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Job_DeleteHrLogin]    Script Date: 07/13/2012 18:10:42 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_DeleteHrLogin]
@Hid INT,
@ClientId INT
AS
BEGIN
DELETE FROM TBL_Job_HrLogin WHERE Hid=@Hid AND ClientId=@ClientId
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Job_DeleteJobByClienId]    Script Date: 07/13/2012 18:10:42 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_DeleteJobByClienId]
@Jid INT,
@ClientId INT
AS
BEGIN
DELETE FROM TBL_Job_Jobs WHERE Jid=@Jid AND ClientId=@ClientId
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Job_DeleteLocation]    Script Date: 07/13/2012 18:10:42 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_DeleteLocation]
@Lid INT,
@ClientId INT
AS
BEGIN
DELETE FROM TBL_Job_Location WHERE Lid=@Lid AND ClientId=@ClientId
DELETE FROM TBL_Job_Jobs WHERE Location=@Lid AND ClientId=@ClientId
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Job_DeleteSpeciality]    Script Date: 07/13/2012 18:10:42 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_DeleteSpeciality]
@SpcId INT,
@ClientId INT
AS
BEGIN
DELETE FROM TBL_Job_Speciality WHERE SpecialityId=@SpcId AND ClientId=@ClientId
DELETE FROM TBL_Job_Jobs WHERE Speciality=@SpcId AND ClientId=@ClientId
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Job_FacilitySelectByClientID]    Script Date: 07/13/2012 18:10:42 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_FacilitySelectByClientID]
@ClientId INT
AS
BEGIN
SELECT F.FacId,F.Facility,F.Visibility,O.OrganizationName + '-' + O.BranchName AS Client,O.OrganizationId,F.ClientId,F.CreatedDate,F.UpdatedDate,F.WhoCreated,F.WhoUpdated 
FROM TBL_Job_Facility F JOIN TBL_Organization O ON O.OrganizationId=F.ClientId WHERE ClientId=@ClientId AND O.IsActivated=1 AND O.IsDeleted=0
END



GO

/****** Object:  StoredProcedure [dbo].[USP_Job_FacilitySelectByClientIDVisible]    Script Date: 07/13/2012 18:10:42 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_FacilitySelectByClientIDVisible]
@ClientId INT
AS
BEGIN
SELECT * FROM TBL_Job_Facility WHERE ClientId=@ClientId  AND Visibility=1 Order By Facility
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Job_FacilitySelectByFacid]    Script Date: 07/13/2012 18:10:42 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_FacilitySelectByFacid]
@facid INT,
@Facility NVARCHAR(MAX),
@ClientId NVARCHAR(MAX)
AS
BEGIN 
SELECT * FROM TBL_Job_Facility WHERE FacId!=@facid AND Facility=@Facility AND ClientId=@ClientId
END



GO

/****** Object:  StoredProcedure [dbo].[USP_Job_FacilitySelectByFacility]    Script Date: 07/13/2012 18:10:43 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_FacilitySelectByFacility]
@Facility NVARCHAR(MAX),
@ClientId INT
AS
BEGIN
SELECT * FROM TBL_Job_Facility WHERE Facility=@Facility and ClientId=@ClientId
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Job_FindJobsAssociateWithFacility]    Script Date: 07/13/2012 18:10:43 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_FindJobsAssociateWithFacility]
@clientid INT,
@facilityid INT
AS
BEGIN
SELECT * FROM TBL_Job_Jobs WHERE ClientId=@clientid AND Facility=@facilityid
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Job_FindJobsAssociateWithLocation]    Script Date: 07/13/2012 18:10:43 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[USP_Job_FindJobsAssociateWithLocation]
@clientid INT,
@lid INT
AS
BEGIN
SELECT * FROM TBL_Job_Jobs WHERE ClientId=@clientid AND Location=@lid
END



GO

/****** Object:  StoredProcedure [dbo].[USP_Job_FindJobsAssociateWithSpeciality]    Script Date: 07/13/2012 18:10:43 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_FindJobsAssociateWithSpeciality]
@clientid INT,
@specialityid INT
AS
BEGIN
SELECT * FROM TBL_Job_Jobs WHERE ClientId=@clientid AND Speciality=@specialityid
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Job_GetNewsLetterByEmailClientId]    Script Date: 07/13/2012 18:10:43 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_GetNewsLetterByEmailClientId]
@Email NVARCHAR(MAX),
@ClientId INT
AS
BEGIN
SELECT * FROM TBL_Job_NewsLetter WHERE Email=@Email AND ClientId=@ClientId
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Job_GetSubDomainNameByClientId]    Script Date: 07/13/2012 18:10:43 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_GetSubDomainNameByClientId]
@ClientId INT
AS
BEGIN
SELECT Subdomain FROM dbo.TBL_Organization WHERE Organizationid=@ClientId
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Job_HOColVisibleSelectByVisible]    Script Date: 07/13/2012 18:10:43 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_HOColVisibleSelectByVisible]
@ClientId INT
AS
BEGIN
SELECT * FROM TBL_Job_HotOppsColVisible WHERE ClientId=@ClientId
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Job_HOColVisibleSelectByVisibleByAll]    Script Date: 07/13/2012 18:10:43 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_HOColVisibleSelectByVisibleByAll]
AS
BEGIN
SELECT H.HId,H.Country,H.State,H.City,H.Facility,H.Speciality,H.PostedDate,H.ClientId,H.CreatedDate,H.UpdatedDate,H.WhoCreated,H.WhoUpdated,
(O.OrganizationName + '-' + O.BranchName + '-' +  C.CountryName + '-' + S.StateName + '-' + C1.CityName)AS Client FROM TBL_Job_HotOppsColVisible H 
JOIN TBL_Organization O ON O.OrganizationId=H.ClientId AND O.IsActivated=1 AND O.IsDeleted=0
JOIN VW_Job_Country C ON C.CountryId=O.CountryId
JOIN VW_Job_State S ON S.StateId=O.StateId
JOIN VW_Job_City C1 ON C1.CityId=O.CityId
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Job_HrLoginSelectByClientID]    Script Date: 07/13/2012 18:10:43 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_HrLoginSelectByClientID]
@ClientId INT
AS
BEGIN
SELECT * FROM TBL_Job_HrLogin WHERE ClientId=@ClientId
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Job_HrLoginSelectByClientIDByAll]    Script Date: 07/13/2012 18:10:43 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_HrLoginSelectByClientIDByAll]
AS
BEGIN
SELECT H.Hid,H.UserName,H.Password,H.ClientId,H.CreatedDate,H.UpdatedDate,H.WhoCreated,H.WhoUpdated,
(O.OrganizationName + '-' + O.BranchName + '-' +  C.CountryName + '-' + S1.StateName + '-' + C1.CityName)  AS Client 
FROM TBL_Job_HrLogin H Join TBL_Organization O ON O.OrganizationId=H.ClientId AND O.IsActivated=1 AND O.IsDeleted=0
JOIN VW_Job_Country C ON C.CountryId=O.CountryId
JOIN VW_Job_State S1 ON S1.StateId=O.StateId
JOIN VW_Job_City C1 ON C1.CityId=O.CityId
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Job_HrLoginSelectByUserName]    Script Date: 07/13/2012 18:10:43 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_HrLoginSelectByUserName]
@UserName NVARCHAR(MAX),
@ClientId INT
AS
BEGIN
SELECT * FROM TBL_Job_HrLogin WHERE UserName=@UserName AND ClientId=@ClientId
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Job_HrLoginSelectByUserNameById]    Script Date: 07/13/2012 18:10:43 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_HrLoginSelectByUserNameById]
@Hid INT,
@UserName NVARCHAR(MAX),
@ClientId INT
AS
BEGIN
SELECT * FROM TBL_Job_HrLogin WHERE UserName=@UserName AND ClientId=@ClientId AND Hid!=@Hid
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Job_InsertApply]    Script Date: 07/13/2012 18:10:44 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_InsertApply]
@JobId NVARCHAR(MAX),
@CandidateName NVARCHAR(MAX),
@Age NVARCHAR(MAX),
@Sex NVARCHAR(MAX),
@PermanentAddress NVARCHAR(MAX),
@Email NVARCHAR(MAX),
@City NVARCHAR(MAX),
@District NVARCHAR(MAX),
@State NVARCHAR(MAX),
@Country NVARCHAR(MAX),
@AboutUs NVARCHAR(MAX),
@ContactPhone NVARCHAR(MAX),
@ContactMobile NVARCHAR(MAX),
@BestTime NVARCHAR(MAX),
@Specialization NVARCHAR(MAX),
@Experience NVARCHAR(MAX),
@HighestQualification NVARCHAR(MAX),
@HighestDegree NVARCHAR(MAX),
@CurrentEmployer NVARCHAR(MAX),
@ExistingPay NVARCHAR(MAX),
@DesiredPay NVARCHAR(MAX),
@Willing  NVARCHAR(MAX),
@UploadResume  NVARCHAR(MAX),
@ClientId INT
AS
BEGIN
INSERT INTO TBL_Job_Apply(JobId,CandidateName,Age,Sex,PermanentAddress,Email,City,District,State,Country,AboutUs,ContactPhone,ContactMobile,BestTime,Specialization,Experience,HighestQualification,HighestDegree,CurrentEmployer,ExistingPay,DesiredPay,Willing,UploadResume,AppliedDate,HrStatus,FinalStatus,Notes,ClientId)
VALUES(@JobId,@CandidateName,@Age,@Sex,@PermanentAddress,@Email,@City,@District,@State,@Country,@AboutUs,@ContactPhone,@ContactMobile,@BestTime,@Specialization,@Experience,@HighestQualification,@HighestDegree,@CurrentEmployer,@ExistingPay,@DesiredPay,@Willing,@UploadResume,GETDATE(),'New','New','',@ClientId)
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Job_InsertNewsLetter]    Script Date: 07/13/2012 18:10:44 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_InsertNewsLetter]
@Name NVARCHAR(MAX),
@Email NVARCHAR(MAX),
@ClientId INT
AS
BEGIN
INSERT INTO TBL_Job_NewsLetter(Name,Email,ClientId,PostedDate)VALUES(@Name,@Email,@ClientId,GETDATE())
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Job_InsertUpdateFacility]    Script Date: 07/13/2012 18:10:44 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_InsertUpdateFacility]
@FacId INT,
@Facility NVARCHAR(MAX),
@Visibility BIT,
@ClientId INT,
@WhoCreated NVARCHAR(MAX),
@WhoUpdated NVARCHAR(MAX)
AS
BEGIN
IF EXISTS(SELECT * FROM TBL_Job_Facility WHERE FacId=@FacId AND ClientId=@ClientId)
BEGIN
UPDATE TBL_Job_Facility SET Facility=@Facility,Visibility=@Visibility,UpdatedDate=GETDATE(),WhoUpdated=@WhoUpdated WHERE FacId=@FacId AND ClientId=@ClientId
END 
ELSE
BEGIN
INSERT INTO TBL_Job_Facility(Facility,Visibility,ClientId,CreatedDate,WhoCreated)VALUES(@Facility,@Visibility,@ClientId,GETDATE(),@WhoCreated)
END
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Job_InsertUpdateFacilityByClientId]    Script Date: 07/13/2012 18:10:44 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_InsertUpdateFacilityByClientId]
@FacId INT,
@Facility NVARCHAR(MAX),
@Visibility BIT,
@ClientId INT,
@WhoCreated NVARCHAR(MAX),
@WhoUpdated NVARCHAR(MAX)
AS
BEGIN
IF EXISTS(SELECT * FROM TBL_Job_Facility WHERE FacId=@FacId)
BEGIN
UPDATE TBL_Job_Facility SET Facility=@Facility,Visibility=@Visibility,ClientId=@ClientId,UpdatedDate=GETDATE(),WhoUpdated=@WhoUpdated WHERE FacId=@FacId
END 
ELSE
BEGIN
INSERT INTO TBL_Job_Facility(Facility,Visibility,ClientId,CreatedDate,WhoCreated)VALUES(@Facility,@Visibility,@ClientId,GETDATE(),@WhoCreated)
END
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Job_InsertUpdateHOColVisible]    Script Date: 07/13/2012 18:10:44 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_InsertUpdateHOColVisible]
@HId INT,
@Country BIT,
@State BIT,
@City BIT,
@Facility BIT,
@Speciality BIT,
@PostDate BIT,
@ClientId INT,
@WhoCreated NVARCHAR(MAX),
@WhoUpdated NVARCHAR(MAX)
AS
BEGIN
IF EXISTS(SELECT * FROM TBL_Job_HotOppsColVisible WHERE ClientId=@ClientId AND HId=@HId)
BEGIN
UPDATE TBL_Job_HotOppsColVisible SET Country=@Country,State=@State,City=@City,Facility=@Facility,Speciality=@Speciality,PostedDate=@PostDate,UpdatedDate=GETDATE(),WhoUpdated=@WhoUpdated WHERE ClientId=@ClientId AND HId=@HId
END
ELSE
BEGIN
INSERT INTO TBL_Job_HotOppsColVisible(Country,State,City,Facility,Speciality,PostedDate,ClientId,CreatedDate,WhoCreated)VALUES(@Country,@State,@City,@Facility,@Speciality,@PostDate,@ClientId,GETDATE(),@WhoCreated)
END
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Job_InsertUpdateHrLogin]    Script Date: 07/13/2012 18:10:45 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_InsertUpdateHrLogin]
@Hid INT,
@UserName NVARCHAR(MAX),
@Password NVARCHAR(MAX),
@ClientId INT,
@WhoCreated NVARCHAR(MAX),
@WhoUpdated NVARCHAR(MAX)
AS
BEGIN
IF EXISTS(SELECT * FROM TBL_Job_HrLogin WHERE Hid=@Hid AND ClientId=@ClientId)
BEGIN
UPDATE TBL_Job_HrLogin SET UserName=@UserName,Password=@Password,UpdatedDate=GETDATE(),WhoUpdated=@WhoUpdated WHERE Hid=@Hid AND ClientId=@ClientId
END
ELSE
BEGIN
INSERT INTO TBL_Job_HrLogin(UserName,Password,ClientId,CreatedDate,WhoCreated)VALUES(@UserName,@Password,@ClientId,GETDATE(),@WhoCreated)
END
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Job_InsertUpdateJob]    Script Date: 07/13/2012 18:10:45 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_InsertUpdateJob]
@JobId NVARCHAR(MAX),
@JobTitle NVARCHAR(MAX),
@Facility NVARCHAR(MAX),
@Speciality NVARCHAR(MAX),
@Location INT,
@Description NVARCHAR(MAX),
@Visibility BIT,
@ClientId INT,
@WhoCreated NVARCHAR(MAX),
@WhoUpdated NVARCHAR(MAX)
AS
BEGIN
IF EXISTS(SELECT * FROM TBL_Job_Jobs WHERE JobId=@JobId AND ClientId=@ClientId)
BEGIN
UPDATE TBL_Job_Jobs SET JobTitle=@JobTitle,Facility=@Facility,Speciality=@Speciality,Location=@Location,Description=@Description,
Visibility=@Visibility,UpdatedDate=GETDATE(),WhoUpdated=@WhoUpdated WHERE ClientId=@ClientId AND JobId=@JobId
END
ELSE
BEGIN
INSERT INTO TBL_Job_Jobs(JobId,JobTitle,Facility,Speciality,Location,Description,Visibility,ClientId,CreatedDate,WhoCreated)VALUES
(@JobId,@JobTitle,@Facility,@Speciality,@Location,@Description,@Visibility,@ClientId,GETDATE(),@WhoCreated)
END
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Job_InsertUpdateLocation]    Script Date: 07/13/2012 18:10:45 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_InsertUpdateLocation]
@Lid INT,
@CountryId INT,
@StateId INT,
@CityId INT,
@Visibility BIT,
@ClientId INT,
@WhoCreated NVARCHAR(MAX),
@WhoUpdated NVARCHAR(MAX)
AS
BEGIN
IF EXISTS(SELECT * FROM TBL_Job_Location WHERE Lid=@Lid AND ClientId=@ClientId)
BEGIN
UPDATE TBL_Job_Location SET CountryId=@CountryId,StateId=@StateId,CityId=@CityId,Visibility=@Visibility,UpdatedDate=GETDATE(),WhoUpdated=@WhoUpdated WHERE Lid=@Lid AND ClientId=@ClientId
END
ELSE
BEGIN
INSERT INTO TBL_Job_Location(CountryId,StateId,CityId,Visibility,ClientId,CreatedDate,WhoCreated)VALUES(@CountryId,@StateId,@CityId,@Visibility,@ClientId,GETDATE(),@WhoCreated)
END
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Job_InsertUpdateSDColVisible]    Script Date: 07/13/2012 18:10:45 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_InsertUpdateSDColVisible]
@SdId INT,
@JobId BIT,
@JobTitle BIT,
@Facility BIT,
@Speciality BIT,
@Country BIT,
@State BIT,
@City BIT,
@Description BIT,
@PostedDate BIT,
@ClientId INT,
@WhoCreated NVARCHAR(MAX),
@WhoUpdated NVARCHAR(MAX)
AS
BEGIN
IF EXISTS(SELECT * FROM TBL_Job_SearchDescriptionColVisible WHERE ClientId=@ClientId AND SdId=@SdId)
BEGIN
UPDATE TBL_Job_SearchDescriptionColVisible SET JobId=@JobId,JobTitle=@JobTitle,Facility=@Facility,Speciality=@Speciality,Country=@Country,State=@State,City=@City,Description=@Description,PostedDate=@PostedDate,UpdatedDate=GETDATE(),WhoUpdated=@WhoUpdated WHERE ClientId=@ClientId AND SdId=@SdId
END
ELSE
BEGIN
INSERT INTO TBL_Job_SearchDescriptionColVisible(JobId,JobTitle,Facility,Speciality,Country,State,City,Description,PostedDate,ClientId,CreatedDate,WhoCreated)VALUES
(@JobId,@JobTitle,@Facility,@Speciality,@Country,@State,@City,@Description,@PostedDate,@ClientId,GETDATE(),@WhoCreated)
END
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Job_InsertUpdateSpeciality]    Script Date: 07/13/2012 18:10:45 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_InsertUpdateSpeciality]
@SpcId INT,
@SpecialityId INT,
@Visibility BIT,
@ClientId INT,
@WhoCreated NVARCHAR(MAX),
@WhoUpdated NVARCHAR(MAX)
AS
BEGIN
IF EXISTS(SELECT * FROM TBL_Job_Speciality WHERE SpcId=@SpcId AND ClientId=@ClientId)
BEGIN
UPDATE TBL_Job_Speciality SET SpecialityId=@SpecialityId,Visibility=@Visibility,UpdatedDate=GETDATE(),WhoUpdated=@WhoUpdated WHERE SpcId=@SpcId AND ClientId=@ClientId
END
ELSE
BEGIN
INSERT INTO TBL_Job_Speciality(SpecialityId,Visibility,ClientId,CreatedDate,WhoCreated)VALUES(@SpecialityId,@Visibility,@ClientId,GETDATE(),@WhoCreated)
END
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Job_InsertUpdateSpecialityByClientId]    Script Date: 07/13/2012 18:10:45 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_InsertUpdateSpecialityByClientId]
@SpcId INT,
@SpecialityId INT,
@Visibility BIT,
@ClientId INT,
@WhoCreated NVARCHAR(MAX),
@WhoUpdated NVARCHAR(MAX)
AS
BEGIN
IF EXISTS(SELECT * FROM TBL_Job_Speciality WHERE SpcId=@SpcId)
BEGIN
UPDATE TBL_Job_Speciality SET SpecialityId=@SpecialityId,ClientId=@ClientId,Visibility=@Visibility,UpdatedDate=GETDATE(),WhoUpdated=@WhoUpdated WHERE SpcId=@SpcId 
END
ELSE
BEGIN
INSERT INTO TBL_Job_Speciality(SpecialityId,Visibility,ClientId,CreatedDate,WhoCreated)VALUES(@SpecialityId,@Visibility,@ClientId,GETDATE(),@WhoCreated)
END
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Job_InsertUpdateSRColVisible]    Script Date: 07/13/2012 18:10:45 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_InsertUpdateSRColVisible]
@SrId INT,
@Country BIT,
@State BIT,
@City BIT,
@Facility BIT,
@Speciality BIT,
@PostDate BIT,
@ClientId INT,
@WhoCreated NVARCHAR(MAX),
@WhoUpdated NVARCHAR(MAX)
AS
BEGIN
IF EXISTS(SELECT * FROM TBL_Job_SearchResultsColVisible WHERE ClientId=@ClientId AND SrId=@SrId)
BEGIN
UPDATE TBL_Job_SearchResultsColVisible SET Country=@Country,State=@State,City=@City,Facility=@Facility,Speciality=@Speciality,PostDate=@PostDate,UpdatedDate=GETDATE(),WhoUpdated=@WhoUpdated WHERE ClientId=@ClientId AND SrId=@SrId
END
ELSE
BEGIN
INSERT INTO TBL_Job_SearchResultsColVisible(Country,State,City,Facility,Speciality,PostDate,ClientId,CreatedDate,WhoCreated)VALUES(@Country,@State,@City,@Facility,@Speciality,@PostDate,@ClientId,GETDATE(),@WhoCreated)
END
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Job_InsertUpdateSWColVisible]    Script Date: 07/13/2012 18:10:45 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_InsertUpdateSWColVisible]
@SwId INT,
@Country BIT,
@State BIT,
@City BIT,
@Facility BIT,
@ClientId INT,
@WhoCreated NVARCHAR(MAX),
@WhoUpdated NVARCHAR(MAX)
AS
BEGIN
IF EXISTS(SELECT * FROM TBL_Job_SearchWidgetColVisible WHERE ClientId=@ClientId AND SwId=@SwId)
BEGIN
UPDATE TBL_Job_SearchWidgetColVisible SET Country=@Country,State=@State,City=@City,Facility=@Facility,UpdatedDate=GETDATE(),WhoUpdated=@WhoUpdated WHERE ClientId=@ClientId AND SwId=@SwId
END
ELSE
BEGIN
INSERT INTO TBL_Job_SearchWidgetColVisible(Country,State,City,Facility,ClientId,CreatedDate,WhoCreated)VALUES(@Country,@State,@City,@Facility,@ClientId,GETDATE(),@WhoCreated)
END
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Job_JobsSelectByClientID]    Script Date: 07/13/2012 18:10:45 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_JobsSelectByClientID]
@ClientId INT,
@did INT
AS
BEGIN
IF @did = 0
BEGIN 
SELECT Distinct J.Jid,
J.JobId,
J.JobTitle,
J.Facility As FacilityId,
F.Facility,
J.Speciality As SpecialityId,
S.DepartmentName AS Speciality,
L.CountryId As CountryId,MC.CountryName AS Country,L.StateId As StateId,
CASE WHEN L.StateId =-1 THEN 'no mapping' ELSE MS.StateName END AS State,L.CityId As CityId,MT.CityName As City,
J.Description,J.Visibility,J.ClientId,J.CreatedDate,J.UpdatedDate,J.WhoCreated,J.WhoUpdated,
Case when L.StateId =-1 then O.OrganizationName + '-' + O.BranchName + '-' + MC.CountryName + '-' +  MT.CityName else O.OrganizationName + '-' + O.BranchName + '-' + MC.CountryName + '-' + MS.StateName + '-' + MT.CityName end AS Client,L.Lid FROM TBL_Job_Jobs J 
JOIN TBL_Job_Facility F ON F.FacId=J.Facility 
JOIN TBL_Job_Speciality S1 ON S1.SpcId=J.Speciality
JOIN TBL_Master_Department S ON S.DepartmentId=S1.SpecialityId
JOIN TBL_Job_Location L ON L.Lid=J.Location
JOIN VW_Job_Country MC ON MC.CountryId = L.CountryId 
JOIN VW_Job_City MT ON MT.CityId=L.CityId 
JOIN VW_Job_State MS ON MS.StateCode=MT.StateCode 
Join TBL_Organization O ON O.OrganizationId=J.ClientId 
WHERE J.ClientId=@ClientId AND S.IsApproved=1 AND S.IsDeleted=0 AND O.IsActivated=1 AND O.IsDeleted=0 
END
ELSE IF @did = -1
BEGIN
SELECT Distinct J.Jid,
J.JobId,
J.JobTitle,
J.Facility As FacilityId,
F.Facility,
J.Speciality As SpecialityId,
S.DepartmentName AS Speciality,
L.CountryId As CountryId,MC.CountryName AS Country,L.StateId As StateId,
CASE WHEN L.StateId =-1 THEN 'no mapping' ELSE MS.StateName END AS State,L.CityId As CityId,MT.CityName As City,
J.Description,J.Visibility,J.ClientId,J.CreatedDate,J.UpdatedDate,J.WhoCreated,J.WhoUpdated,
Case when L.StateId =-1 then O.OrganizationName + '-' + O.BranchName + '-' + MC.CountryName + '-' +  MT.CityName else O.OrganizationName + '-' + O.BranchName + '-' + MC.CountryName + '-' + MS.StateName + '-' + MT.CityName end AS Client,L.Lid FROM TBL_Job_Jobs J 
JOIN TBL_Job_Facility F ON F.FacId=J.Facility 
JOIN TBL_Job_Speciality S1 ON S1.SpcId=J.Speciality
JOIN TBL_Master_Department S ON S.DepartmentId=S1.SpecialityId
JOIN TBL_Job_Location L ON L.Lid=J.Location
JOIN VW_Job_Country MC ON MC.CountryId = L.CountryId 
JOIN VW_Job_City MT ON MT.CityId=L.CityId 
JOIN VW_Job_State MS ON MS.StateCode=MT.StateCode 
Join TBL_Organization O ON O.OrganizationId=J.ClientId 
WHERE J.Visibility=1 AND J.ClientId=@ClientId AND S.IsApproved=1 AND S.IsDeleted=0 AND O.IsActivated=1 AND O.IsDeleted=0 
END
ELSE
BEGIN
SELECT Distinct J.Jid,
J.JobId,
J.JobTitle,
J.Facility As FacilityId,
F.Facility,
J.Speciality As SpecialityId,
S.DepartmentName AS Speciality,
L.CountryId As CountryId,MC.CountryName AS Country,L.StateId As StateId,
CASE WHEN L.StateId =-1 THEN 'no mapping' ELSE MS.StateName END AS State,L.CityId As CityId,MT.CityName As City,
J.Description,J.Visibility,J.ClientId,J.CreatedDate,J.UpdatedDate,J.WhoCreated,J.WhoUpdated,
Case when L.StateId =-1 then O.OrganizationName + '-' + O.BranchName + '-' + MC.CountryName + '-' +  MT.CityName else O.OrganizationName + '-' + O.BranchName + '-' + MC.CountryName + '-' + MS.StateName + '-' + MT.CityName end AS Client,L.Lid FROM TBL_Job_Jobs J 
JOIN TBL_Job_Facility F ON F.FacId=J.Facility 
JOIN TBL_Job_Speciality S1 ON S1.SpcId=J.Speciality
JOIN TBL_Master_Department S ON S.DepartmentId=S1.SpecialityId
JOIN TBL_Job_Location L ON L.Lid=J.Location
JOIN VW_Job_Country MC ON MC.CountryId = L.CountryId 
JOIN VW_Job_City MT ON MT.CityId=L.CityId 
JOIN VW_Job_State MS ON MS.StateCode=MT.StateCode 
Join TBL_Organization O ON O.OrganizationId=J.ClientId 
WHERE J.ClientId=@ClientId AND S1.SpecialityId=@did AND J.Visibility=1 AND S.IsApproved=1 AND S.IsDeleted=0 AND O.IsActivated=1 AND O.IsDeleted=0 
END
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Job_LocationSelectByIds]    Script Date: 07/13/2012 18:10:45 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_LocationSelectByIds]
@ClientId INT,
@Countryid INT,
@Stateid INT,
@CityId INT
AS
BEGIN
SELECT * FROM TBL_Job_Location WHERE ClientId=@ClientId AND Countryid=@Countryid AND StateId=@Stateid AND CityId=@CityId
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Job_LocationSelectByLId]    Script Date: 07/13/2012 18:10:46 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_LocationSelectByLId]
@Lid INT,
@ClientId INT,
@Countryid INT,
@Stateid INT,
@Cityid INT
AS
BEGIN
SELECT * FROM TBL_Job_Location WHERE Lid!=@Lid AND ClientId=@ClientId AND CountryId=@Countryid AND StateId=@Stateid and CityId=@Cityid
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Job_SDColVisibleSelectByVisible]    Script Date: 07/13/2012 18:10:46 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_SDColVisibleSelectByVisible]
@ClientId INT
AS
BEGIN
SELECT * FROM TBL_Job_SearchDescriptionColVisible WHERE ClientId=@ClientId
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Job_SDColVisibleSelectByVisibleAll]    Script Date: 07/13/2012 18:10:46 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_SDColVisibleSelectByVisibleAll]
AS
BEGIN
SELECT D.SdId,D.JobId,D.JobTitle,D.Facility,D.Speciality,D.Country,D.State,D.City,D.Description,D.PostedDate,D.ClientId,D.CreatedDate,D.UpdatedDate,
D.WhoCreated,D.WhoUpdated,(O.OrganizationName + '-' + O.BranchName + '-' +  C.CountryName + '-' + S1.StateName + '-' + C1.CityName) AS Client FROM TBL_Job_SearchDescriptionColVisible D 
JOIN TBL_Organization O ON O.OrganizationId=D.ClientId AND O.IsActivated=1 AND O.IsDeleted=0
JOIN VW_Job_Country C ON C.CountryId=O.CountryId
JOIN VW_Job_State S1 ON S1.StateId=O.StateId
JOIN VW_Job_City C1 ON C1.CityId=O.CityId
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Job_SearchResults]    Script Date: 07/13/2012 18:10:46 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_SearchResults]
(
@ClientId NVARCHAR(MAX)= NULL,
@Facility NVARCHAR(MAX)= NULL,
@Speciality NVARCHAR(MAX)= NULL,
@Country NVARCHAR(MAX)= NULL,
@State NVARCHAR(MAX) = NULL,
@City NVARCHAR(MAX) = NULL,
@Keyword VARCHAR(MAX)= NULL
)
as
BEGIN
DECLARE @query VARCHAR(MAX)


SET @query='SELECT Distinct J.Jid,J.JobId,J.JobTitle,J.Facility As FacilityId,F.Facility,J.Speciality As SpecialityId,S.DepartmentName AS Speciality,
L.CountryId As CountryId,MC.CountryName AS Country,L.StateId As StateId,MS.StateName AS State,L.CityId As CityId,MT.CityName As City,J.Description,J.Visibility,J.ClientId,CONVERT(VARCHAR(10),J.CreatedDate,101) AS posteddate,J.UpdatedDate,J.WhoCreated,J.WhoUpdated FROM TBL_Job_Jobs J 
JOIN TBL_Job_Facility F ON F.FacId=J.Facility 
JOIN TBL_Job_Speciality S1 ON S1.SpcId=J.Speciality
JOIN TBL_Master_Department S ON S.DepartmentId=S1.SpecialityId
JOIN TBL_Job_Location L ON L.Lid=J.Location
JOIN VW_Job_Country MC ON MC.CountryId = L.CountryId
JOIN VW_Job_State MS ON MS.StateId = L.StateId
JOIN VW_Job_City MT ON MT.CityId = L.CityId WHERE J.Visibility=1 '

IF @ClientId != ''
Begin
If @ClientId != '0'
Begin
set @query= @query +' AND J.ClientId IN (' + @ClientId + ')'
END
END

IF @facility != ''
Begin
set @query= @query +' AND REPLACE(J.Facility,''&'','''') IN ('+ char(39) + @Facility + char(39) + ')'
End



IF @speciality != ''
Begin
set @query= @query +' AND REPLACE(J.Speciality,''&'','''') IN ('+ char(39) + @Speciality + char(39) + ')'
End



IF @country != ''
Begin
set @query= @query +' AND REPLACE(MC.CountryName,''&'','''') IN ('+ char(39) + @Country + char(39) + ')'
End


IF @state != ''
Begin
set @query= @query +' AND REPLACE(MS.StateId,''&'','''') IN ('+ char(39) + @State + char(39) + ')'
End

IF @city != ''
Begin
set @query= @query +' AND REPLACE(MT.CityId,''&'','''') IN ('+ char(39) + @City + char(39) + ')'
End



IF @keyword != ''
Begin
SET @query= @query +' AND
(
replace(J.JobTitle,'''''''','''') LIKE ' + ''''+'%'+ REPLACE(replace(@keyword,'''',''),' ','%'' or replace(J.JobTitle,'''''''','''') LIKE ''' + '%') +  '%'' OR
 J.JobID IN (SELECT * FROM dbo.fn_Split_Up_Ids(' + char(39) + replace(@keyword,'''','') +char(39)+')) OR
 replace(J.Description,'''''''','''') LIKE ' + ''''+ '%' + REPLACE(replace(@keyword,'''',''),' ','%'' or  replace(J.Description,'''''''','''') LIKE ''' + '%') +  '%'' 
)'
end
Print @query
EXEC(@query)
End

GO

/****** Object:  StoredProcedure [dbo].[USP_Job_SelectByHospitalByChar]    Script Date: 07/13/2012 18:10:46 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[USP_Job_SelectByHospitalByChar]
@startchar NVARCHAR(MAX)
AS
BEGIN
IF @startchar <> ''
BEGIN
SELECT Tbl1.OrganizationId,Tbl1.Status,Tbl1.Organization FROM
(Select Distinct OrganizationId,'Yes' AS Status,UPPER(OrganizationName + ' - ' + BranchName) AS Organization FROM TBL_Organization Where OrganizationId IN (select Distinct ClientId FROM TBL_Job_Jobs Group by ClientId) AND IsActivated=1 AND IsDeleted=0 AND OrganizationName Like @startchar + '%'
Union
Select Distinct OrganizationId,'No'  AS Status,UPPER(OrganizationName + ' - ' + BranchName) AS Organization FROM TBL_Organization Where OrganizationId  NOT IN (select Distinct ClientId FROM TBL_Job_Jobs Group by ClientId) AND IsActivated=1 AND IsDeleted=0 AND OrganizationName Like @startchar + '%')Tbl1
ORDER BY Tbl1.Organization
END
ELSE 
BEGIN
SELECT Tbl1.OrganizationId,Tbl1.Status,Tbl1.Organization FROM
(Select Distinct OrganizationId,'Yes' AS Status,UPPER(OrganizationName + ' - ' + BranchName) AS Organization FROM TBL_Organization Where OrganizationId IN (select Distinct ClientId FROM TBL_Job_Jobs Group by ClientId)  AND IsActivated=1 AND IsDeleted=0 
Union
Select Distinct OrganizationId,'No'  AS Status,UPPER(OrganizationName + ' - ' + BranchName) AS Organization FROM TBL_Organization Where OrganizationId  NOT IN (select Distinct ClientId FROM TBL_Job_Jobs Group by ClientId) AND IsActivated=1 AND IsDeleted=0 )Tbl1
ORDER BY Tbl1.Organization
END
END



GO

/****** Object:  StoredProcedure [dbo].[USP_Job_SelectBySpecialityByChar]    Script Date: 07/13/2012 18:10:46 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[USP_Job_SelectBySpecialityByChar]
@startchar NVARCHAR(MAX)
AS
BEGIN
IF @startchar <> ''
BEGIN
SELECT Tbl1.DepartmentId,Tbl1.Status,Tbl1.DepartmentName FROM
(Select Distinct DepartmentId,'Yes' AS Status,UPPER(DepartmentName) AS DepartmentName from TBL_Master_Department Where IsApproved=1 AND 
IsDeleted=0 AND DepartmentId IN (Select Distinct SpecialityId from TBL_Job_Speciality Where SpcId IN (select Distinct Speciality FROM TBL_Job_Jobs Where Visibility=1 Group by Speciality)) AND DepartmentName Like  @startchar + '%'
Union
Select Distinct DepartmentId,'No'  AS Status,UPPER(DepartmentName) AS DepartmentName  from TBL_Master_Department Where IsApproved=1 AND IsDeleted=0
 AND DepartmentId  NOT IN (Select Distinct SpecialityId from TBL_Job_Speciality Where SpcId IN (select Distinct Speciality FROM TBL_Job_Jobs Where Visibility=1 Group by Speciality)) AND DepartmentName Like @startchar + '%')Tbl1
ORDER BY Tbl1.DepartmentName
END
ELSE 
BEGIN
SELECT Tbl1.DepartmentId,Tbl1.Status,Tbl1.DepartmentName FROM
(
Select Distinct DepartmentId,'Yes' AS Status,UPPER(DepartmentName) AS DepartmentName from TBL_Master_Department Where IsApproved=1 
AND IsDeleted=0 AND DepartmentId IN (Select Distinct SpecialityId from TBL_Job_Speciality Where SpcId IN (select Distinct Speciality FROM TBL_Job_Jobs Where Visibility=1 Group by Speciality))
Union
Select Distinct DepartmentId,'No'  AS Status,UPPER(DepartmentName) AS DepartmentName  from TBL_Master_Department Where IsApproved=1 AND 
IsDeleted=0 AND DepartmentId  NOT IN (Select Distinct SpecialityId from TBL_Job_Speciality Where SpcId IN (select Distinct Speciality FROM TBL_Job_Jobs Where Visibility=1 Group by Speciality)))Tbl1
ORDER BY Tbl1.DepartmentName
END
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Job_SelectCandidateByClientId]    Script Date: 07/13/2012 18:10:46 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_SelectCandidateByClientId]
@ClientId INT
AS
BEGIN
SELECT Aid,JobId,CandidateName,Age,Sex,PermanentAddress,Email,City,District,State,Country,AboutUs,ContactPhone,ContactMobile,BestTime,Specialization,Experience,HighestQualification,HighestDegree,CurrentEmployer,ExistingPay,DesiredPay,Willing,UploadResume,CONVERT(VARCHAR, AppliedDate, 103) as AppliedDate,HrStatus,HrDateUpdated,FinalStatus,Notes,ClientId FROM TBL_Job_Apply WHERE ClientId=@ClientId ORDER BY Aid DESC
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Job_SelectCandidateByClientIdByAll]    Script Date: 07/13/2012 18:10:46 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_SelectCandidateByClientIdByAll]
AS
BEGIN
SELECT A.Aid,A.JobId,A.CandidateName,A.Age,A.Sex,A.PermanentAddress,A.Email,A.City,A.District,A.State,A.Country,A.AboutUs,A.ContactPhone,A.ContactMobile,A.BestTime,A.Specialization,A.Experience,A.HighestQualification,A.HighestDegree,A.CurrentEmployer,A.ExistingPay,A.DesiredPay,A.Willing,A.UploadResume,CONVERT(VARCHAR, A.AppliedDate, 103) as AppliedDate,A.HrStatus,A.HrDateUpdated,A.FinalStatus,A.Notes,A.ClientId,O.OrganizationName + '-' + O.BranchName As Client FROM TBL_Job_Apply A
Join TBL_Organization O ON O.OrganizationId=A.ClientId
ORDER BY A.Aid DESC
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Job_SelectCandidateDetailsByAidClientId]    Script Date: 07/13/2012 18:10:46 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_SelectCandidateDetailsByAidClientId]
@Aid INT,
@ClientId INT
AS
BEGIN
SELECT Aid,JobId,CandidateName,Age,Sex,PermanentAddress,Email,City,District,State,Country,AboutUs,ContactPhone,ContactMobile, SUBSTRING(BestTime,CHARINDEX(' ',BestTime)+1,LEN(BestTime)) as besttime,Specialization,Experience,HighestQualification,HighestDegree,CurrentEmployer,ExistingPay,DesiredPay,Willing,UploadResume,AppliedDate,HrStatus,HrDateUpdated,FinalStatus,Notes,ClientId FROM TBL_Job_Apply WHERE Aid=@Aid AND ClientId=@ClientId
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Job_SelectDepartmentByClient]    Script Date: 07/13/2012 18:10:46 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[USP_Job_SelectDepartmentByClient]
@did INT
AS
BEGIN
SELECT Distinct J.ClientId,O.OrganizationName FROM TBL_Job_Jobs J JOIN TBL_Organization O ON O.OrganizationId=J.ClientId 
JOIN TBL_Job_Speciality S ON S.SpecialityId = @did AND J.Speciality=SpcId WHERE J.Visibility=1 AND O.IsDeleted=0 AND O.IsActivated=1
END


GO

/****** Object:  StoredProcedure [dbo].[USP_Job_SelectFacility]    Script Date: 07/13/2012 18:10:46 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[USP_Job_SelectFacility]
AS
BEGIN
SELECT F.FacId,F.Facility,F.Visibility,(O.OrganizationName + '-' + O.BranchName + '-' +  C.CountryName + '-' + S.StateName + '-' + C1.CityName) AS Client,O.OrganizationId,F.ClientId,F.CreatedDate,F.UpdatedDate,F.WhoCreated,F.WhoUpdated 
FROM TBL_Job_Facility F 
JOIN TBL_Organization O ON O.OrganizationId=F.ClientId  AND O.IsActivated=1 AND O.IsDeleted=0
JOIN VW_Job_Country C ON C.CountryId=O.CountryId
JOIN VW_Job_State S ON S.StateId=O.StateId
JOIN VW_Job_City C1 ON C1.CityId=O.CityId
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Job_SelectJob]    Script Date: 07/13/2012 18:10:46 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_SelectJob]
AS
BEGIN
SELECT Distinct J.Jid,
J.JobId,
J.JobTitle,
J.Facility As FacilityId,
F.Facility,
J.Speciality As SpecialityId,
S.DepartmentName AS Speciality,
L.CountryId As CountryId,MC.CountryName AS Country,L.StateId As StateId,
CASE WHEN L.StateId =-1 THEN 'no mapping' ELSE MS.StateName END AS State,L.CityId As CityId,MT.CityName As City,
J.Description,J.Visibility,J.ClientId,J.CreatedDate,J.UpdatedDate,J.WhoCreated,J.WhoUpdated,
Case when L.StateId =-1 then O.OrganizationName + '-' + O.BranchName + '-' + MC.CountryName + '-' +  MT.CityName else O.OrganizationName + '-' + O.BranchName + '-' + MC.CountryName + '-' + MS.StateName + '-' + MT.CityName end AS Client,L.Lid FROM TBL_Job_Jobs J 
JOIN TBL_Job_Facility F ON F.FacId=J.Facility 
JOIN TBL_Job_Speciality S1 ON S1.SpcId=J.Speciality
JOIN TBL_Master_Department S ON S.DepartmentId=S1.SpecialityId
JOIN TBL_Job_Location L ON L.Lid=J.Location
JOIN VW_Job_Country MC ON MC.CountryId = L.CountryId 
JOIN  VW_Job_City MT ON MT.CityId=L.CityId 
JOIN VW_Job_State MS ON MS.StateCode=MT.StateCode 
Join TBL_Organization O ON O.OrganizationId=J.ClientId 
WHERE  S.IsApproved=1 AND S.IsDeleted=0 AND O.IsActivated=1 AND O.IsDeleted=0 
END


GO

/****** Object:  StoredProcedure [dbo].[USP_Job_SelectJobByJobId]    Script Date: 07/13/2012 18:10:46 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_SelectJobByJobId]
@JobId NVARCHAR(MAX),
@ClientId INT
As
BEGIN
SELECT * FROM TBL_Job_Jobs WHERE JobId=@JobId AND ClientId=@ClientId
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Job_SelectJobByJobIdByVisible]    Script Date: 07/13/2012 18:10:46 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_SelectJobByJobIdByVisible]
@JobId NVARCHAR(MAX),
@ClientId INT
As
BEGIN
SELECT J.Jid,J.JobId,J.JobTitle,J.Facility As FacilityId,F.Facility,J.Speciality As SpecialityId,S.DepartmentName AS Speciality,L.CountryId AS CountryId,MC.CountryName AS Country,
L.StateId As StateId,MS.StateName AS State,L.CityId As CityId,MT.CityName As City,J.Description,J.Visibility,J.ClientId,CONVERT(VARCHAR(8),J.CreatedDate,5) AS CreatedDate,
J.UpdatedDate,J.WhoCreated,J.WhoUpdated FROM TBL_Job_Jobs J
JOIN TBL_Job_Facility F ON F.FacId=J.Facility 
JOIN TBL_Job_Speciality S1 ON S1.SpcId=J.Speciality
JOIN TBL_Master_Department S ON S.DepartmentId=S1.SpecialityId
JOIN TBL_Job_Location L ON L.Lid=J.Location
JOIN VW_Job_Country MC ON MC.CountryId = L.CountryId
JOIN VW_Job_State MS ON MS.StateId = L.StateId
JOIN VW_Job_City MT ON MT.CityId = L.CityId WHERE JobId=@JobId AND J.Visibility=1 AND  J.ClientId=@ClientId
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Job_SelectLocation]    Script Date: 07/13/2012 18:10:46 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_SelectLocation]
AS
BEGIN
Select Distinct L.Lid,M.CountryName AS Country,L.CountryId,L.StateId,Case when L.StateId =-1 then 'no mapping' else MS.StateName end as StateName,
MC.StateCode,L.CityId,MC.CityName,L.Visibility,L.ClientId,L.CreatedDate,L.UpdatedDate,L.WhoCreated,L.WhoUpdated,
Case when L.StateId =-1 then O.OrganizationName + '-' + O.BranchName + '-' + M.CountryName + '-' +  MC.CityName else O.OrganizationName + '-' + O.BranchName + '-' + M.CountryName + '-' + MS.StateName + '-' + MC.CityName end AS Client FROM TBL_Job_Location L 
JOIN TBL_Organization O ON O.OrganizationId=L.ClientId AND O.IsActivated=1 AND O.IsDeleted=0
JOIN VW_Job_Country M ON M.CountryId = L.CountryId 
JOIN  VW_Job_City MC ON MC.CityId=L.CityId 
JOIN VW_Job_State MS ON MS.StateCode=MC.StateCode 
and MS.CountryCode=MC.CountryCode
WHERE O.IsActivated=1 AND O.IsDeleted=0
END



GO

/****** Object:  StoredProcedure [dbo].[USP_Job_SelectLocationByClientId]    Script Date: 07/13/2012 18:10:46 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_SelectLocationByClientId]
@ClientId INT
AS
BEGIN
Select Distinct L.Lid,M.CountryName AS Country,L.CountryId,L.StateId,Case when L.StateId =-1 then 'no mapping' else MS.StateName end as StateName,
MC.StateCode,L.CityId,MC.CityName,L.Visibility,L.ClientId,L.CreatedDate,L.UpdatedDate,L.WhoCreated,L.WhoUpdated,
Case when L.StateId =-1 then O.OrganizationName + '-' + O.BranchName + '-' + M.CountryName + '-' +  MC.CityName else O.OrganizationName + '-' + O.BranchName + '-' + M.CountryName + '-' + MS.StateName + '-' + MC.CityName end AS Client FROM TBL_Job_Location L 
JOIN TBL_Organization O ON O.OrganizationId=L.ClientId AND O.IsActivated=1 AND O.IsDeleted=0
JOIN VW_Job_Country M ON M.CountryId = L.CountryId 
JOIN  VW_Job_City MC ON MC.CityId=L.CityId 
JOIN VW_Job_State MS ON MS.StateCode=MC.StateCode 
and MS.CountryCode=MC.CountryCode
WHERE O.IsActivated=1 AND O.IsDeleted=0 and L.ClientId=@ClientId
END



GO

/****** Object:  StoredProcedure [dbo].[USP_Job_SelectMasterCityByCountryStateID]    Script Date: 07/13/2012 18:10:46 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_SelectMasterCityByCountryStateID]
@CountryId INT,
@StateId INT
AS
BEGIN
DECLARE @CountryCode NVARCHAR(MAX)
SELECT @CountryCode = CountryCode From [VW_Job_Country] Where CountryId=@CountryId
DECLARE @StateCode NVARCHAR(MAX) 
SELECT @StateCode = StateCode From [VW_Job_State] Where StateId=@StateId
SELECT * FROM [VW_Job_City] WHERE CountryCode IN(@CountryCode) and StateCode=@StateCode
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Job_SelectMasterCountry]    Script Date: 07/13/2012 18:10:46 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_SelectMasterCountry]
AS
BEGIN
SELECT * FROM [VW_Job_Country]
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Job_SelectMasterSpeciality]    Script Date: 07/13/2012 18:10:46 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_SelectMasterSpeciality]
AS
BEGIN
SELECT * FROM TBL_Master_Department WHERE IsApproved=1 AND IsDeleted=0 Order By DepartmentName
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Job_SelectMasterStateByCountryID]    Script Date: 07/13/2012 18:10:46 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_SelectMasterStateByCountryID]
@CountryId INT
AS
BEGIN

	DECLARE @CountryCode NVARCHAR(2)
	SELECT @CountryCode=CountryCode FROM TBL_GeoPostcodes_Country WHERE CountryId=@CountryId
	
	IF (@CountryCode = 'AL') or (@CountryCode = 'AZ') or (@CountryCode = 'BD')
		or (@CountryCode = 'BE') or (@CountryCode = 'BR')  or (@CountryCode = 'BG')
		or (@CountryCode = 'GB') or (@CountryCode = 'TH') or (@CountryCode = 'FR')
		or (@CountryCode = 'GR') or (@CountryCode = 'HU') or (@CountryCode = 'IE')
		or (@CountryCode = 'IT') or (@CountryCode = 'JP') or (@CountryCode = 'MK')
		or (@CountryCode = 'MV') or (@CountryCode = 'MT') or (@CountryCode = 'MN')
		or (@CountryCode = 'MA') or (@CountryCode = 'MZ') or (@CountryCode = 'NP')
		or (@CountryCode = 'PH') or (@CountryCode = 'PT') or (@CountryCode = 'RO')
		or (@CountryCode = 'RU') or (@CountryCode = 'RS') or (@CountryCode = 'SI')
		or (@CountryCode = 'ES') or (@CountryCode = 'LK') or (@CountryCode = 'TR')
		or (@CountryCode = 'VE') or (@CountryCode = 'VN')  or (@CountryCode = 'CV')
		or (@CountryCode = 'NO') or (@CountryCode = 'DK') or (@CountryCode = 'DO')
		SELECT *
		FROM
			VW_Job_City
		WHERE
			CountryCode=@CountryCode AND CityName IS NOT NULL ORDER BY CityName
	ELSE 
		SELECT * FROM [VW_Job_State] WHERE CountryCode=(SELECT CountryCode FROM TBL_GeoPostcodes_Country WHERE CountryId=@CountryId) ORDER BY StateName







END

GO

/****** Object:  StoredProcedure [dbo].[USP_Job_SelectOrganization]    Script Date: 07/13/2012 18:10:46 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[USP_Job_SelectOrganization]
AS
BEGIN
SELECT OrganizationId,Upper(OrganizationName + '-' + BranchName + '-' +  C.CountryName + '-' + S.StateName + '-' + C1.CityName) AS Client 
FROM TBL_Organization O
JOIN VW_Job_Country C ON C.CountryId=O.CountryId
JOIN VW_Job_State S ON S.StateId=O.StateId
JOIN VW_Job_City C1 ON C1.CityId=O.CityId
WHERE IsActivated=1 AND IsDeleted=0 Order By Client
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Job_SelectSpeciality]    Script Date: 07/13/2012 18:10:46 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_SelectSpeciality]
AS
BEGIN
SELECT Distinct S.SpcId,S.SpecialityId,M.DepartmentName AS Speciality,S.Visibility,S.ClientId,S.CreatedDate,S.UpdatedDate,S.WhoCreated,S.WhoUpdated,(O.OrganizationName + '-' + O.BranchName + '-' +  C.CountryName + '-' + S1.StateName + '-' + C1.CityName) AS Client,O.OrganizationId FROM TBL_Job_Speciality S 
JOIN TBL_Master_Department M ON M.DepartmentId=S.SpecialityId 
JOIN TBL_Organization O ON O.OrganizationId=S.ClientId 
JOIN VW_Job_Country C ON C.CountryId=O.CountryId
JOIN VW_Job_State S1 ON S1.StateId=O.StateId
JOIN VW_Job_City C1 ON C1.CityId=O.CityId
WHERE S.SpcId IN (SELECT Distinct SpcId FROM TBL_Job_Speciality) AND O.IsActivated=1 AND O.IsDeleted=0 AND M.IsApproved=1 AND M.IsDeleted=0
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Job_SelectTopJobsByClientId]    Script Date: 07/13/2012 18:10:46 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_SelectTopJobsByClientId]
@ClientId INT
AS
BEGIN
SELECT Distinct TOP 8 J.Jid,J.JobId,J.JobTitle,J.Facility As FacilityId,F.Facility,J.Speciality As SpecialityId,
D.DepartmentName AS Speciality,
L.CountryId AS CountryId,MC.CountryName AS Country,
L.StateId As StateId,MS.StateName AS State,L.CityId As CityId,MT.CityName As City,L.Lid,
J.Description,J.Visibility,J.ClientId,CONVERT(VARCHAR(8),J.CreatedDate,5) AS posteddate,
J.UpdatedDate,J.WhoCreated,J.WhoUpdated FROM TBL_Job_Jobs J
JOIN TBL_Job_Facility F ON F.FacId=J.Facility 
JOIN TBL_Job_Speciality S1 ON S1.SpcId = J.Speciality
JOIN TBL_Master_Department D ON D.DepartmentId=S1.SpecialityId
JOIN TBL_Job_Location L ON L.Lid=J.Location
JOIN VW_Job_Country MC ON MC.CountryId = L.CountryId
JOIN VW_Job_State MS ON MS.StateId = L.StateId
JOIN VW_Job_City MT ON MT.CityId = L.CityId WHERE J.ClientId=@ClientId AND J.Visibility=1
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Job_SpecialitySelectByClientID]    Script Date: 07/13/2012 18:10:46 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_SpecialitySelectByClientID]
@ClientId INT
AS
BEGIN
SELECT Distinct S.SpcId,S.SpecialityId,M.DepartmentName AS Speciality,S.Visibility,S.ClientId,S.CreatedDate,S.UpdatedDate,S.WhoCreated,S.WhoUpdated FROM TBL_Job_Speciality S 
JOIN TBL_Master_Department M ON M.DepartmentId=S.SpecialityId 
WHERE S.SpcId IN (SELECT Distinct SpcId FROM TBL_Job_Speciality) AND S.ClientId=@ClientId AND M.IsApproved=1 AND M.IsDeleted=0
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Job_SpecialitySelectByClientIDVisible]    Script Date: 07/13/2012 18:10:46 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_SpecialitySelectByClientIDVisible]
@ClientId INT
AS
BEGIN
SELECT Distinct S.SpcId,S.SpecialityId,M.DepartmentName AS Speciality,S.Visibility,S.ClientId,S.CreatedDate,S.UpdatedDate,S.WhoCreated,S.WhoUpdated FROM TBL_Job_Speciality S 
JOIN TBL_Master_Department M ON M.DepartmentId=S.SpecialityId 
WHERE S.SpcId IN (SELECT Distinct SpcId FROM TBL_Job_Speciality) AND S.ClientId=@ClientId AND Visibility=1 AND M.IsApproved=1 AND M.IsDeleted=0 Order By M.DepartmentName
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Job_SpecialitySelectBySpcId]    Script Date: 07/13/2012 18:10:46 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_SpecialitySelectBySpcId]
@SpcId INT,
@SpecialityId INT,
@ClientId INT
AS
BEGIN
SELECT * FROM TBL_Job_Speciality WHERE SpcId!=@SpcId AND SpecialityId=@SpecialityId and ClientId=@ClientId
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Job_SpecialitySelectBySpeciality]    Script Date: 07/13/2012 18:10:46 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_SpecialitySelectBySpeciality]
@SpecialityId INT,
@ClientId INT
AS
BEGIN
SELECT * FROM TBL_Job_Speciality WHERE SpecialityId=@SpecialityId and ClientId=@ClientId
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Job_SRColVisibleSelectByVisible]    Script Date: 07/13/2012 18:10:46 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_SRColVisibleSelectByVisible]
@ClientId INT
AS
BEGIN
SELECT * FROM TBL_Job_SearchResultsColVisible WHERE ClientId=@ClientId
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Job_SRColVisibleSelectByVisibleByAll]    Script Date: 07/13/2012 18:10:46 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_SRColVisibleSelectByVisibleByAll]
AS
BEGIN
SELECT H.SrId,H.Country,H.State,H.City,H.Facility,H.Speciality,H.PostDate,H.ClientId,H.CreatedDate,H.UpdatedDate,H.WhoCreated,H.WhoUpdated,
(O.OrganizationName + '-' + O.BranchName + '-' +  C.CountryName + '-' + S.StateName + '-' + C1.CityName) AS Client 
FROM TBL_Job_SearchResultsColVisible H JOIN TBL_Organization O ON O.OrganizationId=H.ClientId AND O.IsActivated=1 AND O.IsDeleted=0
JOIN VW_Job_Country C ON C.CountryId=O.CountryId
JOIN VW_Job_State S ON S.StateId=O.StateId
JOIN VW_Job_City C1 ON C1.CityId=O.CityId
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Job_StateSelectInStateByClientIDVisible]    Script Date: 07/13/2012 18:10:46 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_StateSelectInStateByClientIDVisible]
@Lid NVARCHAR(MAX),
@ClientId INT
AS
BEGIN
SELECT Distinct S.StateId,M.StateName FROM TBL_Job_Location S JOIN VW_Job_State M ON M.StateId=S.StateId 
JOIN VW_Job_Country C ON C.CountryId=S.CountryId
WHERE S.StateId  IN (SELECT Distinct StateId FROM TBL_Job_Location) AND S.ClientId=@ClientId AND
C.CountryName=@Lid AND S.Visibility=1 Order by M.StateName
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Job_StateSelectInStateByClientIDVisibleByAdmin]    Script Date: 07/13/2012 18:10:46 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_StateSelectInStateByClientIDVisibleByAdmin]
@Lid INT,
@ClientId INT
AS
BEGIN
SELECT Distinct S.StateId,M.StateName FROM TBL_Job_Location S JOIN VW_Job_State M ON M.StateId=S.StateId 
WHERE S.StateId  IN (SELECT Distinct StateId FROM TBL_Job_Location) AND S.ClientId=@ClientId AND
S.CountryId=@Lid AND S.Visibility=1 Order by M.StateName
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Job_SubAdminLoginSelectByUserName]    Script Date: 07/13/2012 18:10:46 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_SubAdminLoginSelectByUserName]
@UserName NVARCHAR(MAX),
@ClientId INT
AS
BEGIN
SELECT * FROM TBL_Job_SubAdminLogin WHERE UserName=@UserName AND ClientId=@ClientId
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Job_SWColVisibleSelectByVisible]    Script Date: 07/13/2012 18:10:47 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_SWColVisibleSelectByVisible]
@ClientId INT
AS
BEGIN
SELECT * FROM TBL_Job_SearchWidgetColVisible WHERE ClientId=@ClientId
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Job_SWColVisibleSelectByVisibleByAll]    Script Date: 07/13/2012 18:10:47 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_SWColVisibleSelectByVisibleByAll]
AS
BEGIN
SELECT S.SwId,S.Country,S.State,S.City,S.Facility,S.ClientId,S.CreatedDate,S.UpdatedDate,S.WhoCreated,S.WhoUpdated,
(O.OrganizationName + '-' + O.BranchName + '-' +  C.CountryName + '-' + S1.StateName + '-' + C1.CityName) AS Client
FROM TBL_Job_SearchWidgetColVisible S JOIN TBL_Organization O ON O.OrganizationId=S.ClientId AND O.IsActivated=1 AND O.IsDeleted=0
JOIN VW_Job_Country C ON C.CountryId=O.CountryId
JOIN VW_Job_State S1 ON S1.StateId=O.StateId
JOIN VW_Job_City C1 ON C1.CityId=O.CityId
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Job_UpdateCandidateDetails]    Script Date: 07/13/2012 18:10:47 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Job_UpdateCandidateDetails]
@Aid INT,
@HrStatus NVARCHAR(MAX),
@FinalStatus NVARCHAR(MAX),
@Notes NVARCHAR(MAX)
AS
BEGIN
UPDATE TBL_Job_Apply SET HrStatus=@HrStatus,HrDateUpdated=GETDATE(),FinalStatus=@FinalStatus,Notes=@Notes WHERE Aid=@Aid
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Landing_DeleteImageGallery]    Script Date: 07/13/2012 18:10:47 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Landing_DeleteImageGallery] 
(
	@ImageId INT
)
AS
BEGIN
	DELETE FROM TBL_Landing_ImageGallery WHERE ImageId=@ImageId
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Landing_DeleteMainTab]    Script Date: 07/13/2012 18:10:47 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Landing_DeleteMainTab]
(
	@LandingId INT
)
AS
BEGIN
	DELETE FROM TBL_Landing_SubTab WHERE MainTabId IN (SELECT MainTabId FROM TBL_Landing_MainTab WHERE LandingId=@LandingId)

	DELETE FROM TBL_Landing_MainTab WHERE LandingId=@LandingId
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Landing_DeleteSubTab]    Script Date: 07/13/2012 18:10:47 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Landing_DeleteSubTab]
(
	@MainTabId INT
)
AS
BEGIN
	DELETE FROM TBL_Landing_SubTab WHERE MainTabId=@MainTabId
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Landing_DeleteVideoGallery]    Script Date: 07/13/2012 18:10:47 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Landing_DeleteVideoGallery]
(
	@AccountId INT,
	@AccountTypeId INT,
	@Version INT
)
AS
BEGIN
	DELETE FROM TBL_Landing_VideoGallery WHERE AccountId=@AccountId AND AccountTypeId=@AccountTypeId AND Version=@Version
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Landing_GetAllImageGallery]    Script Date: 07/13/2012 18:10:47 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Landing_GetAllImageGallery]
AS
SELECT * FROM TBL_Landing_ImageGallery
GO

/****** Object:  StoredProcedure [dbo].[USP_Landing_GetBanner]    Script Date: 07/13/2012 18:10:47 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Landing_GetBanner]
(
	@DepartmentId INT
)
AS
SELECT B.BannerId, D.DepartmentName + '/' + BannerFileName [BannerFilename] FROM TBL_Master_Banner B, TBL_Master_Department D WHERE B.DepartmentId=D.DepartmentId AND B.DepartmentId=@DepartmentId

GO

/****** Object:  StoredProcedure [dbo].[USP_Landing_GetBannerById]    Script Date: 07/13/2012 18:10:47 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Landing_GetBannerById]
(
	@BannerId INT
)
AS
SELECT D.DepartmentName + '/' + BannerFileName [BannerFilename] FROM TBL_Master_Banner B, TBL_Master_Department D WHERE B.DepartmentId=D.DepartmentId AND B.BannerId=@BannerId 
GO

/****** Object:  StoredProcedure [dbo].[USP_Landing_GetDoctorIdExistInLanding]    Script Date: 07/13/2012 18:10:48 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Landing_GetDoctorIdExistInLanding]
(
	@AccountId INT
)
AS
BEGIN
	DECLARE @Id INT
	SET @Id = 0
	SELECT TOP 1 @Id=AccountId FROM TBL_Landing_Publish WHERE AccountId IN (SELECT DoctorId FROM TBL_Doctor WHERE LoginId=(SELECT LoginId FROM TBL_Doctor WHERE DoctorId=@AccountId)) ORDER BY AccountId DESC
	
	SELECT @Id	
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Landing_GetImageById]    Script Date: 07/13/2012 18:10:48 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Landing_GetImageById]
(
	@Id INT
)
AS
BEGIN
	SELECT * FROM TBL_Landing_ImageGallery WHERE ImageId=@Id
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Landing_GetImageGallery]    Script Date: 07/13/2012 18:10:48 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Landing_GetImageGallery]
(
	@AccountId INT,
	@AccountTypeId INT,
	@Version INT,
	@All BIT
)
AS
BEGIN
	IF (@AccountTypeId = 3)
	BEGIN
		IF @All = 0
			SELECT * FROM TBL_Landing_ImageGallery WHERE AccountId IN (SELECT DoctorId FROM TBL_Doctor WHERE LoginId=(SELECT LoginId FROM TBL_Doctor WHERE DoctorId=@AccountId)) AND AccountTypeId=@AccountTypeId AND Version=@Version AND Selected=1
		ELSE
			SELECT * FROM TBL_Landing_ImageGallery WHERE AccountId IN (SELECT DoctorId FROM TBL_Doctor WHERE LoginId=(SELECT LoginId FROM TBL_Doctor WHERE DoctorId=@AccountId)) AND AccountTypeId=@AccountTypeId AND Version=@Version	
	END
	ELSE
	BEGIN
		IF @All = 0
			SELECT * FROM TBL_Landing_ImageGallery WHERE AccountId=@AccountId AND AccountTypeId=@AccountTypeId AND Version=@Version AND Selected=1
		ELSE
			SELECT * FROM TBL_Landing_ImageGallery WHERE AccountId=@AccountId AND AccountTypeId=@AccountTypeId AND Version=@Version
	END	
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Landing_GetImageGalleryCount]    Script Date: 07/13/2012 18:10:48 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Landing_GetImageGalleryCount]
(
	@AccountId INT,
	@AccountTypeId INT,
	@Version INT,
	@All BIT
)
AS
BEGIN
	IF (@AccountTypeId = 3)
	BEGIN
		IF @All = 0
			SELECT COUNT(*) FROM TBL_Landing_ImageGallery WHERE AccountId IN (SELECT DoctorId FROM TBL_Doctor WHERE LoginId=(SELECT LoginId FROM TBL_Doctor WHERE DoctorId=@AccountId)) AND AccountTypeId=@AccountTypeId AND Version=@Version AND Selected=1
		ELSE
			SELECT COUNT(*) FROM TBL_Landing_ImageGallery WHERE AccountId IN (SELECT DoctorId FROM TBL_Doctor WHERE LoginId=(SELECT LoginId FROM TBL_Doctor WHERE DoctorId=@AccountId)) AND AccountTypeId=@AccountTypeId AND Version=@Version	
	END
	ELSE
	BEGIN
		IF @All = 0
			SELECT COUNT(*) FROM TBL_Landing_ImageGallery WHERE AccountId=@AccountId AND AccountTypeId=@AccountTypeId AND Version=@Version AND Selected=1
		ELSE
			SELECT COUNT(*) FROM TBL_Landing_ImageGallery WHERE AccountId=@AccountId AND AccountTypeId=@AccountTypeId AND Version=@Version
	END	
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Landing_GetLanding]    Script Date: 07/13/2012 18:10:48 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Landing_GetLanding]
(
	@PublishId INT,
	@Version INT
)
AS
BEGIN
	SELECT * FROM TBL_Landing WHERE PublishId=@PublishId AND Version=@Version
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Landing_GetLandingPublish]    Script Date: 07/13/2012 18:10:48 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Landing_GetLandingPublish]
(
	@AccountId INT,
	@AccountTypeId INT
)
AS
BEGIN
	IF (@AccountTypeId = 3)
		SELECT * FROM TBL_Landing_Publish WHERE AccountId IN (SELECT DoctorId FROM TBL_Doctor WHERE LoginId=(SELECT LoginId FROM TBL_Doctor WHERE DoctorId=@AccountId)) AND AccountTypeId=@AccountTypeId
	ELSE
		SELECT * FROM TBL_Landing_Publish WHERE AccountId=@AccountId AND AccountTypeId=@AccountTypeId
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Landing_GetMainTabs]    Script Date: 07/13/2012 18:10:49 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Landing_GetMainTabs]
(
	@LandingId INT
)
AS
BEGIN
	SELECT * FROM TBL_Landing_MainTab WHERE LandingId=@LandingId
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Landing_GetSubTabs]    Script Date: 07/13/2012 18:10:49 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Landing_GetSubTabs]
(
	@MainTabId INT
)
AS
BEGIN
	SELECT * FROM TBL_Landing_SubTab WHERE MainTabId=@MainTabId
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Landing_GetVideoGallery]    Script Date: 07/13/2012 18:10:49 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Landing_GetVideoGallery]
(
	@AccountId INT,
	@AccountTypeId INT,
	@Version INT,
	@All BIT
)
AS
BEGIN
	IF @All = 0
		SELECT * FROM TBL_Landing_VideoGallery WHERE AccountId=@AccountId AND AccountTypeId=@AccountTypeId AND Version=@Version AND Selected=1
	ELSE
		SELECT * FROM TBL_Landing_VideoGallery WHERE AccountId=@AccountId AND AccountTypeId=@AccountTypeId AND Version=@Version
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Landing_GetVideoGalleryCount]    Script Date: 07/13/2012 18:10:49 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Landing_GetVideoGalleryCount]
(
	@AccountId INT,
	@AccountTypeId INT,
	@Version INT,
	@All BIT
)
AS
BEGIN
	IF @All = 0
		SELECT COUNT(*) FROM TBL_Landing_VideoGallery WHERE AccountId=@AccountId AND AccountTypeId=@AccountTypeId AND Version=@Version AND Selected=1
	ELSE
		SELECT COUNT(*) FROM TBL_Landing_VideoGallery WHERE AccountId=@AccountId AND AccountTypeId=@AccountTypeId AND Version=@Version
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Landing_InsertImageGallery]    Script Date: 07/13/2012 18:10:49 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Landing_InsertImageGallery]
(
	@AccountId INT,
	@AccountTypeId INT,
	@Version INT,
	@ImageName NVARCHAR(MAX),
	@ImageDescription NVARCHAR(MAX),
	@Image varbinary(MAX),
	@Selected BIT
)
AS
BEGIN
	--DECLARE @ImageCount INT
	
	--SELECT @ImageCount=COUNT(ImageName) FROM TBL_Landing_ImageGallery WHERE AccountId=@AccountId AND AccountTypeId=@AccountTypeId AND Version=@Version AND LOWER(ImageName)=LOWER(@ImageName)
	
	--IF @ImageCount = 0
	--BEGIN
		INSERT INTO TBL_Landing_ImageGallery (AccountId, AccountTypeId, Version, ImageName, ImageDescription, Images, Selected) VALUES (@AccountId, @AccountTypeId, @Version, @ImageName, @ImageDescription,@Image, @Selected)
	--END
	--ELSE
	--BEGIN
	--	UPDATE TBL_Landing_ImageGallery SET 
	--		ImageDescription=@ImageDescription,
	--		Selected=@Selected
	--	WHERE ImageName=@ImageName AND AccountId=@AccountId AND AccountTypeId=@AccountTypeId AND Version=@Version
	--END
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Landing_InsertLanding]    Script Date: 07/13/2012 18:10:50 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Landing_InsertLanding]
(
	@LandingId INT,
	@Version INT,
	@PublishId INT,
	@DepartmentId INT,
	@Forms NVARCHAR(MAX)
)
AS
BEGIN
	DECLARE @LandingCount INT
	
	SELECT @LandingCount=COUNT(LandingId) FROM TBL_Landing WHERE PublishId=@PublishId AND Version=@Version
	
	IF @LandingCount = 0
	BEGIN
		INSERT INTO TBL_Landing (Version, PublishId, DepartmentId, Forms, CreatedOn) VALUES (@Version, @PublishId, @DepartmentId, @Forms, GETDATE())
		SELECT @@IDENTITY
	END
	ELSE
	BEGIN
		UPDATE TBL_Landing SET DepartmentId=@DepartmentId, Forms=@Forms, ModifiedOn=GETDATE() WHERE LandingId=@LandingId AND Version=@Version
		SELECT @LandingId
	END
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Landing_InsertLandingPublish]    Script Date: 07/13/2012 18:10:50 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Landing_InsertLandingPublish]
(
	@PublishId INT,
	@AccountId INT,
	@AccountTypeId INT,
	@BannerId INT,
	@DefaultVersion INT
)
AS
BEGIN
	DECLARE @PublishCount INT
	
	SELECT @PublishCount=COUNT(PublishId) FROM TBL_Landing_Publish WHERE AccountId=@AccountId AND AccountTypeId=@AccountTypeId
	
	IF @PublishCount = 0
	BEGIN
		INSERT INTO TBL_Landing_Publish (AccountId, AccountTypeId, BannerId, DefaultVersion) VALUES (@AccountId, @AccountTypeId, @BannerId, @DefaultVersion)
		SELECT @@IDENTITY
	END
	ELSE
	BEGIN
		UPDATE TBL_Landing_Publish SET BannerId=@BannerId WHERE PublishId=@PublishId
		SELECT @PublishId
	END
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Landing_InsertMainTab]    Script Date: 07/13/2012 18:10:50 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Landing_InsertMainTab]
(
	@MainTabId INT,
	@MainTabName NVARCHAR(50),
	@MainTabContent TEXT,
	@LandingId INT
)
AS
BEGIN
	IF @MainTabId = 0
	BEGIN
		INSERT INTO TBL_Landing_MainTab (MainTabName, MainTabContent, LandingId) VALUES (@MainTabName, @MainTabContent, @LandingId)
		SELECT @@IDENTITY
	END
	ELSE
	BEGIN
		UPDATE TBL_Landing_MainTab SET MainTabName=@MainTabName, MainTabContent=@MainTabContent WHERE MainTabId=@MainTabId AND LandingId=@LandingId
		SELECT @MainTabId
	END
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Landing_InsertSubTab]    Script Date: 07/13/2012 18:10:50 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Landing_InsertSubTab]
(
	@SubTabId INT,
	@SubTabName NVARCHAR(50),
	@SubTabContent TEXT,
	@MainTabId INT
)
AS
BEGIN
	IF @SubTabId = 0
	BEGIN
		INSERT INTO TBL_Landing_SubTab (SubTabName, SubTabContent, MainTabId) VALUES (@SubTabName, @SubTabContent, @MainTabId)
		SELECT @@IDENTITY
	END
	ELSE
	BEGIN
		UPDATE TBL_Landing_SubTab SET SubTabName=@SubTabName, SubTabContent=@SubTabContent WHERE SubTabId=@SubTabId AND MainTabId=@MainTabId
		SELECT @SubTabId
	END
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Landing_InsertVideoGallery]    Script Date: 07/13/2012 18:10:50 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Landing_InsertVideoGallery]
(
	@AccountId INT,
	@AccountTypeId INT,
	@Version INT,
	@VideoContent NVARCHAR(MAX),
	@Selected BIT
)
AS
BEGIN
	INSERT INTO TBL_Landing_VideoGallery (AccountId, AccountTypeId, Version, VideoContent, Selected) VALUES (@AccountId, @AccountTypeId, @Version, @VideoContent, @Selected)
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Landing_PublishVersion]    Script Date: 07/13/2012 18:10:50 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROC [dbo].[USP_Landing_PublishVersion]
(
	@PublishId INT,
	@Version INT
)
AS
BEGIN
	--DECLARE @VersionCount INT
	--SELECT @VersionCount=(LandingId) FROM TBL_Landing WHERE PublishId=@PublishId AND Version=@Version
	
	--IF @VersionCount > 0
	--BEGIN
		UPDATE TBL_Landing_Publish SET DefaultVersion=@Version WHERE PublishId=@PublishId
		SELECT 1
	--END
	--ELSE
	--BEGIN
	--	SELECT 0	
	--END		
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Landing_UpdateImageGallery]    Script Date: 07/13/2012 18:10:51 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Landing_UpdateImageGallery]
(
	@ImageId INT,
	@ImageName nvarchar(MAX),
	@ImageDescription nvarchar(MAX),
	@Image varbinary(MAX),
	@ImageUpload INT
)
AS
BEGIN
	if(@ImageUpload = 1)
	
	UPDATE TBL_Landing_ImageGallery SET ImageName=@ImageName, ImageDescription=@ImageDescription where ImageId=@ImageId
	
	ELSE
	
	UPDATE TBL_Landing_ImageGallery SET ImageName=@ImageName, ImageDescription=@ImageDescription, Images=@Image where ImageId=@ImageId
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Login_GetAccount]    Script Date: 07/13/2012 18:10:51 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Login_GetAccount]
(
	@LoginId INT
)
AS
BEGIN
	SELECT * FROM TBL_Login WHERE LoginId=@LoginId
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Login_GetAccountByOrganizationId]    Script Date: 07/13/2012 18:10:51 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Login_GetAccountByOrganizationId] 
(
	@OrganizationId INT,
	@LoginId INT
)
AS
BEGIN

CREATE TABLE #DoctorService
(
	OrganizationId INT,
	LoginId INT,
	AccountId INT,
	AccountTypeId INT,
	AccountName NVARCHAR(MAX),
	DoctorServiceName NVARCHAR(MAX),
	IsActivated BIT
)

INSERT INTO #DoctorService
		SELECT OrganizationId, LoginId, DoctorId [AccountId], 3 [AccountTypeId], 'Doctor' [AccountName], 'Dr. '+ DoctorName, IsActivated FROM TBL_Doctor WHERE OrganizationId=@OrganizationId AND IsDeleted=0 AND LoginId<>@LoginId
		
INSERT INTO #DoctorService
		SELECT OrganizationId, LoginId, ServiceId [AccountId],  2 [AccountTypeId], ServiceName [AccountName], 'Service - '+ ServiceName, IsActivated FROM TBL_Service WHERE OrganizationId=@OrganizationId AND IsDeleted=0 AND LoginId<>@LoginId
		
SELECT * FROM #DoctorService ORDER BY DoctorServiceName ASC

END
GO

/****** Object:  StoredProcedure [dbo].[USP_Login_GetAccountByPatientId]    Script Date: 07/13/2012 18:10:51 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Login_GetAccountByPatientId]
(
	@PatientId INT
)
AS
BEGIN
	DECLARE @LoginCount INT
	SELECT @LoginCount=COUNT(*) FROM TBL_Login WHERE LoginId=(SELECT LoginId FROM TBL_Patient WHERE PatientId=@PatientId)
	
	IF (@LoginCount > 0)
	BEGIN
		SELECT * FROM TBL_Login WHERE LoginId=(SELECT LoginId FROM TBL_Patient WHERE PatientId=@PatientId)
	END
	ELSE
	BEGIN
		SELECT * FROM TBL_Login WHERE LoginId=(SELECT LoginId FROM TBL_Patient WHERE PatientId=(SELECT ParentId FROM TBL_Patient WHERE PatientId=@PatientId))
	END
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Login_GetAccounts]    Script Date: 07/13/2012 18:10:51 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Login_GetAccounts] 
(
	@LoginId INT
)
AS
BEGIN
	CREATE TABLE #GetAccounts
	(
		OrganizationId INT,
		AccountId INT,
		LoginId INT,
		AccountTypeId INT,
		AccountName NVARCHAR(MAX)
	);
	
	INSERT INTO #GetAccounts
		SELECT 0, PatientId [AccountId], LoginId, 4 [AccountTypeId], '' [AccountName] FROM TBL_Patient WHERE LoginId=@LoginId AND IsDeleted=0 
	
	INSERT INTO #GetAccounts	
		SELECT OrganizationId, OrganizationId [AccountId], LoginId, 1 [AccountTypeId], OrganizationName + ' - ' + BranchName [AccountName] FROM TBL_Organization WHERE LoginId=@LoginId AND IsDeleted=0 
	
	INSERT INTO #GetAccounts
		SELECT OrganizationId, DoctorId [AccountId], LoginId, 3 [AccountTypeId], 'Doctor' [AccountName] FROM TBL_Doctor WHERE LoginId=@LoginId AND IsDeleted=0
		
	INSERT INTO #GetAccounts
		SELECT OrganizationId, ServiceId [AccountId], LoginId, 2 [AccountTypeId], ServiceName [AccountName] FROM TBL_Service WHERE LoginId=@LoginId AND IsDeleted=0
		
	SELECT * FROM #GetAccounts
	
	SELECT DISTINCT OrganizationId, LoginId FROM #GetAccounts
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Login_GetLogin]    Script Date: 07/13/2012 18:10:51 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Login_GetLogin] 
(
	@SignInId NVARCHAR(MAX)
)
AS
BEGIN
	SELECT * FROM TBL_Login WHERE
		((EmailId=@SignInId) OR
		(MobileId=@SignInId)) AND IsDeleted=0 AND IsActivated=1
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Login_GetLoginNew]    Script Date: 07/13/2012 18:10:52 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Login_GetLoginNew] 
(
	@SignInId NVARCHAR(MAX)
)
AS
BEGIN
	SELECT * FROM TBL_Login WHERE
		((MedAppId=@SignInId) OR
		(EmailId=@SignInId) OR
		(MobileId=@SignInId)) AND IsDeleted=0 AND IsActivated=0
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Login_GetLoginWithoutActivate]    Script Date: 07/13/2012 18:10:52 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Login_GetLoginWithoutActivate] 
(
	@SignInId NVARCHAR(MAX)
)
AS
BEGIN
	SELECT * FROM TBL_Login WHERE
		((EmailId=@SignInId) OR
		(MobileId=@SignInId)) AND IsDeleted=0 AND IsActivated=0
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Login_GetZipDailConfirmation]    Script Date: 07/13/2012 18:10:52 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Login_GetZipDailConfirmation]
(
	@TransactionToken NVARCHAR(max)
)
AS
BEGIN
	SELECT COUNT(LoginId) FROM TBL_Login WHERE TransactionToken=@TransactionToken AND IsActivated=1
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Login_InsertAccount]    Script Date: 07/13/2012 18:10:53 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Login_InsertAccount]
(
	@LoginId INT,
	@FirstName NVARCHAR(150),
	@LastName NVARCHAR(150),
	@CountryId INT,
	@MobileId NVARCHAR(20),
	@EmailId NVARCHAR(250),
	@Password NVARCHAR(15),
	@IsDirect BIT,
	@IsActivated BIT
)
AS
BEGIN
	DECLARE @MedAppId  NVARCHAR(20)
	DECLARE @NewLoginId INT
	
	IF (@LoginId = 0)
	BEGIN
		SELECT @LoginId=LoginId FROM TBL_Login WHERE MobileId=@MobileId AND EmailId=@EmailId
	END
	
	IF (@LoginId = 0)
	BEGIN
		INSERT INTO TBL_Login
		(FirstName, LastName, MedAppId, CountryId, MobileId, EmailId, Password, IsDirect, IsActivated, IsEmailActivated, IsEmailNotification, IsSMSNotification, CreatedOn, IsDeleted) VALUES
		(@FirstName, @LastName, NULL, @CountryId, @MobileId, @EmailId, @Password, @IsDirect, @IsActivated, 0, 0, 0, GETDATE(), 0)
		
		SET @NewLoginId = @@IDENTITY
		SET @MedAppId = 'MED-' + CONVERT(NVARCHAR, @NewLoginId) 
		
		UPDATE TBL_Login SET MedAppId=@MedAppId WHERE LoginId=@NewLoginId
	
		SELECT @NewLoginId
	END
	ELSE
	BEGIN
		UPDATE TBL_Login SET
			FirstName=@FirstName,
			LastName=@LastName,
			CountryId=@CountryId,
			MobileId=@MobileId,
			EmailId=@EmailId,
			IsDirect=@IsDirect,
			IsActivated=@IsActivated,
			ModifiedOn=GETDATE()
		WHERE
			LoginId=@LoginId
			
		SELECT @LoginId
	END
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Login_InsertTransactionToken]    Script Date: 07/13/2012 18:10:54 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Login_InsertTransactionToken]
(
	@LoginId INT,
	@TransactionToken NVARCHAR(max)
)
AS
BEGIN
	UPDATE TBL_Login SET TransactionToken=@TransactionToken WHERE LoginId=@LoginId
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Login_UpdateKeywordRegistration]    Script Date: 07/13/2012 18:10:55 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Login_UpdateKeywordRegistration]
(
	@LoginId INT,
	@FirstName NVARCHAR(150),
	@LastName NVARCHAR(150),
	@EmailId NVARCHAR(250)
)
AS
BEGIN
	UPDATE TBL_Login SET
		FirstName=@FirstName,
		LastName=@LastName,
		EmailId=@EmailId,
		ModifiedOn=GETDATE()
	WHERE
		LoginId=@LoginId
	
	UPDATE TBL_Patient SET FirstName=@FirstName, LastName=@LastName WHERE LoginId=@LoginId AND ParentId=0
		
	UPDATE TBL_Doctor SET DoctorName=@FirstName + ' ' + @LastName WHERE LoginId=@LoginId

	UPDATE TBL_Service SET InCharge=@FirstName + ' ' + @LastName WHERE LoginId=@LoginId
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Login_UpdateZipDailVerification]    Script Date: 07/13/2012 18:10:56 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Login_UpdateZipDailVerification]
(
	@TransactionToken NVARCHAR(max)
)
AS
BEGIN
	UPDATE TBL_Login SET IsActivated=1, IsSMSNotification=1 WHERE TransactionToken=@TransactionToken
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Master_GetCity]    Script Date: 07/13/2012 18:10:56 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Master_GetCity] 
(
	@StateId int
)
AS
BEGIN
	DECLARE @CountryCode NVARCHAR(2)
	DECLARE @StateCode NVARCHAR(6)
	
	SELECT @CountryCode=CountryCode, @StateCode=StateCode FROM TBL_GeoPostcodes_State WHERE StateId=@StateId

	IF (ISNULL(@StateCode, '') != '')
		SELECT CityId, CityName
		FROM
			TBL_GeoPostcodes_City
		WHERE
			CountryCode=@CountryCode AND
			StateCode=@StateCode AND CityName IS NOT NULL ORDER BY CityName
	ELSE
		SELECT CityId, CityName
		FROM
			TBL_GeoPostcodes_City
		WHERE
			StateCode=@StateCode ORDER BY CityName

	--DECLARE @sqlquery NVARCHAR(MAX)
	--DECLARE @countrycode NVARCHAR(MAX)
	
	--SELECT @countrycode=CountryCode FROM TBL_Master_Country WHERE CountryId=(SELECT CountryId FROM TBL_Master_State WHERE StateId=@StateId)

	--SET @sqlquery = 'SELECT CityId, CityName FROM TBL_Master_City WHERE CityName IN (
	--	SELECT DISTINCT CASE 
	--		WHEN LEN(Isnull(REGION2,''''))>0 THEN REGION2
	--		WHEN LEN(Isnull(REGION3,''''))>0 THEN REGION3
	--		WHEN LEN(Isnull(REGION4,''''))>0 THEN REGION4
	--		WHEN LEN(Isnull(place,''''))>0 THEN place END as City
	--	FROM [medappointment_geo].dbo.[geodb_' + @countrycode + ']
	--	WHERE REGION1 LIKE ''%' + (SELECT StateName FROM TBL_Master_State WHERE StateId=@StateId ) + '%'') AND StateId=' + CAST(@StateId AS VARCHAR) + ' ORDER BY CityName'

	--PRINT @sqlquery
	--EXECUTE sp_executesql @sqlquery
	
	--SELECT CityId, CityName FROM TBL_Master_City WHERE StateId=@StateId 
	
	--insert into TBL_GeoPostcodes_City
	--select 
	--	CASE 
	--		WHEN LEN(Isnull(REGION3,''''))>0 THEN REGION3
	--		WHEN LEN(Isnull(REGION2,''''))>0 THEN REGION2
	--	END AS CityName,
	--	regiso2,
	--	country
	-- from TBL_GeoPostcodes GROUP BY country, regiso2, CASE 
	--		WHEN LEN(Isnull(REGION3,''''))>0 THEN REGION3
	--		WHEN LEN(Isnull(REGION2,''''))>0 THEN REGION2
	--	END
	-- order by country, regiso2
	 
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Master_GetCountry]    Script Date: 07/13/2012 18:10:56 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Master_GetCountry]
AS
BEGIN
	--OLD METHOD START--
	--SELECT CountryId, CountryName, InternationalCode FROM TBL_Master_Country WHERE CountryId NOT IN (2,9,15,32,34,72,78,80,90,93,98,114,141,170,173,184,196,208,213,237,246)
	
	-----------------------------------
	--Disable in Existing Country List
	----------------------------------		
	--2	Aland Islands	AX
	--9	Anonymous Proxy	A1
	--15	Asia/Pacific Region	AP
	--32	Bouvet Island	BV
	--34	British Indian Ocean Territory	IO
	--72	Europe	EU
	--78	French Guiana	GF
	--80	French Southern Territories	TF
	--90	Guadeloupe	GP
	--93	Guernsey	GG
	--98	Heard Island and McDonald Islands	HM
	--114	Jersey	JE
	--141	Martinique	MQ
	--170	Other Country	O1
	--173	Palestinian Territory	PS
	--184	Reunion	RE
	--196	Satellite Provider	A2
	--208	South Georgia and the South Sandwich Islands	GS
	--213	Svalbard and Jan Mayen	SJ
	--237	United States Minor Outlying Islands	UM
	--246	Western Sahara	EH
	--OLD METHOD END--

	SELECT CountryId, CountryName, InternationalCode FROM TBL_GeoPostcodes_Country WHERE CountryCode IN
		(
			'AD','AF','AL','AM','AO','AR','AT','AU','BA','BD','BE','BG','BI','BJ','BM','BN','BO','BR','BT','BY','CA','CH','CI','CL','CM','CN','CO','CR','CU','CV','CY','CZ','DE','DK','DO','DZ','EC','EE','ES','ET','FI','FR','GB','GR','GT','HN','HR','HT','HU','ID','IE','IL','IN','IQ','IS','IT','JM','JP','KE','KG','KH','KR','KZ','LI','LK','LT','LU','LV','MA','MC','MD','ME','MG','MK','ML','MN','MT','MV','MX','MY','MZ','NG','NI','NL','NO','NP','NZ','PA','PE','PG','PH','PK','PL','PT','PY','RO','RS','RU','SE','SG','SI','SK','SM','SN','SV','SZ','TD','TH','TN','TR','TW','TZ','UA','UG','US','UY','UZ','VA','VE','VN','ZA'
			--SELECT DISTINCT Country from TBL_GeoPostcodes
		)
	ORDER BY CountryName
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Master_GetDepartment]    Script Date: 07/13/2012 18:10:56 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Master_GetDepartment]
AS
BEGIN
	SELECT DepartmentId, DepartmentName FROM TBL_Master_Department WHERE IsDeleted=0  ORDER BY DepartmentName 
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Master_GetDiagnosis]    Script Date: 07/13/2012 18:10:57 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Master_GetDiagnosis]
AS
BEGIN
	SELECT DiagnosisId, Diagnosis   FROM TBL_Master_Diagnosis WHERE IsDeleted = 0
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Master_GetFamilyHistory]    Script Date: 07/13/2012 18:10:57 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Master_GetFamilyHistory]
AS
BEGIN
	SELECT * from TBL_Master_FamilyHistory 
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Master_GetPastHistory]    Script Date: 07/13/2012 18:10:57 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Master_GetPastHistory]
AS
BEGIN
	SELECT PastHistoryId, PastHistoryName FROM TBL_Master_PastHistory
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Master_GetPersonalHistory]    Script Date: 07/13/2012 18:10:57 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Master_GetPersonalHistory]
AS
BEGIN
	SELECT PersonalHistoryId, PersonalHistoryName FROM TBL_Master_PersonalHistory 
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Master_GetPreferential]    Script Date: 07/13/2012 18:10:58 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Master_GetPreferential]
AS
SELECT * FROM TBL_Master_Preferential
GO

/****** Object:  StoredProcedure [dbo].[USP_Master_GetRelationship]    Script Date: 07/13/2012 18:10:58 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Master_GetRelationship]
(
@PatientId INT
)
AS
BEGIN

-- FRO RETRIVING THE RELATIONSHIP BASED ON PRIMARY HOLDER
--SELECT RelationshipId, Relationship FROM TBL_Master_Relationship ORDER BY Relationship (OLD ONE) 

DECLARE @Gender nvarchar(15)

	SELECT @Gender= CASE 
				WHEN Gender=0 THEN 'Husband'
				ELSE 'Wife'
				END 

	FROM TBL_Patient
	WHERE PatientId=@PatientId

	SELECT 
		RelationshipId, Relationship
	FROM	
		TBL_Master_Relationship 
	WHERE 
		Relationship NOT IN (@Gender) 
	ORDER BY
		 Relationship
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Master_GetState]    Script Date: 07/13/2012 18:10:59 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Master_GetState]
(
	@CountryId int
)
AS
BEGIN
	--SELECT StateId, StateName FROM TBL_Master_State WHERE CountryId=@CountryId ORDER BY StateName ASC
	DECLARE @CountryCode NVARCHAR(2)
	SELECT @CountryCode=CountryCode FROM TBL_GeoPostcodes_Country WHERE CountryId=@CountryId
	
	IF (@CountryCode = 'AL') or (@CountryCode = 'AZ') or (@CountryCode = 'BD')
		or (@CountryCode = 'BE') or (@CountryCode = 'BR')  or (@CountryCode = 'BG')
		or (@CountryCode = 'GB') or (@CountryCode = 'TH') or (@CountryCode = 'FR')
		or (@CountryCode = 'GR') or (@CountryCode = 'HU') or (@CountryCode = 'IE')
		or (@CountryCode = 'IT') or (@CountryCode = 'JP') or (@CountryCode = 'MK')
		or (@CountryCode = 'MV') or (@CountryCode = 'MT') or (@CountryCode = 'MN')
		or (@CountryCode = 'MA') or (@CountryCode = 'MZ') or (@CountryCode = 'NP')
		or (@CountryCode = 'PH') or (@CountryCode = 'PT') or (@CountryCode = 'RO')
		or (@CountryCode = 'RU') or (@CountryCode = 'RS') or (@CountryCode = 'SI')
		or (@CountryCode = 'ES') or (@CountryCode = 'LK') or (@CountryCode = 'TR')
		or (@CountryCode = 'VE') or (@CountryCode = 'VN')  or (@CountryCode = 'CV')
		or (@CountryCode = 'NO') or (@CountryCode = 'DK') or (@CountryCode = 'DO')
		SELECT CityId, CityName
		FROM
			TBL_GeoPostcodes_City
		WHERE
			CountryCode=@CountryCode AND CityName IS NOT NULL ORDER BY CityName
	ELSE 
		SELECT StateId, StateName FROM TBL_GeoPostcodes_State WHERE CountryCode=(SELECT CountryCode FROM TBL_GeoPostcodes_Country WHERE CountryId=@CountryId) ORDER BY StateName

END

GO

/****** Object:  StoredProcedure [dbo].[USP_Master_GetStatus]    Script Date: 07/13/2012 18:10:59 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Master_GetStatus]
AS
BEGIN
	SELECT StatusId, StatusName FROM TBL_Master_Status WHERE StatusId IN (1,2,4,5) ORDER BY StatusName
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Master_GetSymptom]    Script Date: 07/13/2012 18:10:59 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Master_GetSymptom]
AS
BEGIN
	SELECT SymptomId, Symptom   FROM TBL_Master_Symptom WHERE IsDeleted=0
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Master_GetUniversity]    Script Date: 07/13/2012 18:10:59 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Master_GetUniversity] 
AS
BEGIN
	SELECT UniversityId,UniversityName FROM TBL_Master_University ORDER BY UniversityName ASC  
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Organization_GetActivationById]    Script Date: 07/13/2012 18:10:59 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

create PROC [dbo].[USP_Organization_GetActivationById] 
(
	@OrganizationId int	
)
AS
BEGIN
	SELECT IsActivated FROM TBL_Organization WHERE OrganizationId=@OrganizationId
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Organization_GetAddressByDoctorTimingId]    Script Date: 07/13/2012 18:10:59 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Organization_GetAddressByDoctorTimingId]
(
	@DoctorTimingId INT
)
AS
SELECT 
	OrganizationId,
	OrganizationName,
	Address,
	CityId,
	(SELECT CityName FROM TBL_GeoPostcodes_City WHERE CityId=TBL_Organization.CityId) [CityName],
	StateId,
	(SELECT StateName FROM TBL_GeoPostcodes_State WHERE StateId=TBL_Organization.StateId) [StateName],
	CountryId,
	(SELECT CountryName FROM TBL_GeoPostcodes_Country WHERE CountryId=TBL_Organization.CountryId) [CountryName],
	PostalCode
FROM
	TBL_Organization
WHERE OrganizationId IN (
	SELECT OrganizationId FROM TBL_Doctor WHERE DoctorId IN (
		SELECT DoctorId FROM TBL_Doctor_Timing WHERE DoctorTimingId=481
		)
	)
GO

/****** Object:  StoredProcedure [dbo].[USP_Organization_GetAllDoctorServiceById]    Script Date: 07/13/2012 18:10:59 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Organization_GetAllDoctorServiceById]  
(
@OrganizationId INT
)
AS
BEGIN

--FOR GETTING DOCTORSLIST FOR PARTICULAR ORGANIZATION

CREATE TABLE #DoctorService
	(
		Id INT IDENTITY (1,1), 
		DoctorServiceId INT,
		DoctorServiceName VARCHAR(max),
		Type INT
	);
	

INSERT INTO #DoctorService
SELECT 
	 d.DoctorId,
	 CASE ISNULL(d.Degrees, '')
				WHEN '' THEN 'Dr. ' + d.DoctorName +' ('+(SELECT DepartmentName FROM TBL_Master_Department WHERE DepartmentId=d.DepartmentId)+')'
				--ELSE 'Dr. ' + d.DoctorName + ', ' + ISNULL(d.Degrees, '') +' ('+(SELECT DepartmentName FROM TBL_Master_Department WHERE DepartmentId=d.DepartmentId)+')'
				ELSE 'Dr. ' + d.DoctorName + ' ('+(SELECT DepartmentName FROM TBL_Master_Department WHERE DepartmentId=d.DepartmentId)+')'
				END,
	0 [Type]
FROM 
	TBL_Doctor d
WHERE 
	d.OrganizationId=@OrganizationId AND d.IsDeleted=0 AND d.IsActivated=1 
	--(SELECT COUNT(dt.DoctorId) FROM TBL_Doctor_Timing dt WHERE dt.DoctorId=d.DoctorId AND dt.IsDeleted=0 AND dt.AppointmentType IN (0,2)) > 0 --ONLY FOR DIRECT APPOINTMENT TYPE(0-DIRECT, 2-BOTH)
	

INSERT INTO #DoctorService
SELECT 
	 s.ServiceId, s.ServiceName+' ('+(SELECT DepartmentName FROM TBL_Master_Department WHERE DepartmentId=s.DepartmentId)+')', 1 [Type]
FROM 
	 TBL_Service s 
WHERE 
	s.OrganizationId=@OrganizationId AND s.IsDeleted=0 AND s.IsActivated=1 
	--(SELECT COUNT(st.ServiceId) FROM TBL_Service_Timing st WHERE st.ServiceId=s.ServiceId AND st.IsDeleted=0 AND st.AppointmentType IN (0,2)) > 0 --ONLY FOR DIRECT APPOINTMENT TYPE(0-DIRECT, 2-BOTH)
	
SELECT * FROM #DoctorService ORDER BY DoctorServiceName ASC

END
GO

/****** Object:  StoredProcedure [dbo].[USP_Organization_GetAppointmentByOrganizationId]    Script Date: 07/13/2012 18:11:00 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Organization_GetAppointmentByOrganizationId] 
(
	@OrganizationId int
)
AS
BEGIN
	SELECT COUNT(AppointmentId) FROM TBL_Appointment WHERE OrganizationId=@OrganizationId AND IsDeleted=0 AND StatusId<>5 AND AppointmentDate >= GETDATE()
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Organization_GetBranding]    Script Date: 07/13/2012 18:11:00 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Organization_GetBranding]
(
	@OrganizationId INT
)
AS
BEGIN

SELECT OrganizationId, SubDomain, CNameUrl FROM TBL_Organization WHERE OrganizationId=@OrganizationId
	
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Organization_GetDepartmentsByOrganizationId]    Script Date: 07/13/2012 18:11:00 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Organization_GetDepartmentsByOrganizationId] 
(
@OrganizationId INT
)
AS
BEGIN

--FOR GETTING DOCTORSLIST FOR PARTICULAR ORGANIZATION

DECLARE @COUNT INT

CREATE TABLE #DoctorServiceDepartment
	(
		DepartmentId INT,
		DepartmentName VARCHAR(max)
	);
	

INSERT INTO #DoctorServiceDepartment
SELECT 
	 DISTINCT D.DepartmentId, MD.DepartmentName
FROM 
	TBL_Doctor D, dbo.TBL_Master_Department MD, TBL_Doctor_Timing DT  
WHERE 
	D.OrganizationId=@OrganizationId AND 
	D.IsActivated=1 AND D.IsDeleted=0 AND
	(SELECT COUNT(OrganizationId) FROM TBL_Organization WHERE OrganizationId=@OrganizationId AND IsActivated = 1) > 0 AND
	MD.DepartmentId=D.DepartmentId AND DT.DoctorId=D.DoctorId AND DT.IsDeleted=0 AND DT.AppointmentType IN (1,2)
	

--INSERT INTO #DoctorServiceDepartment
--SELECT 
--	 DISTINCT S.DepartmentId, MD.DepartmentName
--FROM 
--	 dbo.TBL_Master_Department MD, TBL_Service S, TBL_Service_Timing ST
--WHERE 
--	S.OrganizationId=@OrganizationId AND 
--	S.IsActivated=1 AND S.IsDeleted=0 AND
--	MD.DepartmentId=S.DepartmentId  AND ST.ServiceId = S.ServiceId AND ST.IsDeleted=0
	
SET @COUNT=(SELECT 
	 DISTINCT COUNT(S.DepartmentId)
	FROM 
	 dbo.TBL_Master_Department MD, TBL_Service S, TBL_Service_Timing ST
WHERE 
	S.OrganizationId=@OrganizationId AND 
	S.IsActivated=1 AND S.IsDeleted=0 AND
	(SELECT COUNT(OrganizationId) FROM TBL_Organization WHERE OrganizationId=@OrganizationId AND IsActivated = 1) > 0 AND
	MD.DepartmentId=S.DepartmentId  AND ST.ServiceId = S.ServiceId AND ST.IsDeleted=0 AND ST.AppointmentType IN (1,2))
	
IF @COUNT > 0
	INSERT INTO #DoctorServiceDepartment VALUES (0, 'Services Provided')
	
SELECT DISTINCT * FROM #DoctorServiceDepartment ORDER BY DepartmentName ASC
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Organization_GetDoctorCountByOrganizationId]    Script Date: 07/13/2012 18:11:00 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Organization_GetDoctorCountByOrganizationId]
(
@OrganizationId INT
)
AS
BEGIN
	SELECT COUNT(DoctorId) FROM TBL_Doctor WHERE OrganizationId=@OrganizationId AND IsDeleted=0
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Organization_GetDoctorServiceByExceptLonginId]    Script Date: 07/13/2012 18:11:00 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Organization_GetDoctorServiceByExceptLonginId] 
(
@OrganizationId INT,
@LoginId INT
)
AS
BEGIN

--FOR GETTING DOCTORSLIST FOR PARTICULAR ORGANIZATION

CREATE TABLE #DoctorService
	(
		Id INT IDENTITY (1,1),
		DoctorServiceId INT,
		DoctorServiceName VARCHAR(max),
		Type INT
	);

INSERT INTO #DoctorService
SELECT 
	 d.DoctorId, 
	 CASE ISNULL(d.Degrees, '')
				WHEN '' THEN 'Dr. ' + d.DoctorName +' ('+(SELECT DepartmentName FROM TBL_Master_Department WHERE DepartmentId=d.DepartmentId)+')'
				ELSE 'Dr. ' + d.DoctorName + ', ' + ISNULL(d.Degrees, '') +' ('+(SELECT DepartmentName FROM TBL_Master_Department WHERE DepartmentId=d.DepartmentId)+')'
				END,
	 0 [Type]
FROM 
	TBL_Doctor d
WHERE 
	d.OrganizationId=@OrganizationId AND d.IsDeleted=0 AND d.IsActivated=1 AND d.LoginId <> @LoginId AND
	(SELECT COUNT(dt.DoctorId) FROM TBL_Doctor_Timing dt WHERE dt.DoctorId=d.DoctorId AND dt.IsDeleted=0) > 0
	

INSERT INTO #DoctorService
SELECT 
	 s.ServiceId, s.ServiceName+' ('+(SELECT DepartmentName FROM TBL_Master_Department WHERE DepartmentId=s.DepartmentId)+')', 1 [Type]
FROM 
	 TBL_Service s 
WHERE 
	s.OrganizationId=@OrganizationId AND s.IsDeleted=0 AND s.IsActivated=1 AND s.LoginId <> @LoginId AND
	(SELECT COUNT(st.ServiceId) FROM TBL_Service_Timing st WHERE st.ServiceId=s.ServiceId AND st.IsDeleted=0) > 0
	
SELECT * FROM #DoctorService ORDER BY DoctorServiceName ASC

END
GO

/****** Object:  StoredProcedure [dbo].[USP_Organization_GetDoctorServiceById]    Script Date: 07/13/2012 18:11:00 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Organization_GetDoctorServiceById]  
(
@OrganizationId INT
)
AS
BEGIN

--FOR GETTING DOCTORSLIST FOR PARTICULAR ORGANIZATION

CREATE TABLE #DoctorService
	(
		Id INT IDENTITY (1,1),
		DoctorServiceId INT,
		DoctorServiceName VARCHAR(max),
		Type INT
	);
	

INSERT INTO #DoctorService
SELECT 
	 d.DoctorId,
	 CASE ISNULL(d.Degrees, '')
				WHEN '' THEN 'Dr. ' + d.DoctorName +' ('+(SELECT DepartmentName FROM TBL_Master_Department WHERE DepartmentId=d.DepartmentId)+')'
				--ELSE 'Dr. ' + d.DoctorName + ', ' + ISNULL(d.Degrees, '') +' ('+(SELECT DepartmentName FROM TBL_Master_Department WHERE DepartmentId=d.DepartmentId)+')'
				ELSE 'Dr. ' + d.DoctorName + ' ('+(SELECT DepartmentName FROM TBL_Master_Department WHERE DepartmentId=d.DepartmentId)+')'
				END,
	0 [Type]
FROM 
	TBL_Doctor d
WHERE 
	d.OrganizationId=@OrganizationId AND d.IsDeleted=0 AND d.IsActivated=1 AND
	(SELECT COUNT(dt.DoctorId) FROM TBL_Doctor_Timing dt WHERE dt.DoctorId=d.DoctorId AND dt.IsDeleted=0 AND dt.AppointmentType IN (0,2)) > 0 --ONLY FOR DIRECT APPOINTMENT TYPE(0-DIRECT, 2-BOTH)
	

INSERT INTO #DoctorService
SELECT 
	 s.ServiceId, s.ServiceName+' ('+(SELECT DepartmentName FROM TBL_Master_Department WHERE DepartmentId=s.DepartmentId)+')', 1 [Type]
FROM 
	 TBL_Service s 
WHERE 
	s.OrganizationId=@OrganizationId AND s.IsDeleted=0 AND s.IsActivated=1 AND
	(SELECT COUNT(st.ServiceId) FROM TBL_Service_Timing st WHERE st.ServiceId=s.ServiceId AND st.IsDeleted=0 AND st.AppointmentType IN (0,2)) > 0 --ONLY FOR DIRECT APPOINTMENT TYPE(0-DIRECT, 2-BOTH)
	
SELECT * FROM #DoctorService ORDER BY DoctorServiceName ASC

END
GO

/****** Object:  StoredProcedure [dbo].[USP_Organization_GetDoctorServiceByOrganizationId]    Script Date: 07/13/2012 18:11:00 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Organization_GetDoctorServiceByOrganizationId]
(
@OrganizationId INT,
@DepartmentId INT
)
AS
BEGIN

--FOR GETTING DOCTORSLIST FOR PARTICULAR ORGANIZATION

CREATE TABLE #DoctorService
	(
		DoctorServiceId INT,
		DoctorServiceName VARCHAR(max),
		SubDomain NVARCHAR(250),
		Type INT
	);
IF @DepartmentId = 0
	
	INSERT INTO #DoctorService
	SELECT 
		 S.ServiceId, S.ServiceName, NULL, 1 [Type]
	FROM 
		 TBL_Service S
	WHERE 
		S.IsDeleted=0 AND
		S.OrganizationId=@OrganizationId AND 
		(SELECT COUNT(OrganizationId) FROM TBL_Organization WHERE OrganizationId=S.OrganizationId AND IsActivated = 1) > 0 AND
		--S.DepartmentId=@DepartmentId AND
		(SELECT COUNT(ServiceId) FROM TBL_Service_Timing WHERE ServiceId=S.ServiceId AND IsDeleted=0 AND AppointmentType IN (1,2)) > 0 
	
ELSE
	
	INSERT INTO #DoctorService
	SELECT 
		D.DoctorId,
		CASE ISNULL(D.Degrees, '')
					WHEN '' THEN 'Dr. ' + D.DoctorName +' ('+(SELECT DepartmentName FROM TBL_Master_Department WHERE DepartmentId=D.DepartmentId)+')'
					ELSE 'Dr. ' + D.DoctorName + ', ' + ISNULL(D.Degrees, '') 
					END,
		D.PreferredName,				
		0 [Type]
		
	FROM 
		TBL_Doctor D
	WHERE
		D.IsDeleted=0 AND
		D.OrganizationId=@OrganizationId AND 
		(SELECT COUNT(OrganizationId) FROM TBL_Organization WHERE OrganizationId=D.OrganizationId AND IsActivated = 1) > 0 AND
		D.DepartmentId=@DepartmentId AND
		(SELECT COUNT(DoctorId) FROM TBL_Doctor_Timing WHERE DoctorId=D.DoctorId AND IsDeleted=0 AND AppointmentType IN (1,2)) > 0 

SELECT * FROM #DoctorService ORDER BY DoctorServiceName ASC

END
GO

/****** Object:  StoredProcedure [dbo].[USP_Organization_GetDoctorServiceCountByOrganizationId]    Script Date: 07/13/2012 18:11:00 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Organization_GetDoctorServiceCountByOrganizationId]
(
@OrganizationId INT
)
AS
BEGIN

CREATE TABLE #DoctorService
	(
		Id INT IDENTITY (1,1),
		DoctorServiceId INT,
		DoctorServiceName VARCHAR(max),
		Type INT
	);	

INSERT INTO #DoctorService
SELECT 
	 d.DoctorId,
	 D.DoctorName,
	 0 [Type]
FROM 
	TBL_Doctor d
WHERE 
	d.OrganizationId=@OrganizationId AND d.IsDeleted=0 AND d.IsActivated=1 
	

INSERT INTO #DoctorService
SELECT 
	 s.ServiceId, s.ServiceName, 1 [Type]
FROM 
	 TBL_Service s 
WHERE 
	s.OrganizationId=@OrganizationId AND s.IsDeleted=0 AND s.IsActivated=1 
	
SELECT COUNT(Id) FROM #DoctorService 

END
GO

/****** Object:  StoredProcedure [dbo].[USP_Organization_GetDoctorServiceSessionByOrganizationId]    Script Date: 07/13/2012 18:11:01 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Organization_GetDoctorServiceSessionByOrganizationId] 
(
@DoctorServiceId INT,
@Type INT
)
AS
BEGIN

--FOR GETTING DOCTORSLIST FOR PARTICULAR ORGANIZATION

CREATE TABLE #DoctorServiceSession
	(
		TimingId INT,
		Address NVARCHAR(1000),
		StartTime NVARCHAR(15),
		EndTime NVARCHAR(15)		
	);
	
IF @Type = 0
BEGIN

INSERT INTO #DoctorServiceSession
SELECT 
	DoctorTimingId, Address, StartTime, EndTime
FROM 
	TBL_Doctor_Timing  
WHERE
	DoctorId=@DoctorServiceId
END

ELSE
BEGIN

INSERT INTO #DoctorServiceSession
SELECT 
	 ServiceTimingId, Address, StartTime, EndTime
FROM 
	 TBL_Service_Timing  
WHERE	
	ServiceId=@DoctorServiceId 
END
	
SELECT * FROM #DoctorServiceSession ORDER BY Address ASC

END
GO

/****** Object:  StoredProcedure [dbo].[USP_Organization_GetOrganization]    Script Date: 07/13/2012 18:11:01 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Organization_GetOrganization] 
(
	@SignInId nvarchar(250)
)
AS
BEGIN
	SELECT L.*, O.* FROM
		TBL_Login L,
		TBL_Organization O
	WHERE
		L.IsDeleted=0 AND
		(L.EmailId=@SignInId OR L.MedAppId=@SignInId OR L.MobileId=@SignInId) AND
		O.LoginId=L.LoginId
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Organization_GetOrganizationByDoctorId]    Script Date: 07/13/2012 18:11:01 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Organization_GetOrganizationByDoctorId]
(
	@DoctorId INT
)
AS
BEGIN
	SELECT
		L.*,
		O.*,
		D.*,
		CASE ISNULL(D.Degrees, '')
			   WHEN '' THEN 'Dr. ' + D.DoctorName
			   ELSE 'Dr. ' + D.DoctorName + ', ' + ISNULL(D.Degrees, '')
			   END   [DoctorNameWithDegree],
		(SELECT CityName FROM TBL_GeoPostcodes_City WHERE CityId=O.CityId) [CityName],
		(SELECT StateName FROM TBL_GeoPostcodes_State WHERE StateId=O.StateId) [StateName],
		(SELECT CountryName FROM TBL_GeoPostcodes_Country WHERE CountryId=O.CountryId) [CountryName]
	FROM
		TBL_Organization O,
		TBL_Doctor D,
		TBL_Login L
	WHERE
		D.DoctorId=@DoctorId AND
		O.OrganizationId=D.OrganizationId AND
		L.LoginId=O.LoginId
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Organization_GetOrganizationById]    Script Date: 07/13/2012 18:11:01 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Organization_GetOrganizationById] 
(
	@OrganizationId int	
)
AS
BEGIN
	SELECT O.*, L.*,
			(SELECT CityName FROM TBL_GeoPostcodes_City WHERE CityId=O.CityId) [CityName],
		(SELECT StateName FROM TBL_GeoPostcodes_State WHERE StateId=O.StateId) [StateName],
		(SELECT CountryName FROM TBL_GeoPostcodes_Country WHERE CountryId=O.CountryId) [CountryName]
	 FROM
		TBL_Login L,
		TBL_Organization O
	WHERE
		O.OrganizationId=@OrganizationId AND
		O.LoginId=L.LoginId AND
		L.IsDeleted=0
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Organization_GetOrganizationByServiceId]    Script Date: 07/13/2012 18:11:01 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Organization_GetOrganizationByServiceId]
(
	@ServiceId INT
)
AS
BEGIN
	SELECT
		L.*,
		O.*,
		S.*,
		(SELECT CityName FROM TBL_GeoPostcodes_City WHERE CityId=O.CityId) [CityName],
		(SELECT StateName FROM TBL_GeoPostcodes_State WHERE StateId=O.StateId) [StateName],
		(SELECT CountryName FROM TBL_GeoPostcodes_Country WHERE CountryId=O.CountryId) [CountryName]
	FROM
		TBL_Organization O,
		TBL_Service S,
		TBL_Login L
	WHERE
		S.ServiceId=@ServiceId AND
		O.OrganizationId=S.OrganizationId AND
		L.LoginId=O.LoginId
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Organization_GetOrganizationBySubDomain]    Script Date: 07/13/2012 18:11:01 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Organization_GetOrganizationBySubDomain]
(
	@SubDomain NVARCHAR(max)
)
AS
BEGIN
	SELECT TOP 1 OrganizationId FROM TBL_Organization WHERE SubDomain=@SubDomain	
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Organization_GetOrganizationNamebyAccountId]    Script Date: 07/13/2012 18:11:01 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Organization_GetOrganizationNamebyAccountId]  
(
	@SignInId nvarchar(250),
	@AccountId INT	
)
AS
BEGIN
	SELECT L.*, O.* FROM
		TBL_Login L,
		TBL_Organization O
	WHERE
		L.IsDeleted=0 AND
		(L.EmailId=@SignInId OR L.MedAppId=@SignInId OR L.MobileId=@SignInId) AND
		O.LoginId=L.LoginId	AND
		O.OrganizationId=@AccountId
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Organization_GetOrganizationNameById]    Script Date: 07/13/2012 18:11:02 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Organization_GetOrganizationNameById] 
(
	@OrganizationId INT
)
AS
BEGIN
	SELECT
		O.OrganizationName + ' - ' + O.BranchName +  CASE ISNULL(O.CityId, '' )
														  WHEN '' THEN (SELECT ' (' + StateName  + ')' FROM TBL_GeoPostcodes_State WHERE StateId=O.StateId)
														  ELSE (SELECT ' (' + CityName + ')' FROM TBL_GeoPostcodes_City WHERE CityId=O.CityId)
														  END
	FROM
		TBL_Organization O
	WHERE
		O.OrganizationId=@OrganizationId
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Organization_GetOrganizationsByDoctorServiceId]    Script Date: 07/13/2012 18:11:02 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Organization_GetOrganizationsByDoctorServiceId]
(
	@Id INT,
	@Type INT
)
AS
BEGIN
	IF @Type = 0
		SELECT O.OrganizationId, OrganizationName = CASE
				WHEN LOWER(O.BranchName)='main branch' THEN O.OrganizationName + CASE ISNULL(O.CityId, '' )
																				WHEN ''THEN (SELECT' (' +  StateName + ')' FROM TBL_GeoPostcodes_State WHERE StateId=O.StateId) 
																				ELSE
																				(SELECT' (' +  CityName + ')' FROM TBL_GeoPostcodes_City WHERE CityId=O.CityId) 
																				END
				WHEN LOWER(O.BranchName)!='main branch' THEN O.OrganizationName + ' - ' + O.BranchName + CASE ISNULL(O.CityId, '' )
																										 WHEN ''THEN (SELECT' (' +  StateName + ')' FROM TBL_GeoPostcodes_State WHERE StateId=O.StateId) 
																										 ELSE
																										 (SELECT' (' +  CityName + ')' FROM TBL_GeoPostcodes_City WHERE CityId=O.CityId) 
																										 END
			  END
			 FROM TBL_Organization O WHERE O.OrganizationId IN (
			SELECT OrganizationId FROM TBL_Doctor D, TBL_Doctor_Timing DT WHERE LoginId IN (SELECT LoginId FROM TBL_Doctor WHERE DoctorId=@Id) AND DT.DoctorId=D.DoctorId AND DT.IsDeleted=0 AND D.IsDeleted=0 AND D.IsActivated=1 AND DT.AppointmentType IN (1,2) --only for web appointment type(1-web, 2-both)
		)
	ELSE
		SELECT O.OrganizationId, OrganizationName = CASE
				WHEN LOWER(O.BranchName)='main branch' THEN O.OrganizationName + CASE ISNULL(O.CityId, '' )
																				WHEN ''THEN (SELECT' (' +  StateName + ')' FROM TBL_GeoPostcodes_State WHERE StateId=O.StateId) 
																				ELSE
																				(SELECT' (' +  CityName + ')' FROM TBL_GeoPostcodes_City WHERE CityId=O.CityId) 
																				END
				WHEN LOWER(O.BranchName)!='main branch' THEN O.OrganizationName + ' - ' + O.BranchName + CASE ISNULL(O.CityId, '' )
																										WHEN ''THEN (SELECT' (' +  StateName + ')' FROM TBL_GeoPostcodes_State WHERE StateId=O.StateId) 
																										ELSE
																										(SELECT' (' +  CityName + ')' FROM TBL_GeoPostcodes_City WHERE CityId=O.CityId) 
																										END
			  END FROM TBL_Organization O WHERE O.OrganizationId IN (
			SELECT OrganizationId FROM TBL_Service S, TBL_Service_Timing ST WHERE LoginId IN (SELECT LoginId FROM TBL_Service WHERE ServiceId=@Id) AND S.ServiceName=(SELECT ServiceName FROM TBL_Service WHERE ServiceId=@Id) AND ST.ServiceId=S.ServiceId AND ST.IsDeleted=0 AND S.IsDeleted=0 AND ST.AppointmentType IN (1,2) AND S.DepartmentId=(SELECT DepartmentId FROM TBL_Service WHERE ServiceId=@Id) AND S.IsActivated=1 --only for web appointment type(1-web, 2-both)
		)
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Organization_GetScheduleCountByOrganizationId]    Script Date: 07/13/2012 18:11:02 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Organization_GetScheduleCountByOrganizationId] 
(
@OrganizationId INT
)
AS
BEGIN
CREATE TABLE #DoctorService
	(
		DoctorServiceTimingId INT
	);

INSERT INTO #DoctorService
SELECT 
	DT.DoctorTimingId
	
FROM 
	TBL_Doctor D,
	TBL_Doctor_Timing DT
WHERE
	D.IsDeleted=0 AND
	D.OrganizationId=@OrganizationId AND 
	D.DoctorId =(SELECT D.DoctorId WHERE D.OrganizationId = @OrganizationId) AND
	D.DoctorId=DT.DoctorId AND 
	DT.IsDeleted=0


INSERT INTO #DoctorService
SELECT 
	ServiceTimingId
FROM
	TBL_Service S,
	TBL_Service_Timing ST
WHERE 
	S.IsDeleted=0 AND
	S.OrganizationId=@OrganizationId AND
	S.ServiceId = (SELECT S.ServiceId WHERE S.OrganizationId = @OrganizationId) AND
	S.ServiceId = ST.ServiceId AND
	ST.IsDeleted=0
SELECT COUNT(DoctorServiceTimingId) FROM #DoctorService
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Organization_GetScheduleDoctorServiceByOrganizationId]    Script Date: 07/13/2012 18:11:02 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Organization_GetScheduleDoctorServiceByOrganizationId] 
(
	@OrganizationId INT,
	@DoctorId INT
)
AS
BEGIN

DECLARE @NewDoctorId INT

SELECT @NewDoctorId = DoctorId FROM TBL_Doctor WHERE LoginId IN
													 (SELECT LoginId FROM TBL_Doctor WHERE DoctorId=@DoctorId) AND 
													 OrganizationId=@OrganizationId AND 
													 IsDeleted=0 AND IsActivated=1

--FOR GETTING DOCTORSLIST FOR PARTICULAR ORGANIZATION

CREATE TABLE #DoctorService
	(
		DoctorServiceId INT,
		DoctorServiceName VARCHAR(MAX),
		Type INT,
		DoctorServiceTimingId INT,
		DoctorServiceTimingName VARCHAR(MAX)
	);

INSERT INTO #DoctorService
SELECT 
	D.DoctorId,
	'Dr. ' + D.DoctorName + ', ' + D.Degrees,
	0 [Type],
	DT.DoctorTimingId,
	DT.StartTime + ' - ' + DT.EndTime [Schedule]
FROM 
	TBL_Doctor D,
	TBL_Doctor_Timing DT
WHERE
	D.IsDeleted=0 AND
	D.OrganizationId=@OrganizationId AND 
	D.DoctorId =@NewDoctorId AND
	D.DoctorId=DT.DoctorId AND
	(SELECT COUNT(DoctorId) FROM TBL_Doctor_Timing WHERE DoctorId=D.DoctorId AND IsDeleted=0) > 0 AND DT.IsDeleted=0

--INSERT INTO #DoctorService
--SELECT 
--	 S.ServiceId,
--	 S.ServiceName,
--	 1 [Type],
--	 ST.ServiceTimingId,
--	 ST.StartTime + ' - ' + ST.EndTime [Schedule]
--FROM 
--	 TBL_Service S,
--	 TBL_Service_Timing ST
--WHERE 
--	S.IsDeleted=0 AND
--	S.OrganizationId=@OrganizationId AND 
--	S.ServiceId=@ServiceId AND
--	S.ServiceId=ST.ServiceId AND
--	(SELECT COUNT(ServiceId) FROM TBL_Service_Timing WHERE ServiceId=S.ServiceId AND IsDeleted=0) > 0 

SELECT * FROM #DoctorService ORDER BY DoctorServiceName ASC

END
GO

/****** Object:  StoredProcedure [dbo].[USP_Organization_GetServiceCountByOrganizationId]    Script Date: 07/13/2012 18:11:02 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Organization_GetServiceCountByOrganizationId]
(
@OrganizationId INT
)
AS
BEGIN
	SELECT COUNT(ServiceId) FROM TBL_Service WHERE OrganizationId=@OrganizationId AND IsDeleted=0
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Organization_GetTimeZoneByDoctorserviceTimingId]    Script Date: 07/13/2012 18:11:02 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Organization_GetTimeZoneByDoctorserviceTimingId]
(
	@DoctorserviceTimingId INT,
	@Type INT
)
AS
BEGIN
	IF @Type = 0
		SELECT O.TimeZone FROM TBL_Organization O
		WHERE O.OrganizationId IN (SELECT OrganizationId FROM TBL_Doctor WHERE 
		DoctorId IN( SELECT DoctorId FROM TBL_Doctor_Timing WHERE DoctorTimingId=@DoctorserviceTimingId)) 
	ELSE
		SELECT O.TimeZone FROM TBL_Organization O
		WHERE O.OrganizationId IN (SELECT OrganizationId FROM TBL_Service WHERE 
		ServiceId IN( SELECT ServiceId FROM TBL_Service_Timing WHERE ServiceTimingId=@DoctorserviceTimingId) )
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Organization_GetTimeZoneById]    Script Date: 07/13/2012 18:11:02 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Organization_GetTimeZoneById] 
(
	@DoctorServiceId INT,
	@Type INT
)
AS
BEGIN
	IF @Type = 0
		SELECT TimeZone FROM TBL_Organization WHERE OrganizationId=(SELECT OrganizationId FROM TBL_Doctor WHERE DoctorId=@DoctorServiceId)
	ELSE
		SELECT TimeZone FROM TBL_Organization WHERE OrganizationId=(SELECT OrganizationId FROM TBL_Service WHERE ServiceId=@DoctorServiceId)
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Organization_GetTimeZoneByOrganizationId]    Script Date: 07/13/2012 18:11:03 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Organization_GetTimeZoneByOrganizationId] 
(
	@OrganizationId INT
)
AS
BEGIN
	SELECT TimeZone FROM TBL_Organization WHERE OrganizationId=@OrganizationId
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Organization_InsertBranding]    Script Date: 07/13/2012 18:11:03 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Organization_InsertBranding]
(
	@OrganizationId INT,
	@SubDomain NVARCHAR(50),
	@CNameUrl NVARCHAR(50)
)
AS
BEGIN

UPDATE 
	TBL_Organization
SET 
	SubDomain=@SubDomain,
	CNameUrl=@CNameUrl
WHERE 
	OrganizationId=@OrganizationId
	
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Organization_InsertOrganization]    Script Date: 07/13/2012 18:11:03 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Organization_InsertOrganization]
(
	@OrganizationId INT,
	@LoginId INT,
	@OrganizationName NVARCHAR(1000),
	@CountryId INT,
	@StateId INT,
	@CityId INT,
	@BranchName NVARCHAR(250),
	@Address NVARCHAR(1000),
	@AddressLine1 NVARCHAR(500),
	@AddressLine2 NVARCHAR(500),
	@PostalCode NVARCHAR(50),
	@Phone NVARCHAR(50),
	@Mobile NVARCHAR(50),
	@TimeZone NVARCHAR(1000),
	@InCharge NVARCHAR(250),
	@IsExternalReference BIT,
	@MaxAppointmentDays INT,
	@IsApprovalSystem BIT,
	@IsCarParkFacility BIT,
	@IsConditionsPage BIT,
	@SubDomain NVARCHAR(250),
	@CNameUrl NVARCHAR(1000),
	@WelcomeTitle NVARCHAR(1000),
	@AboutOrganization NVARCHAR(3000),
	@ReferedBy NVARCHAR(50),
	@ReferenceToken NVARCHAR(10)
)
AS
BEGIN
	DECLARE @NewOrganizationId INT
	
	IF @OrganizationId = 0
	BEGIN
		INSERT INTO TBL_Organization
		(LoginId, OrganizationName, CountryId, StateId, CityId, BranchName, Address, AddressLine1, AddressLine2, PostalCode, Phone, Mobile, TimeZone, InCharge, IsExternalReference, MaxAppointmentDays, IsApprovalSystem, IsCarParkFacility, IsConditionsPage, SubDomain, CNameUrl, WelcomeTitle, AboutOrganization, ReferedBy, ReferenceToken, CreatedOn, IsActivated, IsDeleted) VALUES
		(@LoginId, @OrganizationName, @CountryId, @StateId, @CityId, @BranchName, @Address, @AddressLine1, @AddressLine2, @PostalCode, @Phone, @Mobile, @TimeZone, @InCharge, @IsExternalReference, @MaxAppointmentDays, @IsApprovalSystem, @IsCarParkFacility, @IsConditionsPage, @SubDomain, @CNameUrl, @WelcomeTitle, @AboutOrganization, @ReferedBy, @ReferenceToken, GETDATE(), 0, 0)

		SET @NewOrganizationId = @@IDENTITY
		
		SELECT @NewOrganizationId
	END
	ELSE
	BEGIN
		UPDATE TBL_Organization SET
			OrganizationName=@OrganizationName,
			CountryId=@CountryId,
			StateId=@StateId,
			CityId=@CityId,
			BranchName=@BranchName,
			Address=@Address,
			AddressLine1=@AddressLine1,
			AddressLine2=@AddressLine2,
			PostalCode=@PostalCode,
			Phone=@Phone,
			Mobile=@Mobile,
			TimeZone=@TimeZone,
			InCharge=@InCharge,
			IsExternalReference=@IsExternalReference,
			MaxAppointmentDays=0,
			IsApprovalSystem=0,
			IsCarParkFacility=@IsCarParkFacility,
			IsConditionsPage=@IsConditionsPage,
			SubDomain=@SubDomain,
			CNameUrl=@CNameUrl,
			WelcomeTitle=@WelcomeTitle,
			AboutOrganization=@AboutOrganization,
			ReferedBy=@ReferedBy,
			ModifiedOn=GETDATE()
		WHERE
			OrganizationId=@OrganizationId
			
		SELECT @OrganizationId
		
		UPDATE TBL_Doctor_Timing SET IsCarParkFacility=@IsCarParkFacility WHERE DoctorId IN (SELECT DoctorId FROM TBL_Doctor WHERE OrganizationId=@OrganizationId AND IsDeleted=0) AND IsDefaultAddress=1 AND IsDeleted=0

		UPDATE TBL_Service_Timing SET IsCarParkFacility=@IsCarParkFacility WHERE ServiceId IN (SELECT ServiceId FROM TBL_Service WHERE OrganizationId=@OrganizationId AND IsDeleted=0) AND IsDefaultAddress=1 AND IsDeleted=0
	END	
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Organization_ValidateOrganization]    Script Date: 07/13/2012 18:11:03 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Organization_ValidateOrganization]
(
	@OrganizationId INT,
	@OrganizationName NVARCHAR(1000),
	@CityId INT,
	@BranchName NVARCHAR(250),
	@statecityType INT
)
AS
BEGIN
	IF @statecityType=0
	SELECT COUNT(OrganizationId) FROM TBL_Organization WHERE OrganizationId<>@OrganizationId AND OrganizationName=@OrganizationName AND CityId=@CityId AND BranchName=@BranchName AND IsDeleted=0 
	ELSE
	SELECT COUNT(OrganizationId) FROM TBL_Organization WHERE OrganizationId<>@OrganizationId AND OrganizationName=@OrganizationName AND StateId=@CityId AND BranchName=@BranchName AND IsDeleted=0 
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Organization_ValidateSubDomain]    Script Date: 07/13/2012 18:11:04 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Organization_ValidateSubDomain]
(
	@SubDomain nvarchar(250),
	@OrganizationId INT
)
AS
BEGIN
	SELECT COUNT(OrganizationId) FROM TBL_Organization WHERE SubDomain=@SubDomain AND OrganizationId<>@organizationId AND IsDeleted=0 
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Patient_DeleteAppointmentByAppointmentId]    Script Date: 07/13/2012 18:11:04 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Patient_DeleteAppointmentByAppointmentId]
(
@AppointmentId INT
)
AS
BEGIN

--DELETING APPOINTMENT FOR PATIENT and updating another patient with same canceled time.. 

DECLARE @DoctorId INT
DECLARE @ServiceId INT
DECLARE @DoctorTimingId INT
DECLARE @ServiceTimingId INT
DECLARE @AppointmentDate DATETIME
DECLARE @AppointmentTime NVARCHAR(15)

CREATE TABLE #Appointment
	(
		AppointmentId INT,
		PatientId INT,
		EmailId NVARCHAR(250),
		MobileId NVARCHAR(250),
		PatientAppointmentTime NVARCHAR(150),
		AppointmentDate datetime,
		AppointmentTime NVARCHAR(15),
		DoctorServiceName NVARCHAR(150),
		TokenNumber INT,
		StatusName NVARCHAR(25)
	);
	
IF((SELECT ServiceId FROM TBL_Appointment WHERE AppointmentId=@AppointmentId) IS NULL)

BEGIN

	SELECT 
		@DoctorId=Doctorid, @AppointmentDate=CONVERT(VARCHAR,AppointmentDate, 101), @AppointmentTime=AppointmentTime, @DoctorTimingId=DoctorTimingId
	FROM 
		TBL_Appointment
	WHERE 
		AppointmentId=@AppointmentId

	INSERT 
		INTO #Appointment	
	SELECT
		A.AppointmentId, A.PatientId,
		EmailId = (SELECT EmailId FROM TBL_Login WHERE LoginId = (SELECT LoginId FROM TBL_Patient WHERE PatientId = (SELECT CASE ParentId WHEN 0 THEN PatientId
																																		 ELSE ParentId END FROM TBL_Patient WHERE PatientId=A.PatientId))),
		MobileId = (SELECT MobileId FROM TBL_Login WHERE LoginId = (SELECT LoginId FROM TBL_Patient WHERE PatientId= (SELECT CASE ParentId WHEN 0 THEN PatientId
																																		 ELSE ParentId END FROM TBL_Patient WHERE PatientId=A.PatientId))),
		A.AppointmentTime, AppointmentDate = CONVERT(VARCHAR,A.AppointmentDate, 101),
		@AppointmentTime,
		DoctorServiceName = (SELECT CASE ISNULL(Degrees, '')
									WHEN '' THEN 'Dr. ' + DoctorName
									--ELSE 'Dr. ' + DoctorName + ', ' + ISNULL(Degrees, '')
									ELSE 'Dr. ' + DoctorName
									END  
							FROM TBL_Doctor WHERE DoctorId=A.DoctorId), 
		TokenNumber = (SELECT TokenSequence FROM TBL_Token WHERE AppointmentId=A.AppointmentId),
		StatusName = (SELECT StatusName FROM TBL_Master_Status WHERE StatusId=A.StatusId)
				
	FROM 
		TBL_Appointment A
	WHERE
		A.DoctorId=@Doctorid AND CONVERT(VARCHAR,A.AppointmentDate, 101)=@AppointmentDate AND A.DoctorTimingId=@DoctorTimingId AND A.AppointmentId!=@AppointmentId AND A.IsDeleted=0 AND AppointmentTime LIKE 'waiting %'

END
ELSE

	SELECT 
		@ServiceId=ServiceId, @AppointmentDate=CONVERT(VARCHAR,AppointmentDate, 101), @AppointmentTime=AppointmentTime, @ServiceTimingId=ServiceTimingId 
	FROM 
		TBL_Appointment
	WHERE 
		AppointmentId=@AppointmentId

	INSERT 
		INTO #Appointment	
	SELECT
		 A.AppointmentId, A.PatientId,
		 EmailId = (SELECT EmailId FROM TBL_Login WHERE LoginId = (SELECT LoginId FROM TBL_Patient WHERE PatientId= (SELECT CASE ParentId WHEN 0 THEN PatientId
																																		 ELSE ParentId END FROM TBL_Patient WHERE PatientId=A.PatientId))),
		 MobileId = (SELECT MobileId FROM TBL_Login WHERE LoginId = (SELECT LoginId FROM TBL_Patient WHERE PatientId= (SELECT CASE ParentId WHEN 0 THEN PatientId
																																		 ELSE ParentId END FROM TBL_Patient WHERE PatientId=A.PatientId))),
		 A.AppointmentTime, AppointmentDate = CONVERT(VARCHAR,A.AppointmentDate, 101),
		 @AppointmentTime,
		 DoctorServiceName = (SELECT ServiceName  FROM TBL_Service WHERE ServiceId=A.ServiceId),
		 TokenNumber = (SELECT TokenSequence FROM TBL_Token WHERE AppointmentId=A.AppointmentId),
		 StatusName = (SELECT StatusName FROM TBL_Master_Status WHERE StatusId=A.StatusId)
		 
	FROM 
		TBL_Appointment A
	WHERE
		A.ServiceId=@ServiceId AND CONVERT(VARCHAR,A.AppointmentDate, 101)=@AppointmentDate AND A.ServiceTimingId=@ServiceTimingId AND A.AppointmentId!=@AppointmentId AND A.IsDeleted=0 AND AppointmentTime LIKE 'waiting %'
 
UPDATE 
	TBL_Appointment 
SET 
	StatusId=5,
	IsDeleted=1,
	ModifiedOn=GETDATE()
WHERE 
	AppointmentId = @AppointmentId 
	
--DELETE FROM TBL_Token WHERE AppointmentId = @AppointmentId 

UPDATE TBL_Token SET IsDeleted=1 WHERE AppointmentId=@AppointmentId

SELECT * FROM #Appointment ORDER BY PatientAppointmentTime ASC

END
GO

/****** Object:  StoredProcedure [dbo].[USP_Patient_DeleteAppointmentByAppointmentIdByDoctor]    Script Date: 07/13/2012 18:11:04 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Patient_DeleteAppointmentByAppointmentIdByDoctor]
(
@AppointmentId INT
)
AS
BEGIN

--DELETING APPOINTMENT FOR PATIENT and updating another patient with same canceled time.. 

DECLARE @DoctorId INT
DECLARE @ServiceId INT
DECLARE @DoctorTimingId INT
DECLARE @ServiceTimingId INT
DECLARE @AppointmentDate DATETIME
DECLARE @AppointmentTime NVARCHAR(15)

CREATE TABLE #Appointment
	(
		AppointmentId INT,
		PatientId INT,
		EmailId NVARCHAR(250),
		MobileId NVARCHAR(250),
		PatientAppointmentTime NVARCHAR(150),
		AppointmentDate datetime,
		AppointmentTime NVARCHAR(15),
		DoctorServiceName NVARCHAR(150),
		TokenNumber INT,
		StatusName NVARCHAR(25)
	);
	
IF((SELECT ServiceId FROM TBL_Appointment WHERE AppointmentId=@AppointmentId) IS NULL)

BEGIN

	SELECT 
		@DoctorId=Doctorid, @AppointmentDate=CONVERT(VARCHAR,AppointmentDate, 101), @AppointmentTime=AppointmentTime, @DoctorTimingId=DoctorTimingId
	FROM 
		TBL_Appointment
	WHERE 
		AppointmentId=@AppointmentId

	INSERT 
		INTO #Appointment	
	SELECT
		A.AppointmentId, A.PatientId,
		EmailId = (SELECT EmailId FROM TBL_Login WHERE LoginId = (SELECT LoginId FROM TBL_Patient WHERE PatientId = (SELECT CASE ParentId WHEN 0 THEN PatientId
																																		 ELSE ParentId END FROM TBL_Patient WHERE PatientId=A.PatientId))),
		MobileId = (SELECT MobileId FROM TBL_Login WHERE LoginId = (SELECT LoginId FROM TBL_Patient WHERE PatientId= (SELECT CASE ParentId WHEN 0 THEN PatientId
																																		 ELSE ParentId END FROM TBL_Patient WHERE PatientId=A.PatientId))),
		A.AppointmentTime, AppointmentDate = CONVERT(VARCHAR,A.AppointmentDate, 101),
		@AppointmentTime,
		DoctorServiceName = (SELECT CASE ISNULL(Degrees, '')
									WHEN '' THEN 'Dr. ' + DoctorName
									--ELSE 'Dr. ' + DoctorName + ', ' + ISNULL(Degrees, '')
									ELSE 'Dr. ' + DoctorName
									END  
							FROM TBL_Doctor WHERE DoctorId=A.DoctorId), 
		TokenNumber = (SELECT TokenSequence FROM TBL_Token WHERE AppointmentId=A.AppointmentId),
		StatusName = (SELECT StatusName FROM TBL_Master_Status WHERE StatusId=A.StatusId)
				
	FROM 
		TBL_Appointment A
	WHERE
		A.DoctorId=@Doctorid AND CONVERT(VARCHAR,A.AppointmentDate, 101)=@AppointmentDate AND A.DoctorTimingId=@DoctorTimingId AND A.AppointmentId!=@AppointmentId AND A.IsDeleted=0 AND A.StatusId!=5 AND AppointmentTime LIKE 'waiting %'

END
ELSE

	SELECT 
		@ServiceId=ServiceId, @AppointmentDate=CONVERT(VARCHAR,AppointmentDate, 101), @AppointmentTime=AppointmentTime, @ServiceTimingId=ServiceTimingId 
	FROM 
		TBL_Appointment
	WHERE 
		AppointmentId=@AppointmentId

	INSERT 
		INTO #Appointment	
	SELECT
		 A.AppointmentId, A.PatientId,
		 EmailId = (SELECT EmailId FROM TBL_Login WHERE LoginId = (SELECT LoginId FROM TBL_Patient WHERE PatientId= (SELECT CASE ParentId WHEN 0 THEN PatientId
																																		 ELSE ParentId END FROM TBL_Patient WHERE PatientId=A.PatientId))),
		 MobileId = (SELECT MobileId FROM TBL_Login WHERE LoginId = (SELECT LoginId FROM TBL_Patient WHERE PatientId= (SELECT CASE ParentId WHEN 0 THEN PatientId
																																		 ELSE ParentId END FROM TBL_Patient WHERE PatientId=A.PatientId))),
		 A.AppointmentTime, AppointmentDate = CONVERT(VARCHAR,A.AppointmentDate, 101),
		 @AppointmentTime,
		 DoctorServiceName = (SELECT ServiceName  FROM TBL_Service WHERE ServiceId=A.ServiceId),
		 TokenNumber = (SELECT TokenSequence FROM TBL_Token WHERE AppointmentId=A.AppointmentId),
		 StatusName = (SELECT StatusName FROM TBL_Master_Status WHERE StatusId=A.StatusId)
		 
	FROM 
		TBL_Appointment A
	WHERE
		A.ServiceId=@ServiceId AND CONVERT(VARCHAR,A.AppointmentDate, 101)=@AppointmentDate AND A.ServiceTimingId=@ServiceTimingId AND A.AppointmentId!=@AppointmentId AND A.IsDeleted=0 AND A.StatusId!=5 AND AppointmentTime LIKE 'waiting %'
 
UPDATE 
	TBL_Appointment 
SET 
	StatusId=5,
	ModifiedOn=GETDATE()
WHERE 
	AppointmentId = @AppointmentId 
	
--DELETE FROM TBL_Token WHERE AppointmentId = @AppointmentId 

UPDATE TBL_Token SET IsDeleted=1 WHERE AppointmentId=@AppointmentId

SELECT * FROM #Appointment ORDER BY PatientAppointmentTime ASC

END
GO

/****** Object:  StoredProcedure [dbo].[USP_Patient_DeleteFamilyHistory]    Script Date: 07/13/2012 18:11:04 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Patient_DeleteFamilyHistory]
(
	@PatientId INT
)
AS
DELETE FROM TBL_Patient_FamilyHistory WHERE PatientId=@PatientId

GO

/****** Object:  StoredProcedure [dbo].[USP_Patient_DeletePastHistory]    Script Date: 07/13/2012 18:11:04 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Patient_DeletePastHistory]
(
	@PatientId INT
)
AS
DELETE FROM TBL_Patient_PastHistory WHERE PatientId=@PatientId
GO

/****** Object:  StoredProcedure [dbo].[USP_Patient_DeletePatientByParentId]    Script Date: 07/13/2012 18:11:04 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Patient_DeletePatientByParentId]
(
	@PatientId INT
)
AS
BEGIN
	UPDATE TBL_Patient SET
		IsDeleted=1,
		ModifiedOn=GETDATE()
	WHERE
		PatientId=@PatientId and ParentId!=0
		
	UPDATE TBL_Appointment SET IsDeleted=1 WHERE PatientId=@PatientId
	
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Patient_DeletePersonalHistory]    Script Date: 07/13/2012 18:11:04 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Patient_DeletePersonalHistory]
(
	@PatientId INT
)
AS
DELETE FROM TBL_Patient_PersonalHistory WHERE PatientId=@PatientId
GO

/****** Object:  StoredProcedure [dbo].[USP_Patient_GetFamilyHistory]    Script Date: 07/13/2012 18:11:04 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Patient_GetFamilyHistory]
(
	@PatientId INT
)
AS
SELECT * FROM TBL_Patient_FamilyHistory WHERE PatientId=@PatientId
GO

/****** Object:  StoredProcedure [dbo].[USP_Patient_GetMyAppointment]    Script Date: 07/13/2012 18:11:04 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Patient_GetMyAppointment]
(
@SignInId nvarchar(250)
)
AS
BEGIN

DECLARE @PatientId INT

SELECT 
	@PatientId=PatientId FROM TBL_Patient 
WHERE 
	LoginId IN (SELECT LoginId FROM TBL_Login WHERE IsDeleted=0 AND 
	(EmailId=@SignInId OR MedAppId=@SignInId OR MobileId=@SignInId)) AND
	IsDeleted=0 AND ParentId=0

SELECT	A.AppointmentId,

        [Name] = CASE
					WHEN  (SELECT ParentId FROM TBL_Patient WHERE PatientId=A.PatientId) = 0 THEN (SELECT CASE ISNULL(LastName, '')
																											   WHEN '' THEN FirstName
																											   ELSE FirstName + ' ' + LastName
																											   END  FROM TBL_Patient WHERE PatientId=@PatientId)
					ELSE  (SELECT CASE ISNULL(LastName, '')
									   WHEN '' THEN FirstName
									   ELSE FirstName + ' ' + LastName
									   END 
						   FROM TBL_Patient WHERE PatientId=A.PatientId)+ ' via ' + (SELECT CASE ISNULL(LastName, '')
																								 WHEN '' THEN FirstName
																								 ELSE FirstName + ' ' + LastName
																								 END 
																								  FROM TBL_Patient WHERE PatientId=@PatientId)
				END,
				
		[Doctor/Service Name] = CASE
				WHEN A.ServiceId is null THEN (SELECT  'Dr. ' + DoctorName + ' (' + (SELECT DepartmentName FROM TBL_Master_Department WHERE DepartmentId=D.DepartmentId) + ')' FROM TBL_Doctor D WHERE D.DoctorId=A.DoctorId)
				ELSE (SELECT ServiceName  + ' (' + (SELECT DepartmentName FROM TBL_Master_Department WHERE DepartmentId=S.DepartmentId) + ')' FROM TBL_Service S WHERE S.ServiceId=A.ServiceId)
				END,
		--(SELECT OrganizationName+', '+BranchName FROM TBL_Organization WHERE OrganizationId=A.OrganizationId) [Organization Name],
		
		 [ScheduledName]  = CASE
			WHEN A.ServiceId is null THEN
				(SELECT ScheduleName FROM TBL_Doctor_Timing WHERE DoctorTimingId=A.DoctorTimingId)
			ELSE
				(SELECT ScheduleName FROM TBL_Service_Timing WHERE ServiceTimingId=A.ServiceTimingId)
			END,
		 
		 [AccountTypeId]  = CASE
			WHEN A.ServiceId is null THEN
				3
			ELSE
				2
			END,
			
		 [OrganizationName]  = CASE
			WHEN A.ServiceId is null THEN
				(SELECT Address FROM TBL_Doctor_Timing WHERE DoctorTimingId=A.DoctorTimingId)
			ELSE
				(SELECT Address FROM TBL_Service_Timing WHERE ServiceTimingId=A.ServiceTimingId)
			END,
		
		AppointmentDate = CONVERT(VARCHAR,A.AppointmentDate, 101),
		
		AppointmentDateTime = A.AppointmentDate + ' '  +  CASE ISNULL(A.AppointmentTime,'')
																WHEN '' then (CASE
																				 WHEN A.ServiceId is null THEN
																					(CASE 
																						WHEN A.AppointmentTime is null THEN
																							(SELECT EndTime FROM TBL_Doctor_Timing WHERE DoctorTimingId = A.DoctorTimingId)
																						ELSE ''
																						END)
																				  ELSE
																					(CASE 
																						WHEN A.AppointmentTime is null THEN
																							(SELECT EndTime FROM TBL_Service_Timing WHERE ServiceTimingId = A.ServiceTimingId)
																						ELSE ''
																						END)
																					END)
																ELSE ''
																END,
		
		AppointmentTime = CASE
							 WHEN A.ServiceId is null THEN
								(CASE 
									WHEN A.AppointmentTime is null THEN
										(SELECT StartTime + ' - ' + EndTime FROM TBL_Doctor_Timing WHERE DoctorTimingId = A.DoctorTimingId)
									ELSE
										A.AppointmentTime
									END)
							  ELSE
								(CASE 
									WHEN A.AppointmentTime is null THEN
										(SELECT StartTime + ' - ' + EndTime FROM TBL_Service_Timing WHERE ServiceTimingId = A.ServiceTimingId)
									ELSE
										A.AppointmentTime
									END)
								END,
		
		AppointmentTime1 = A.AppointmentTime,  --for time alone
		
		A.DoctorClosingNotes,
		
		Notes = CASE WHEN A.Notes = ' ' THEN 'Not Applicable'
					 ELSE A.Notes	
					 END,		
		A.StatusId,
		
		(SELECT StatusName FROM TBL_Master_Status WHERE StatusId=A.StatusId) [Status],
		
		A.OrganizationId,
		A.IsDeleted,
		Type = (SELECT CASE WHEN A.DoctorId IS NULL THEN '1'
					   ELSE '0'
					   END)
	FROM
		TBL_Appointment A
	WHERE
		(A.PatientId=@PatientId OR A.PatientId IN (SELECT PatientId FROM TBL_Patient WHERE ParentId=@PatientId))
		
	ORDER BY A.AppointmentDate DESC		

END
GO

/****** Object:  StoredProcedure [dbo].[USP_Patient_GetMyAppointmentByAppointmentId]    Script Date: 07/13/2012 18:11:05 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Patient_GetMyAppointmentByAppointmentId] 
(
@AppointmentId INT
)
AS
BEGIN

--SELECTIN APPOINTMENT FOR MY APPOINTMENT VIEW

SELECT	A.PatientId,
		[DoctorServiceName] = CASE
				WHEN A.ServiceId is null THEN (SELECT CASE ISNULL(Degrees, '')
													  WHEN '' THEN 'Dr. ' + DoctorName
												      --ELSE 'Dr. ' + DoctorName + ', ' + ISNULL(Degrees, '')
												      ELSE 'Dr. ' + DoctorName
												      END 
												FROM TBL_Doctor WHERE DoctorId=A.DoctorId)
				ELSE (SELECT ServiceName  FROM TBL_Service WHERE ServiceId=A.ServiceId)
				END,
		 [TimingId] = CASE
				WHEN A.ServiceTimingId is null THEN A.DoctorTimingId
				ELSE A.ServiceTimingId
				END,
				
		A.OrganizationId,
		
		(SELECT OrganizationName+', '+BranchName FROM TBL_Organization WHERE OrganizationId=A.OrganizationId) [Organization Name],
		
		(SELECT OrganizationName FROM TBL_Organization WHERE OrganizationId=A.OrganizationId) [HospitalName],
		
		(SELECT BranchName FROM TBL_Organization WHERE OrganizationId=A.OrganizationId) [BranchName],
		
		[Session] = CASE
				WHEN A.ServiceId is null THEN (SELECT Address FROM TBL_Doctor_Timing WHERE DoctorId=A.DoctorId AND DoctorTimingId=A.DoctorTimingId)
				ELSE (SELECT Address  FROM TBL_Service_Timing WHERE ServiceId=A.ServiceId AND ServiceTimingId=A.ServiceTimingId)
				END,		
		
		AppointmentDate = CONVERT(VARCHAR,A.AppointmentDate, 106),
		
		A.AppointmentTime,
		
		Preferential = CASE
				WHEN A.PreferentialId is null THEN 'Not Applicable'
				ELSE (SELECT PreferentialName  FROM TBL_Master_Preferential WHERE PreferentialId=A.PreferentialId)
				END,
				
		[Car Number] = CASE
				WHEN A.IsCarParking = 0 THEN 'Not Applicable'
				ELSE A.CarNumber
				END,
		
		A.StatusId,
		
		(SELECT StatusName FROM TBL_Master_Status WHERE StatusId=A.StatusId) [Status],
		
		Notes = CASE
				WHEN A.Notes is Null THEN 'Not Applicable'
				ELSE A.Notes
				END,
		MobileId = (SELECT MobileId FROM TBL_Login WHERE LoginId=CASE WHEN P.LoginId is null THEN (SELECT LoginId FROM TBL_Patient WHERE PatientId=P.ParentId)
																	  ELSE P.LoginId 
																	  END),
		EmailId = (SELECT EmailId FROM TBL_Login WHERE LoginId=CASE WHEN P.LoginId is null THEN (SELECT LoginId FROM TBL_Patient WHERE PatientId=P.ParentId)
																	  ELSE P.LoginId 
																	  END),
		Token = (SELECT TokenSequence FROM TBL_Token WHERE AppointmentId=A.AppointmentId),
		PatientName = (SELECT FirstName +' '+LastName FROM TBL_Patient WHERE PatientId=A.PatientId),
		DoctorServiceType = CASE
				WHEN A.ServiceId is null THEN 0
				ELSE 1
				END,
		DoctorServiceId = CASE
				WHEN A.ServiceId is null THEN A.DoctorId
				ELSE A.ServiceId
				END,
		LoginId = CASE WHEN P.LoginId is null THEN (SELECT LoginId FROM TBL_Patient WHERE PatientId=P.ParentId)
					   ELSE P.LoginId 
					   END,
					   
		PrimaryHolderName = ( SELECT FirstName + ' ' + LastName FROM TBL_Patient WHERE PatientId = P.ParentId)
FROM
	TBL_Appointment A,
	TBL_Patient P	
WHERE
	P.PatientId = A.PatientId AND
	A.AppointmentId=@AppointmentId
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Patient_GetPastHistory]    Script Date: 07/13/2012 18:11:05 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Patient_GetPastHistory]
(
	@PatientId INT
)
AS
SELECT * FROM TBL_Patient_PastHistory WHERE PatientId=@PatientId
GO

/****** Object:  StoredProcedure [dbo].[USP_Patient_GetPatient]    Script Date: 07/13/2012 18:11:05 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Patient_GetPatient]
(
	@SignInId nvarchar(250)
)
AS
BEGIN
	SELECT L.*, P.* FROM
		TBL_Login L,
		TBL_Patient P
	WHERE
		L.IsDeleted=0 AND
		(L.EmailId=@SignInId OR L.MedAppId=@SignInId OR L.MobileId=@SignInId) AND
		P.LoginId=L.LoginId AND P.IsDeleted=0
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Patient_GetPatientByAppointmentId]    Script Date: 07/13/2012 18:11:05 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Patient_GetPatientByAppointmentId]
(
	@AppointmentId INT
)
AS
BEGIN
	SELECT 
		P.PatientId,
		P.FirstName,
		P.LastName,
		ISNULL(P.DateofBirth, '') [DateofBirth],
		ISNULL(P.Gender, '') [Gender],
		ISNULL(P.CountryId, 0) [CountryId],
		ISNULL(P.StateId, 0) [StateId],
		ISNULL(P.CityId, 0) [CityId],
		ISNULL((SELECT CityName FROM TBL_GeoPostcodes_City WHERE CityId=P.CityId), '') [CityName],
		ISNULL((SELECT ISNULL(StateName, '') FROM TBL_GeoPostcodes_State WHERE StateId=P.StateId), '') [StateName],
		ISNULL((SELECT ISNULL(CountryName, '') FROM TBL_GeoPostcodes_Country WHERE CountryId=P.CountryId), '') [CountryName],
		ISNULL(P.Address, '') [Address],
		--ISNULL(P.AddressLine2, '') [AddressLine2],
		ISNULL(P.PostalCode, '') [PostalCode],
		ISNULL(P.Phone, '') [Phone],
		ISNULL(P.Mobile, '') [Mobile],
		p.RelationshipId,
		A.AppointmentId,
		A.OrganizationId,
		ISNULL(A.ServiceId, 0) [ServiceId],
		ISNULL(A.ServiceTimingId, 0) [ServiceTimingId],
		ISNULL(A.DoctorId, 0) [DoctorId],
		ISNULL(A.DoctorTimingId, 0) [DoctorTimingId],
		A.AppointmentDate,
		A.AppointmentTime,
		A.Notes,
		A.IsCarParking,
		ISNULL(A.CarNumber, '') [CarNumber],
		ISNULL(A.PreferentialId, '') [PreferentialId],
		ISNULL(A.PreferentialBoarding, '') [PreferentialBoarding],
		ISNULL(A.DoctorClosingNotes, '') [DoctorClosingNotes],
		A.StatusId,
		A.IsDirectAppointment,
		[SMSDetails] = (SELECT TOP 1 S.SMSMessage + ' (' + CASE ISNULL((SELECT TOP 1 Status FROM TBL_GupShup WHERE ExternalId = S.ExternalId),'') 
															WHEN '' THEN 'Delivery Status Pending' 
															ELSE (SELECT TOP 1 Status FROM TBL_GupShup WHERE ExternalId = S.ExternalId) 
															END + ' )' FROM TBL_SMS S WHERE S.AppointmentId = A.AppointmentId)
	FROM TBL_Appointment A, TBL_Patient P WHERE A.AppointmentId=@AppointmentId AND A.PatientId=P.PatientId
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Patient_GetPatientByParentId]    Script Date: 07/13/2012 18:11:05 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Patient_GetPatientByParentId]
(
	@Search NVARCHAR(250),
	@ParentId INT
)
AS
SELECT 
		 P.PatientId, 
		 CASE ISNULL(P.LastName, '')
			  WHEN '' THEN P.FirstName
			  ELSE P.FirstName + ' ' + P.LastName
			  END [Name],
		 [Gender]=CASE P.Gender
			WHEN 0 THEN 'Male'
			WHEN 1 THEN 'Female'
		 END,
		 P.Mobile,
		 (SELECT Relationship FROM TBL_Master_Relationship WHERE RelationshipId=P.RelationshipId) [Relationship]  
FROM 
		TBL_Patient P 
WHERE 
		 P.ParentId=@ParentId AND 
		 IsDeleted=0 AND
		 (
		 FirstName LIKE '%' + @Search + '%' OR
		 LastName LIKE '%' + @Search + '%' 
		 )
ORDER BY P.FirstName
GO

/****** Object:  StoredProcedure [dbo].[USP_Patient_GetPatientByPatientId]    Script Date: 07/13/2012 18:11:05 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Patient_GetPatientByPatientId] 
(
	@PatientId INT 
)
AS
BEGIN
	SELECT P.*,
	(SELECT CityName FROM TBL_GeoPostcodes_City WHERE CityId=P.CityId) [CityName],
		(SELECT StateName FROM TBL_GeoPostcodes_State WHERE StateId=P.StateId) [StateName],
		(SELECT CountryName FROM TBL_GeoPostcodes_Country WHERE CountryId=P.CountryId) [CountryName],
		 PrimaryHolder = CASE  P.ParentId WHEN 0 THEN (SELECT P.FirstName + ' ' + P.LastName)
						ELSE (SELECT FirstName + ' ' + LastName FROM TBL_Patient WHERE PatientId=P.ParentId )
						END
	 FROM TBL_Patient P WHERE P.PatientId=@PatientId
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Patient_GetPersonalHistory]    Script Date: 07/13/2012 18:11:05 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Patient_GetPersonalHistory]
(
	@PatientId INT
)
AS
SELECT * FROM TBL_Patient_PersonalHistory WHERE PatientId=@PatientId

GO

/****** Object:  StoredProcedure [dbo].[USP_Patient_GetReferedPatientIdByToken]    Script Date: 07/13/2012 18:11:05 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Patient_GetReferedPatientIdByToken]
(
@ReferenceToken nvarchar(10)
)
AS
BEGIN 

SELECT	PatientId FROM TBL_Patient WHERE ReferenceToken=@ReferenceToken

END
GO

/****** Object:  StoredProcedure [dbo].[USP_Patient_GetReferenceTokenBySignInId]    Script Date: 07/13/2012 18:11:05 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Patient_GetReferenceTokenBySignInId]
(
@SignInId nvarchar(250)
)
AS
BEGIN

SELECT FirstName+' '+Lastname [ReferedBy], ReferenceToken FROM TBL_Patient 
	WHERE LoginId IN (SELECT LoginId FROM TBL_Login WHERE IsDeleted=0 AND 
		(EmailId=@SignInId OR MedAppId=@SignInId OR MobileId=@SignInId)) AND
		IsDeleted=0 

END
GO

/****** Object:  StoredProcedure [dbo].[USP_Patient_InsertDirectMember]    Script Date: 07/13/2012 18:11:06 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Patient_InsertDirectMember]
(
	@Name NVARCHAR(50),
	@PatientId INT,
	@Mobile NVARCHAR(50),
	@ReferenceToken NVARCHAR(10)
)
AS
BEGIN
		DECLARE @LoginId INT
		DECLARE @NewPatientId INT
		DECLARE @CountryId INT
		
		SELECT @LoginId=LoginId FROM TBL_Patient WHERE PatientId=@PatientId
		SELECT @CountryId=CountryId FROM TBL_Patient WHERE PatientId=@PatientId
	
		INSERT INTO TBL_Patient 
		(LoginId,FirstName,CountryId,Mobile,RelationshipId,ParentId,ReferenceToken,ReferedPatientId,CreatedOn,IsActivated,IsDeleted) VALUES
		(@LoginId,@Name,@CountryId,@Mobile,10,@PatientId,@ReferenceToken,0,GETDATE(),1,0)
		
		SET @NewPatientId = @@IDENTITY
		
		SELECT @NewPatientId
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Patient_InsertDirectPatient]    Script Date: 07/13/2012 18:11:06 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Patient_InsertDirectPatient]
(
	@FirstName NVARCHAR(150),
	@LastName NVARCHAR(150),
	@Mobile NVARCHAR(20),
	@Password NVARCHAR(15),
	@ReferenceToken NVARCHAR(10),
	@CountryId INT,
	@TransactionToken NVARCHAR(max)
)
AS
BEGIN
		DECLARE @MedAppId  NVARCHAR(20)
		DECLARE @NewLoginId INT
		DECLARE @NewPatientId INT
	
		INSERT INTO TBL_Login
		(FirstName, LastName, CountryId, MedAppId, MobileId, EmailId, Password, IsDirect, IsActivated, IsEmailActivated, IsEmailNotification, IsSMSNotification, TransactionToken, CreatedOn, IsDeleted) VALUES
		(@FirstName, @LastName, @CountryId, NULL, @Mobile, NULL, @Password, 1, 1, 0, 0, 1, @TransactionToken, GETDATE(), 0)
		
		SET @NewLoginId = @@IDENTITY
		SET @MedAppId = 'MED-' + CONVERT(NVARCHAR, @NewLoginId) 
		
		UPDATE TBL_Login SET MedAppId=@MedAppId WHERE LoginId=@NewLoginId
	
		INSERT INTO TBL_Patient 
		(LoginId,FirstName,LastName,CountryId,Mobile,RelationshipId,ParentId,ReferenceToken,ReferedPatientId,CreatedOn,IsActivated,IsDeleted) VALUES
		(@NewLoginId,@FirstName,@LastName,@CountryId,@Mobile,1,0,@ReferenceToken,0,GETDATE(),1,0)
	
		SET @NewPatientId = @@IDENTITY
		
		SELECT @NewPatientId
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Patient_InsertFamilyHistory]    Script Date: 07/13/2012 18:11:06 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Patient_InsertFamilyHistory]
(
	@PatientId int,
	@FamilyHistoryId int
)
AS
INSERT INTO TBL_Patient_FamilyHistory 
(PatientId, FamilyHistoryId) VALUES
(@PatientId, @FamilyHistoryId)

GO

/****** Object:  StoredProcedure [dbo].[USP_Patient_InsertLoginPatient]    Script Date: 07/13/2012 18:11:06 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Patient_InsertLoginPatient]
(
	@LoginId INT,
	@FirstName NVARCHAR(50),
	@LastName NVARCHAR(50),
	@Mobile NVARCHAR(50),
	@ReferenceToken NVARCHAR(10)
)
AS
BEGIN		
		DECLARE @NewPatientId INT
		DECLARE @CountryId INT
		
		SELECT @CountryId = CountryId FROM TBL_Login WHERE LoginId=@LoginId
		
		
		INSERT INTO TBL_Patient 
		(LoginId,FirstName,LastName,CountryId,Mobile,RelationshipId,ParentId,ReferenceToken,ReferedPatientId,CreatedOn,IsActivated,IsDeleted) VALUES
		(@loginId,@FirstName,@LastName,@CountryId,@Mobile,1,0,@ReferenceToken,0,GETDATE(),1,0)
	
		SET @NewPatientId = @@IDENTITY
		
		SELECT @NewPatientId
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Patient_InsertPastHistory]    Script Date: 07/13/2012 18:11:06 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Patient_InsertPastHistory]
(
	@PatientId int,
	@PastHistoryId int
)
AS
INSERT INTO TBL_Patient_PastHistory 
(PatientId, PastHistoryId) VALUES
(@PatientId, @PastHistoryId)
GO

/****** Object:  StoredProcedure [dbo].[USP_Patient_InsertPatient]    Script Date: 07/13/2012 18:11:06 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Patient_InsertPatient]
(
	@PatientId INT,
	@LoginId INT,
	@FirstName NVARCHAR(50),
	@LastName NVARCHAR(50),
	@DateofBirth DATETIME,
	@Gender BIT,
	@CountryId INT,
	@StateId INT,
	@CityId INT,
	@Address NVARCHAR(1000),
	@AddressLine1 NVARCHAR(500),
	@AddressLine2 NVARCHAR(500),
	@PostalCode NVARCHAR(50),
	@Phone NVARCHAR(50),
	@Mobile NVARCHAR(50),
	@RelationshipId INT,
	@ParentId INT,
	@ReferenceToken NVARCHAR(10),
	@ReferedPatientId INT
)
AS
BEGIN
	DECLARE @NewPatientId INT
	
	IF (@PatientId = 0)
	BEGIN
		IF @LoginId = 0
			SET @LoginId = NULL
		
		INSERT INTO TBL_Patient
		(LoginId, FirstName, LastName, DateofBirth, Gender, CountryId, StateId, CityId, Address, AddressLine1, AddressLine2, PostalCode, Phone, Mobile, RelationshipId, ParentId, ReferenceToken, ReferedPatientId, CreatedOn, IsActivated, IsDeleted) VALUES
		(@LoginId, @FirstName, @LastName, @DateofBirth, @Gender, @CountryId, @StateId, @CityId, @Address, @AddressLine1, @AddressLine2, @PostalCode, @Phone, @Mobile, @RelationshipId, @ParentId, @ReferenceToken, @ReferedPatientId, GETDATE(), 1, 0)

		SET @NewPatientId = @@IDENTITY
	
		SELECT @NewPatientId
	END
	ELSE
	BEGIN
		UPDATE TBL_Patient SET
			FirstName=@FirstName,
			LastName=@LastName,
			DateofBirth=@DateofBirth,
			Gender=@Gender,
			CountryId=@CountryId,
			StateId=@StateId,
			CityId=@CityId,
			Address=@Address,
			AddressLine1=@AddressLine1,
			AddressLine2=@AddressLine2,
			PostalCode=@PostalCode,
			Phone=@Phone,
			Mobile=@Mobile,
			RelationshipId=@RelationshipId,
			ParentId=@ParentId,
			ReferenceToken=@ReferenceToken,
			ReferedPatientId=@ReferedPatientId,
			ModifiedOn=GETDATE()
		WHERE
			PatientId=@PatientId
			
		SELECT @PatientId
	END
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Patient_InsertPersonalHistory]    Script Date: 07/13/2012 18:11:06 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Patient_InsertPersonalHistory]
(
	@PatientId int,
	@PersonalHistoryId int
)
AS
INSERT INTO TBL_Patient_PersonalHistory 
(PatientId, PersonalHistoryId) VALUES
(@PatientId, @PersonalHistoryId)
GO

/****** Object:  StoredProcedure [dbo].[USP_Patient_InsertSearchCount]    Script Date: 07/13/2012 18:11:06 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Patient_InsertSearchCount]
(
	@PatientId INT,
	@CountryId nvarchar(250),
	@StateId nvarchar(250),
	@CityId nvarchar(350),
	@Speciality nvarchar(1000),
	@SpecialityType INT,
	@SearchCount INT,
	@SearchType INT
)
AS
BEGIN
	Insert into TBL_Patient_SearchCount values( @PatientId, @CountryId, @StateId, @CityId, @Speciality, @SpecialityType, @SearchCount, @SearchType,GETDATE() )
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Patient_UpdatePatientAppointmentByAppointmentTime]    Script Date: 07/13/2012 18:11:06 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Patient_UpdatePatientAppointmentByAppointmentTime]
(
@AppointmentId INT,
@AppointmentTime NVARCHAR(15)
)
AS
BEGIN

--updating waiting list1 to new time

IF ((LOWER(@AppointmentTime) = 'waiting 1') OR (LOWER(@AppointmentTime) = 'waiting 2') OR (LOWER(@AppointmentTime) = 'waiting 3') OR (LOWER(@AppointmentTime) = 'waiting 4') OR (LOWER(@AppointmentTime) = 'waiting 5'))
BEGIN
UPDATE 
	TBL_Appointment 
SET 
	AppointmentDate=CONVERT(NVARCHAR,AppointmentDate,101),
	AppointmentTime=@AppointmentTime,
	ModifiedOn = GETDATE()
WHERE 
	AppointmentId=@AppointmentId AND
	IsDeleted = 0
END
ELSE
BEGIN
UPDATE 
	TBL_Appointment 
SET 
	AppointmentDate=CONVERT(NVARCHAR,AppointmentDate,101) + ' ' + @AppointmentTime,
	AppointmentTime=@AppointmentTime,
	ModifiedOn = GETDATE()
WHERE 
	AppointmentId=@AppointmentId AND
	IsDeleted = 0
END

--update waiting list with successed waiting list ...


DECLARE @DoctorId INT
DECLARE @ServiceId INT
DECLARE @DoctorTimingId INT
DECLARE @ServiceTimingId INT
DECLARE @AppointmentDate DATETIME

	
IF((SELECT ServiceId FROM TBL_Appointment WHERE AppointmentId=@AppointmentId) IS NULL)
BEGIN
	SELECT 
		@DoctorId=Doctorid, @AppointmentDate=CONVERT(VARCHAR,AppointmentDate, 101), @DoctorTimingId=DoctorTimingId
	FROM 
		TBL_Appointment
	WHERE 
		AppointmentId=@AppointmentId

	UPDATE 
		TBL_Appointment SET AppointmentTime='Waiting 1', ModifiedOn=GETDATE()
	WHERE
		DoctorId=@Doctorid AND @AppointmentDate=CONVERT(VARCHAR,AppointmentDate, 101) AND DoctorTimingId=@DoctorTimingId AND AppointmentId!=@AppointmentId AND IsDeleted=0 AND AppointmentTime='Waiting 2'
		
	UPDATE
		TBL_Appointment SET AppointmentTime='Waiting 2', ModifiedOn=GETDATE()
	WHERE
		DoctorId=@Doctorid AND @AppointmentDate=CONVERT(VARCHAR,AppointmentDate, 101) AND DoctorTimingId=@DoctorTimingId AND AppointmentId!=@AppointmentId AND IsDeleted=0 AND AppointmentTime='Waiting 3'
		
	UPDATE 
		TBL_Appointment SET AppointmentTime='Waiting 3', ModifiedOn=GETDATE()
	WHERE
		DoctorId=@Doctorid AND @AppointmentDate=CONVERT(VARCHAR,AppointmentDate, 101) AND DoctorTimingId=@DoctorTimingId AND AppointmentId!=@AppointmentId AND IsDeleted=0 AND AppointmentTime='Waiting 4'
		
	UPDATE 
		TBL_Appointment SET AppointmentTime='Waiting 4', ModifiedOn=GETDATE()
	WHERE
		DoctorId=@Doctorid AND @AppointmentDate=CONVERT(VARCHAR,AppointmentDate, 101) AND DoctorTimingId=@DoctorTimingId AND AppointmentId!=@AppointmentId AND IsDeleted=0 AND AppointmentTime='Waiting 5'

	END
ELSE
	SELECT 
		@ServiceId=ServiceId, @AppointmentDate=CONVERT(VARCHAR,AppointmentDate, 101), @ServiceTimingId=ServiceTimingId 
	FROM 
		TBL_Appointment
	WHERE 
		AppointmentId=@AppointmentId

	UPDATE 
		TBL_Appointment SET AppointmentTime='Waiting 1', ModifiedOn=GETDATE()
	WHERE
		ServiceId=@ServiceId AND @AppointmentDate=CONVERT(VARCHAR,AppointmentDate, 101) AND ServiceTimingId=@ServiceTimingId AND AppointmentId!=@AppointmentId AND IsDeleted=0 AND AppointmentTime='Waiting 2'

	UPDATE 
		TBL_Appointment SET AppointmentTime='Waiting 2', ModifiedOn=GETDATE()
	WHERE
		ServiceId=@ServiceId AND @AppointmentDate=CONVERT(VARCHAR,AppointmentDate, 101) AND ServiceTimingId=@ServiceTimingId AND AppointmentId!=@AppointmentId AND IsDeleted=0 AND AppointmentTime='Waiting 3'

	UPDATE
		 TBL_Appointment SET AppointmentTime='Waiting 3', ModifiedOn=GETDATE()
	WHERE
		ServiceId=@ServiceId AND @AppointmentDate=CONVERT(VARCHAR,AppointmentDate, 101) AND ServiceTimingId=@ServiceTimingId AND AppointmentId!=@AppointmentId AND IsDeleted=0 AND AppointmentTime='Waiting 4'

	UPDATE 
		TBL_Appointment SET AppointmentTime='Waiting 4', ModifiedOn=GETDATE()
	WHERE
		ServiceId=@ServiceId AND @AppointmentDate=CONVERT(VARCHAR,AppointmentDate, 101) AND ServiceTimingId=@ServiceTimingId AND AppointmentId!=@AppointmentId AND IsDeleted=0 AND AppointmentTime='Waiting 5'
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Patient_ValidateMemberName]    Script Date: 07/13/2012 18:11:07 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Patient_ValidateMemberName] 
(
	@FirstName nvarchar(250),
	@LastName nvarchar(250),
	@PatientId int,
	@RelationshipId int,
	@EditPatientId int
)
AS
BEGIN
 IF(@EditPatientId = 0)
	SELECT COUNT(PatientId) FROM TBL_Patient WHERE ParentId=@PatientId AND FirstName=@FirstName AND LastName=@LastName AND RelationshipId=@RelationshipId AND IsDeleted=0
 ELSE
	SELECT COUNT(PatientId) FROM TBL_Patient WHERE ParentId=@PatientId AND FirstName=@FirstName AND LastName=@LastName AND RelationshipId=@RelationshipId AND IsDeleted=0 AND PatientId<>@EditPatientId
  
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Search_GetCity]    Script Date: 07/13/2012 18:11:07 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Search_GetCity] 
(
	@StateId int
)
AS
BEGIN
	DECLARE @CountryCode NVARCHAR(2)
	DECLARE @StateCode NVARCHAR(6)
	
	SELECT @CountryCode=CountryCode, @StateCode=StateCode FROM TBL_GeoPostcodes_State WHERE StateId=@StateId

	IF (ISNULL(@StateCode, '') != '')
		SELECT CityId, CityName
		FROM
			TBL_GeoPostcodes_City
		WHERE
			CountryCode=@CountryCode AND
			StateCode=@StateCode AND CityName IS NOT NULL AND (CityId IN (SELECT DISTINCT CityId FROM TBL_Organization) OR CityId IN (SELECT DISTINCT CityId FROM TBL_Patient)) ORDER BY CityName
	ELSE
		SELECT CityId, CityName
		FROM
			TBL_GeoPostcodes_City
		WHERE
			StateCode=@StateCode AND (CityId IN (SELECT DISTINCT CityId FROM TBL_Organization) OR CityId IN (SELECT DISTINCT CityId FROM TBL_Patient)) ORDER BY CityName	
	--SELECT CityId, CityName FROM TBL_Master_City WHERE StateId=@StateId AND CityId IN (SELECT CityId FROM TBL_Organization) ORDER BY CityName
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Search_GetCountry]    Script Date: 07/13/2012 18:11:07 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Search_GetCountry]
AS
BEGIN
	SELECT CountryId, CountryName FROM TBL_GeoPostcodes_Country WHERE CountryId IN (SELECT CountryId FROM TBL_Organization) ORDER BY CountryName
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Search_GetCountryByAccountTypeId]    Script Date: 07/13/2012 18:11:07 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Search_GetCountryByAccountTypeId] 
(
@Id INT,
@AccountTypeId INT
)
AS
BEGIN

IF(@AccountTypeId = 4)
	SELECT * FROM TBL_Patient WHERE LoginId=@Id AND IsDeleted=0 AND IsActivated=1
ELSE
	SELECT * FROM TBL_Organization WHERE OrganizationId = @Id AND IsDeleted=0 AND IsActivated=1

END
GO

/****** Object:  StoredProcedure [dbo].[USP_Search_GetPostalcode]    Script Date: 07/13/2012 18:11:07 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Search_GetPostalcode] 
(
	@CityId int
)
AS
BEGIN
DECLARE @TYPE INT

	SET @TYPE=(SELECT count(CityId) from TBL_Organization WHERE CityId=@CityId)
	
	IF @TYPE>0
	SELECT DISTINCT PostalCode FROM TBL_Organization WHERE CityId=@CityId ORDER BY PostalCode
	ELSE
	SELECT DISTINCT PostalCode FROM TBL_Organization WHERE StateId=@CityId ORDER BY PostalCode
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Search_GetServiceSpecialityByOrganizationId]    Script Date: 07/13/2012 18:11:07 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Search_GetServiceSpecialityByOrganizationId] 
(
	@DepartmentId INT,
	@organizationId INT, 
	@SignLoginId INT	
)
AS
BEGIN
DECLARE @SearchResult TABLE
(
	Id INT,
	OrganizationName NVARCHAR(1000),
	Name NVARCHAR(MAX),
	DepartmentName NVARCHAR(MAX),
	Type INT,
	LoginId INT,
	OrganizationId INT
)

DECLARE @SearchResultSpeciality TABLE
(
	Id INT,
	Name NVARCHAR(MAX),
	DepartmentName NVARCHAR(MAX),
	Type INT,
	LoginId INT
)

 BEGIN
 
	INSERT INTO @SearchResult 
	SELECT
		MIN(S.ServiceId) Id,
		'',
		S.ServiceName,
		(SELECT DepartmentName FROM TBL_Master_Department WHERE DepartmentId=S.DepartmentId) [DepartmentName],
		1, S.LoginId,O.OrganizationId
	FROM
		TBL_Organization O,
		TBL_Service S
	WHERE
		O.OrganizationId=@organizationId AND
		O.OrganizationId=S.OrganizationId AND
		S.DepartmentId=@DepartmentId AND
		S.LoginId NOT IN (@SignLoginId) AND
		(SELECT COUNT(ServiceId) FROM TBL_Service_Timing WHERE ServiceId=S.ServiceId AND IsDeleted=0 AND AppointmentType IN (1,2)) > 0 AND S.IsDeleted=0 AND S.IsActivated=1
	GROUP BY S.ServiceName, S.DepartmentId, S.LoginId, O.OrganizationId ORDER BY Min(S.ServiceId)
 END
 

INSERT INTO @SearchResultSpeciality(Id, DepartmentName, Name, Type, LoginId)   --FOR GROUPING THE DOCOTORS OF SAME LOGINID
			SELECT  MIN(Id), DepartmentName, Name, Type, LoginId  
			FROM @SearchResult
			GROUP BY DepartmentName, Name, Type, LoginId ORDER BY Name

SELECT * FROM @SearchResultSpeciality 
DECLARE @OrganizationIds varchar(100)
SELECT  @OrganizationIds = COALESCE(@OrganizationIds + ',', '') + CAST(OrganizationId AS varchar(100)) FROM @SearchResult  ORDER BY OrganizationId
SELECT @OrganizationIds as OrganizationIds

END
GO

/****** Object:  StoredProcedure [dbo].[USP_Search_GetSpeciality]    Script Date: 07/13/2012 18:11:07 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Search_GetSpeciality] 
(
	@StateId INT,
	@CityId INT,
	@DepartmentId INT,
	@Postalcode NVARCHAR(MAX),
	@SignLoginId INT	
)
AS
BEGIN
DECLARE @SearchResult TABLE
(
	Id INT,
	OrganizationName NVARCHAR(1000),
	Name NVARCHAR(MAX),
	DepartmentName NVARCHAR(MAX),
	Type INT,
	LoginId INT,
	OrganizationId INT,
	SubDomain NVARCHAR(250)
)

DECLARE @SearchResultSpeciality TABLE
(
	Id INT,
	Name NVARCHAR(MAX),
	DepartmentName NVARCHAR(MAX),
	Type INT,
	LoginId INT,
	SubDomain NVARCHAR(250)
)

IF @Postalcode = '0'
BEGIN
 IF @CityId != 0
 BEGIN
	INSERT INTO @SearchResult 
		SELECT
			MIN(D.DoctorId) Id,
			'',
			CASE ISNULL(D.Degrees, '')
				WHEN '' THEN 'Dr. ' + D.DoctorName
				ELSE 'Dr. ' + D.DoctorName + ', ' + ISNULL(D.Degrees, '')
				END [DoctorName],
			(SELECT DepartmentName FROM TBL_Master_Department WHERE DepartmentId=D.DepartmentId) [DepartmentName],
			0,D.LoginId,O.OrganizationId, CASE ISNULL(D.PreferredName, '')
											WHEN '' THEN NULL
											ELSE
											D.PreferredName
											END
		FROM
			TBL_Organization O,
			TBL_Doctor D
		WHERE
			O.CityId=@CityId AND
			O.OrganizationId=D.OrganizationId AND
			O.IsActivated = 1 AND
			D.DepartmentId=@DepartmentId AND
			D.LoginId NOT IN (@SignLoginId) AND
			(SELECT COUNT(DoctorId) FROM TBL_Doctor_Timing WHERE DoctorId=D.DoctorId AND IsDeleted=0 AND AppointmentType IN (1,2)) > 0 AND D.IsDeleted=0 AND D.IsActivated=1 --only for web appointment type(1-web, 2-both)
		GROUP BY D.DoctorName, D.Degrees, D.DepartmentId, D.LoginId, O.OrganizationId, D.PreferredName ORDER BY Min(D.DoctorId)

	--INSERT INTO @SearchResult 
	--SELECT
	--	MIN(S.ServiceId) Id,
	--	'',
	--	S.ServiceName,
	--	(SELECT DepartmentName FROM TBL_Master_Department WHERE DepartmentId=S.DepartmentId) [DepartmentName],
	--	1, S.LoginId,O.OrganizationId,NULL
	--FROM
	--	TBL_Organization O,
	--	TBL_Service S
	--WHERE
	--	O.CityId=@CityId AND
	--	O.OrganizationId=S.OrganizationId AND
	--	S.DepartmentId=@DepartmentId AND
	--	S.LoginId NOT IN (@SignLoginId) AND
	--	(SELECT COUNT(ServiceId) FROM TBL_Service_Timing WHERE ServiceId=S.ServiceId AND IsDeleted=0 AND AppointmentType IN (1,2)) > 0 AND S.IsDeleted=0 AND S.IsActivated=1
	--GROUP BY S.ServiceName, S.DepartmentId, S.LoginId, O.OrganizationId ORDER BY Min(S.ServiceId)
 END
 ELSE
 BEGIN
	INSERT INTO @SearchResult 
		SELECT
			MIN(D.DoctorId) Id,
			'',
			CASE ISNULL(D.Degrees, '')
				WHEN '' THEN 'Dr. ' + D.DoctorName
				ELSE 'Dr. ' + D.DoctorName + ', ' + ISNULL(D.Degrees, '')
				END [DoctorName],
			(SELECT DepartmentName FROM TBL_Master_Department WHERE DepartmentId=D.DepartmentId) [DepartmentName],
			0,D.LoginId,O.OrganizationId, CASE ISNULL(D.PreferredName, '')
											WHEN '' THEN NULL
											ELSE
											D.PreferredName
											END
		FROM
			TBL_Organization O,
			TBL_Doctor D
		WHERE
			O.StateId=@StateId AND
			O.OrganizationId=D.OrganizationId AND
			O.IsActivated = 1 AND
			D.DepartmentId=@DepartmentId AND
			D.LoginId NOT IN (@SignLoginId) AND
			(SELECT COUNT(DoctorId) FROM TBL_Doctor_Timing WHERE DoctorId=D.DoctorId AND IsDeleted=0 AND AppointmentType IN (1,2)) > 0 AND D.IsDeleted=0 AND D.IsActivated=1
		GROUP BY D.DoctorName, D.Degrees, D.DepartmentId, D.LoginId, O.OrganizationId, D.PreferredName ORDER BY Min(D.DoctorId)

	--INSERT INTO @SearchResult 
	--SELECT
	--	MIN(S.ServiceId) Id,
	--	'',
	--	S.ServiceName,
	--	(SELECT DepartmentName FROM TBL_Master_Department WHERE DepartmentId=S.DepartmentId) [DepartmentName],
	--	1, S.LoginId,O.OrganizationId,Null
	--FROM
	--	TBL_Organization O,
	--	TBL_Service S
	--WHERE
	--	O.StateId=@StateId AND
	--	O.OrganizationId=S.OrganizationId AND
	--	S.DepartmentId=@DepartmentId AND
	--	S.LoginId NOT IN (@SignLoginId) AND
	--	(SELECT COUNT(ServiceId) FROM TBL_Service_Timing WHERE ServiceId=S.ServiceId AND IsDeleted=0 AND AppointmentType IN (1,2)) > 0 AND S.IsDeleted=0 AND S.IsActivated=1
	--GROUP BY S.ServiceName, S.DepartmentId, S.LoginId, O.OrganizationId ORDER BY Min(S.ServiceId)
 END
END
ELSE
BEGIN
 IF @CityId != 0
 BEGIN
	INSERT INTO @SearchResult 
		SELECT
			MIN(D.DoctorId) Id,
			'',
			CASE ISNULL(D.Degrees, '')
				WHEN '' THEN 'Dr. ' + D.DoctorName
				ELSE 'Dr. ' + D.DoctorName + ', ' + ISNULL(D.Degrees, '')
				END [DoctorName],
			(SELECT DepartmentName FROM TBL_Master_Department WHERE DepartmentId=D.DepartmentId) [DepartmentName],
			0, D.LoginId,O.OrganizationId, CASE ISNULL(D.PreferredName, '')
											WHEN '' THEN NULL
											ELSE
											D.PreferredName
											END
		FROM
			TBL_Organization O,
			TBL_Doctor D
		WHERE
			O.CityId=@CityId AND
			O.OrganizationId=D.OrganizationId AND
			O.IsActivated = 1 AND
			D.DepartmentId=@DepartmentId AND
			D.LoginId NOT IN (@SignLoginId) AND
			O.PostalCode=@Postalcode AND			
			(SELECT COUNT(DoctorId) FROM TBL_Doctor_Timing WHERE DoctorId=D.DoctorId AND IsDeleted=0 AND AppointmentType IN (1,2)) > 0 AND D.IsDeleted=0 AND D.IsActivated=1
		GROUP BY D.DoctorName, D.Degrees, D.DepartmentId, D.LoginId, O.OrganizationId, D.PreferredName ORDER BY Min(D.DoctorId)

	--INSERT INTO @SearchResult 
	--SELECT
	--	MIN(S.ServiceId) Id,
	--	'',
	--	S.ServiceName,
	--	(SELECT DepartmentName FROM TBL_Master_Department WHERE DepartmentId=S.DepartmentId) [DepartmentName],
	--	1, S.LoginId,O.OrganizationId,NULL
	--FROM
	--	TBL_Organization O,
	--	TBL_Service S
	--WHERE
	--	O.CityId=@CityId AND
	--	O.OrganizationId=S.OrganizationId AND
	--	S.DepartmentId=@DepartmentId AND
	--	S.LoginId NOT IN (@SignLoginId) AND
	--	O.PostalCode=@Postalcode AND		
	--	(SELECT COUNT(ServiceId) FROM TBL_Service_Timing WHERE ServiceId=S.ServiceId AND IsDeleted=0 AND AppointmentType IN (1,2)) > 0 AND S.IsDeleted=0 AND S.IsActivated=1
	--GROUP BY S.ServiceName, S.DepartmentId, S.LoginId, O.OrganizationId ORDER BY Min(S.ServiceId)
 END
 ELSE
 BEGIN
	INSERT INTO @SearchResult 
		SELECT
			MIN(D.DoctorId) Id,
			'',
			CASE ISNULL(D.Degrees, '')
				WHEN '' THEN 'Dr. ' + D.DoctorName
				ELSE 'Dr. ' + D.DoctorName + ', ' + ISNULL(D.Degrees, '')
				END [DoctorName],
			(SELECT DepartmentName FROM TBL_Master_Department WHERE DepartmentId=D.DepartmentId) [DepartmentName],
			0, D.LoginId,O.OrganizationId, CASE ISNULL(D.PreferredName, '')
											WHEN '' THEN NULL
											ELSE
											D.PreferredName
											END
		FROM
			TBL_Organization O,
			TBL_Doctor D
		WHERE
			O.StateId=@StateId AND
			O.OrganizationId=D.OrganizationId AND
			O.IsActivated = 1 AND
			D.DepartmentId=@DepartmentId AND
			D.LoginId NOT IN (@SignLoginId) AND
			O.PostalCode=@Postalcode AND			
			(SELECT COUNT(DoctorId) FROM TBL_Doctor_Timing WHERE DoctorId=D.DoctorId AND IsDeleted=0 AND AppointmentType IN (1,2)) > 0 AND D.IsDeleted=0 AND D.IsActivated=1
		GROUP BY D.DoctorName, D.Degrees, D.DepartmentId, D.LoginId, O.OrganizationId, D.PreferredName ORDER BY Min(D.DoctorId)

	--INSERT INTO @SearchResult 
	--SELECT
	--	MIN(S.ServiceId) Id,
	--	'',
	--	S.ServiceName,
	--	(SELECT DepartmentName FROM TBL_Master_Department WHERE DepartmentId=S.DepartmentId) [DepartmentName],
	--	1, S.LoginId,O.OrganizationId,NULL
	--FROM
	--	TBL_Organization O,
	--	TBL_Service S
	--WHERE
	--	O.StateId=@StateId AND
	--	O.OrganizationId=S.OrganizationId AND
	--	S.DepartmentId=@DepartmentId AND
	--	S.LoginId NOT IN (@SignLoginId) AND
	--	O.PostalCode=@Postalcode AND		
	--	(SELECT COUNT(ServiceId) FROM TBL_Service_Timing WHERE ServiceId=S.ServiceId AND IsDeleted=0 AND AppointmentType IN (1,2)) > 0 AND S.IsDeleted=0 AND S.IsActivated=1
	--GROUP BY S.ServiceName, S.DepartmentId, S.LoginId, O.OrganizationId ORDER BY Min(S.ServiceId)
 END
END

INSERT INTO @SearchResultSpeciality(Id, DepartmentName, Name, Type, LoginId, SubDomain)   --FOR GROUPING THE DOCOTORS OF SAME LOGINID
			SELECT  MIN(Id), DepartmentName, Name, Type, LoginId, SubDomain  
			FROM @SearchResult
			GROUP BY DepartmentName, Name, Type, LoginId, SubDomain ORDER BY Name

SELECT * FROM @SearchResultSpeciality 
DECLARE @OrganizationIds varchar(100)
SELECT  @OrganizationIds = COALESCE(@OrganizationIds + ',', '') + CAST(OrganizationId AS varchar(100)) FROM @SearchResult  ORDER BY OrganizationId
SELECT @OrganizationIds as OrganizationIds

END
GO

/****** Object:  StoredProcedure [dbo].[USP_Search_GetSpecialityByHospital]    Script Date: 07/13/2012 18:11:07 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Search_GetSpecialityByHospital]   
(
	@StateId INT,
	@CityId INT,
	@DepartmentId INT,
	@Postalcode NVARCHAR(MAX)
)
AS
BEGIN
DECLARE @SearchResult TABLE
(
	OrganizationId INT,
	OrganizationName NVARCHAR(1000),
	SubDomain NVARCHAR(250)
)

IF @Postalcode = '0'
BEGIN
 IF @CityId!=0
 BEGIN
	INSERT INTO @SearchResult 
		SELECT
			O.OrganizationId,
			UPPER(O.OrganizationName) + ' - ' + UPPER(O.BranchName) + ' (' + (SELECT CityName FROM TBL_GeoPostcodes_City WHERE CityId=O.CityId) + ')',
			O.SubDomain
		FROM
			TBL_Organization O,
			TBL_Doctor D,
			TBL_Doctor_Timing DT
		WHERE
			O.IsDeleted=0 AND
			O.CityId=@CityId AND
			O.OrganizationId=D.OrganizationId AND
			D.DepartmentId=@DepartmentId AND D.IsDeleted=0 AND D.IsActivated=1 AND
			DT.DoctorId = D.DoctorId AND DT.IsDeleted=0 AND DT.AppointmentType IN (1,2)

	INSERT INTO @SearchResult 
		SELECT
			O.OrganizationId,
			UPPER(O.OrganizationName) + ' - ' + UPPER(O.BranchName) + ' (' + (SELECT CityName FROM TBL_GeoPostcodes_City WHERE CityId=O.CityId) + ')',
			O.SubDomain
		FROM
			TBL_Organization O,
			TBL_Service S,
			TBL_Service_Timing ST
		WHERE
			O.IsDeleted=0 AND
			O.CityId=@CityId AND
			O.OrganizationId=S.OrganizationId AND
			S.DepartmentId=@DepartmentId AND S.IsDeleted=0 AND S.IsActivated=1 AND
			ST.ServiceId = S.ServiceId AND ST.IsDeleted=0 AND ST.AppointmentType IN (1,2)
 END
 ELSE
 BEGIN
	INSERT INTO @SearchResult 
		SELECT
			O.OrganizationId,
			UPPER(O.OrganizationName) + ' - ' + UPPER(O.BranchName) + ' (' + (SELECT StateName FROM TBL_GeoPostcodes_State WHERE StateId=O.StateId) + ')',
			O.SubDomain
		FROM
			TBL_Organization O,
			TBL_Doctor D,
			TBL_Doctor_Timing DT
		WHERE
			O.IsDeleted=0 AND
			O.StateId=@StateId AND
			O.OrganizationId=D.OrganizationId AND
			D.DepartmentId=@DepartmentId AND D.IsDeleted=0 AND D.IsActivated=1 AND
			DT.DoctorId = D.DoctorId AND DT.IsDeleted=0 AND DT.AppointmentType IN (1,2)

	INSERT INTO @SearchResult 
		SELECT
			O.OrganizationId,
			UPPER(O.OrganizationName) + ' - ' + UPPER(O.BranchName) + ' (' + (SELECT StateName FROM TBL_GeoPostcodes_State WHERE StateId=O.StateId) + ')',
			O.SubDomain
		FROM
			TBL_Organization O,
			TBL_Service S,
			TBL_Service_Timing ST
		WHERE
			O.IsDeleted=0 AND
			O.StateId=@StateId AND
			O.OrganizationId=S.OrganizationId AND
			S.DepartmentId=@DepartmentId AND S.IsDeleted=0 AND S.IsActivated=1 AND
			ST.ServiceId = S.ServiceId AND ST.IsDeleted=0 AND ST.AppointmentType IN (1,2)
 END
END
ELSE
BEGIN
 IF @CityId!=0
 BEGIN
	INSERT INTO @SearchResult 
		SELECT
			O.OrganizationId,
			UPPER(O.OrganizationName) + ' - ' + UPPER(O.BranchName) + ' (' + (SELECT CityName FROM TBL_GeoPostcodes_City WHERE CityId=O.CityId) + ')',
			O.SubDomain
		FROM
			TBL_Organization O,
			TBL_Doctor D,
			TBL_Doctor_Timing DT
		WHERE
			O.IsDeleted=0 AND
			O.CityId=@CityId AND
			O.OrganizationId=D.OrganizationId AND
			D.DepartmentId=@DepartmentId AND
			O.PostalCode=@Postalcode AND D.IsDeleted=0 AND D.IsActivated=1 AND
			DT.DoctorId = D.DoctorId AND DT.IsDeleted=0 AND DT.AppointmentType IN (1,2)

	INSERT INTO @SearchResult 
		SELECT
			O.OrganizationId,
			UPPER(O.OrganizationName) + ' - ' + UPPER(O.BranchName) + ' (' + (SELECT CityName FROM TBL_GeoPostcodes_City WHERE CityId=O.CityId) + ')',
			O.SubDomain
		FROM
			TBL_Organization O,
			TBL_Service S,
			TBL_Service_Timing ST
		WHERE
			O.IsDeleted=0 AND
			O.CityId=@CityId AND
			O.OrganizationId=S.OrganizationId AND
			S.DepartmentId=@DepartmentId AND
			O.PostalCode=@Postalcode AND S.IsDeleted=0 AND S.IsActivated=1	AND
			ST.ServiceId = S.ServiceId AND ST.IsDeleted=0 AND ST.AppointmentType IN (1,2)
 END
 ELSE
 BEGIN
	INSERT INTO @SearchResult 
		SELECT
			O.OrganizationId,
			UPPER(O.OrganizationName) + ' - ' + UPPER(O.BranchName) + ' (' + (SELECT StateName FROM TBL_GeoPostcodes_State WHERE StateId=O.StateId) + ')',
			O.SubDomain
		FROM
			TBL_Organization O,
			TBL_Doctor D,
			TBL_Doctor_Timing DT
		WHERE
			O.IsDeleted=0 AND
			O.StateId=@StateId AND
			O.OrganizationId=D.OrganizationId AND
			D.DepartmentId=@DepartmentId AND
			O.PostalCode=@Postalcode AND D.IsDeleted=0 AND D.IsActivated=1 AND
			DT.DoctorId = D.DoctorId AND DT.IsDeleted=0 AND DT.AppointmentType IN (1,2)

	INSERT INTO @SearchResult 
		SELECT
			O.OrganizationId,
			UPPER(O.OrganizationName) + ' - ' + UPPER(O.BranchName) + ' (' + (SELECT StateName FROM TBL_GeoPostcodes_State WHERE StateId=O.StateId) + ')',
			O.SubDomain
		FROM
			TBL_Organization O,
			TBL_Service S,
			TBL_Service_Timing ST
		WHERE
			O.IsDeleted=0 AND
			O.StateId=@StateId AND
			O.OrganizationId=S.OrganizationId AND
			S.DepartmentId=@DepartmentId AND
			O.PostalCode=@Postalcode AND S.IsDeleted=0 AND S.IsActivated=1 AND
			ST.ServiceId = S.ServiceId AND ST.IsDeleted=0 AND ST.AppointmentType IN (1,2)
 END
END

SELECT DISTINCT * FROM @SearchResult GROUP BY OrganizationId, OrganizationName, SubDomain

DECLARE @OrganizationIds varchar(100)
SELECT  @OrganizationIds = COALESCE(@OrganizationIds + ',', '') + CAST(OrganizationId AS varchar(100)) FROM @SearchResult  ORDER BY OrganizationId
SELECT @OrganizationIds as OrganizationIds

END
GO

/****** Object:  StoredProcedure [dbo].[USP_Search_GetState]    Script Date: 07/13/2012 18:11:07 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Search_GetState] 
(
	@CountryId int
)
AS
BEGIN
	--SELECT StateId, StateName FROM TBL_Master_State WHERE CountryId=@CountryId AND StateId IN (SELECT StateId FROM TBL_Organization) ORDER BY StateName
	
	DECLARE @CountryCode NVARCHAR(2)
	SELECT @CountryCode=CountryCode FROM TBL_GeoPostcodes_Country WHERE CountryId=@CountryId
	
	IF (@CountryCode = 'AL') or (@CountryCode = 'AZ') or (@CountryCode = 'BD') or (@CountryCode = 'BE') or (@CountryCode = 'BR') or (@CountryCode = 'GB') or (@CountryCode = 'TH') or (@CountryCode = 'FR') or (@CountryCode = 'GR') or (@CountryCode = 'HU') or (@CountryCode = 'IE') or (@CountryCode = 'IT') or (@CountryCode = 'JP') or (@CountryCode = 'MK') or (@CountryCode = 'MV') or (@CountryCode = 'MT') or (@CountryCode = 'MN') or (@CountryCode = 'MA') or (@CountryCode = 'MZ') or (@CountryCode = 'NP') or (@CountryCode = 'NO')
		or (@CountryCode = 'PH') or (@CountryCode = 'PT') or (@CountryCode = 'RO')
		or (@CountryCode = 'RU') or (@CountryCode = 'RS') or (@CountryCode = 'SI')
		or (@CountryCode = 'ES') or (@CountryCode = 'LK') or (@CountryCode = 'TR')
		or (@CountryCode = 'VE') or (@CountryCode = 'VN') 
		SELECT CityId, CityName
		FROM
			TBL_GeoPostcodes_City
		WHERE
			CountryCode=@CountryCode AND CityName IS NOT NULL AND (CityId IN (SELECT DISTINCT CityId FROM TBL_Organization) OR CityId IN (SELECT DISTINCT CityId FROM TBL_Patient)) ORDER BY CityName
	ELSE 
		SELECT StateId, StateName FROM TBL_GeoPostcodes_State WHERE CountryCode=(SELECT CountryCode FROM TBL_GeoPostcodes_Country WHERE CountryId=@CountryId) AND (StateId IN (SELECT DISTINCT StateId FROM TBL_Organization) OR StateId IN (SELECT DISTINCT StateId FROM TBL_Patient)) ORDER BY StateName
END

GO

/****** Object:  StoredProcedure [dbo].[USP_Search_GetSymptom]    Script Date: 07/13/2012 18:11:07 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Search_GetSymptom]  
(
	@StateID INT,
	@CityId INT,
	@SymptomIds VARCHAR(MAX),
	@Postalcode NVARCHAR(MAX),
	@SignLoginId INT
)
AS
BEGIN

DECLARE @SearchResultSymptom TABLE
(
	Id INT,
	OrganizationName NVARCHAR(1000),
	Name NVARCHAR(MAX),
	DepartmentName NVARCHAR(MAX),
	Type INT,
	OrganizationId INT,
	LoginId INT,
	SubDomain NVARCHAR(250)
)

DECLARE @SearchResult TABLE
(
	Id INT,
	OrganizationName NVARCHAR(1000),
	Name NVARCHAR(MAX),
	DepartmentName NVARCHAR(MAX),
	Type INT,
	OrganizationId INT,
	LoginId INT,
	SubDomain NVARCHAR(250)
)

IF @Postalcode = '0'
BEGIN
 IF @CityId != 0
 BEGIN
	INSERT INTO @SearchResultSymptom 
	SELECT
		MIN(D.DoctorId) Id,
		'',
		CASE ISNULL(D.Degrees, '')
		WHEN '' THEN 'Dr. ' + D.DoctorName
		ELSE
		'Dr. ' + D.DoctorName + ', ' + ISNULL(D.Degrees, '')
		END
		[DoctorName],
		(SELECT DepartmentName FROM TBL_Master_Department WHERE DepartmentId=D.DepartmentId) [DepartmentName],
		0,O.OrganizationId, D.LoginId, CASE ISNULL(D.PreferredName, '')
											WHEN '' THEN NULL
											ELSE
											D.PreferredName
											END
	FROM
		TBL_Organization O,
		TBL_Doctor D
	WHERE
		O.CityId=@CityId AND
		O.OrganizationId=D.OrganizationId AND
		D.DoctorId IN (
			SELECT DoctorId FROM TBL_Doctor_Diagnosis
			WHERE DiagnosisId IN (
				SELECT DiagnosisId FROM TBL_Symptom_Diagnosis
				WHERE SymptomId IN (SELECT ColumnId FROM UFN_SplitCommaSeparatedValues(@SymptomIds))
			)
		) AND 
		D.LoginId NOT IN (@SignLoginId) AND
		(SELECT COUNT(DoctorId) FROM TBL_Doctor_Timing WHERE DoctorId=D.DoctorId AND IsDeleted=0 AND AppointmentType IN (1,2) ) > 0 AND D.IsDeleted=0 AND D.IsActivated=1 --only for web appointment type(1-web, 2-both)
	GROUP BY D.DoctorName, D.Degrees, D.DepartmentId, O.OrganizationId, D.PreferredName,D.LoginId ORDER BY Min(D.DoctorId)
		
	--INSERT INTO @SearchResultSymptom 
	--SELECT
	--	MIN(S.ServiceId) Id,
	--	'',
	--	S.ServiceName,
	--	(SELECT DepartmentName FROM TBL_Master_Department WHERE DepartmentId=S.DepartmentId) [DepartmentName],
	--	1,O.OrganizationId,NULL
	--FROM
	--	TBL_Organization O,
	--	TBL_Service S
	--WHERE
	--	O.CityId=@CityId AND
	--	O.OrganizationId=S.OrganizationId AND
	--	S.ServiceId IN (
	--		SELECT ServiceId FROM TBL_Service_Diagnosis
	--		WHERE DiagnosisId IN (
	--			SELECT DiagnosisId FROM TBL_Symptom_Diagnosis
	--			WHERE SymptomId IN (SELECT ColumnId FROM UFN_SplitCommaSeparatedValues(@SymptomIds))
	--		)
	--	) AND
	--	S.LoginId NOT IN (@SignLoginId) AND
	--	(SELECT COUNT(ServiceId) FROM TBL_Service_Timing WHERE ServiceId=S.ServiceId AND IsDeleted=0 AND AppointmentType IN (1,2)) > 0 AND S.IsDeleted=0 AND S.IsActivated=1
	--GROUP BY S.ServiceName, S.DepartmentId, O.OrganizationId ORDER BY Min(S.ServiceId)
 END
 ELSE
 BEGIN
	INSERT INTO @SearchResultSymptom 
	SELECT
		MIN(D.DoctorId) Id,
		'',
		CASE ISNULL(D.Degrees, '')
			WHEN '' THEN 'Dr. ' + D.DoctorName
			ELSE
			'Dr. ' + D.DoctorName + ', ' + ISNULL(D.Degrees, '')
		END
		[DoctorName],
		(SELECT DepartmentName FROM TBL_Master_Department WHERE DepartmentId=D.DepartmentId) [DepartmentName],
		0,O.OrganizationId, D.LoginId, CASE ISNULL(D.PreferredName, '')
											WHEN '' THEN NULL
											ELSE
											D.PreferredName
											END
	FROM
		TBL_Organization O,
		TBL_Doctor D
	WHERE
		O.StateId=@StateID AND
		O.OrganizationId=D.OrganizationId AND
		D.DoctorId IN (
			SELECT DoctorId FROM TBL_Doctor_Diagnosis
			WHERE DiagnosisId IN (
				SELECT DiagnosisId FROM TBL_Symptom_Diagnosis
				WHERE SymptomId IN (SELECT ColumnId FROM UFN_SplitCommaSeparatedValues(@SymptomIds))
			)
		) AND 
		D.LoginId NOT IN (@SignLoginId) AND
		(SELECT COUNT(DoctorId) FROM TBL_Doctor_Timing WHERE DoctorId=D.DoctorId AND IsDeleted=0 AND AppointmentType IN (1,2)) > 0 AND D.IsDeleted=0 AND D.IsActivated=1
	GROUP BY D.DoctorName, D.Degrees, D.DepartmentId, O.OrganizationId, D.PreferredName, D.LoginId ORDER BY Min(D.DoctorId)
		
	--INSERT INTO @SearchResultSymptom 
	--SELECT
	--	MIN(S.ServiceId) Id,
	--	'',
	--	S.ServiceName,
	--	(SELECT DepartmentName FROM TBL_Master_Department WHERE DepartmentId=S.DepartmentId) [DepartmentName],
	--	1,O.OrganizationId,NULL
	--FROM
	--	TBL_Organization O,
	--	TBL_Service S
	--WHERE
	--	O.StateId=@StateID AND
	--	O.OrganizationId=S.OrganizationId AND
	--	S.ServiceId IN (
	--		SELECT ServiceId FROM TBL_Service_Diagnosis
	--		WHERE DiagnosisId IN (
	--			SELECT DiagnosisId FROM TBL_Symptom_Diagnosis
	--			WHERE SymptomId IN (SELECT ColumnId FROM UFN_SplitCommaSeparatedValues(@SymptomIds))
	--		)
	--	) AND
	--	S.LoginId NOT IN (@SignLoginId) AND
	--	(SELECT COUNT(ServiceId) FROM TBL_Service_Timing WHERE ServiceId=S.ServiceId AND IsDeleted=0 AND AppointmentType IN (1,2)) > 0 AND S.IsDeleted=0 AND S.IsActivated=1
	--GROUP BY S.ServiceName, S.DepartmentId, O.OrganizationId ORDER BY Min(S.ServiceId)
 END
END
ELSE
BEGIN
 IF @CityId != 0
 BEGIN
	INSERT INTO @SearchResultSymptom 
	SELECT
		MIN(D.DoctorId) Id,
		'',
		CASE ISNULL(D.Degrees, '')
			WHEN '' THEN 'Dr. ' + D.DoctorName
			ELSE
			'Dr. ' + D.DoctorName + ', ' + ISNULL(D.Degrees, '')
		END
		[DoctorName],
		(SELECT DepartmentName FROM TBL_Master_Department WHERE DepartmentId=D.DepartmentId) [DepartmentName],
		0,O.OrganizationId, D.LoginId, CASE ISNULL(D.PreferredName, '')
											WHEN '' THEN NULL
											ELSE
											D.PreferredName
											END
	FROM
		TBL_Organization O,
		TBL_Doctor D
	WHERE
		O.CityId=@CityId AND
		O.OrganizationId=D.OrganizationId AND
		O.PostalCode=@Postalcode AND
		D.DoctorId IN (
			SELECT DoctorId FROM TBL_Doctor_Diagnosis
			WHERE DiagnosisId IN (
				SELECT DiagnosisId FROM TBL_Symptom_Diagnosis
				WHERE SymptomId IN (SELECT ColumnId FROM UFN_SplitCommaSeparatedValues(@SymptomIds))
			)
		) AND 
		D.LoginId NOT IN (@SignLoginId) AND
		(SELECT COUNT(DoctorId) FROM TBL_Doctor_Timing WHERE DoctorId=D.DoctorId AND IsDeleted=0 AND AppointmentType IN (1,2)) > 0 AND D.IsDeleted=0 AND D.IsActivated=1
	GROUP BY D.DoctorName, D.Degrees, D.DepartmentId, O.OrganizationId, D.PreferredName, D.LoginId ORDER BY Min(D.DoctorId)
		
	--INSERT INTO @SearchResultSymptom 
	--SELECT
	--	MIN(S.ServiceId) Id,
	--	'',
	--	S.ServiceName,
	--	(SELECT DepartmentName FROM TBL_Master_Department WHERE DepartmentId=S.DepartmentId) [DepartmentName],
	--	1,O.OrganizationId,NULL
	--FROM
	--	TBL_Organization O,
	--	TBL_Service S
	--WHERE
	--	O.CityId=@CityId AND
	--	O.OrganizationId=S.OrganizationId AND
	--	O.PostalCode=@Postalcode AND
	--	S.ServiceId IN (
	--		SELECT ServiceId FROM TBL_Service_Diagnosis
	--		WHERE DiagnosisId IN (
	--			SELECT DiagnosisId FROM TBL_Symptom_Diagnosis
	--			WHERE SymptomId IN (SELECT ColumnId FROM UFN_SplitCommaSeparatedValues(@SymptomIds))
	--		)
	--	) AND
	--	S.LoginId NOT IN (@SignLoginId) AND
	--	(SELECT COUNT(ServiceId) FROM TBL_Service_Timing WHERE ServiceId=S.ServiceId AND IsDeleted=0 AND AppointmentType IN (1,2)) > 0 AND S.IsDeleted=0 AND S.IsActivated=1
	--GROUP BY S.ServiceName, S.DepartmentId, O.OrganizationId ORDER BY Min(S.ServiceId)
 END
 ELSE
 BEGIN
	INSERT INTO @SearchResultSymptom 
	SELECT
		MIN(D.DoctorId) Id,
		'',
		CASE ISNULL(D.Degrees, '')
			WHEN '' THEN 'Dr. ' + D.DoctorName
			ELSE
			'Dr. ' + D.DoctorName + ', ' + ISNULL(D.Degrees, '')
		END
		[DoctorName],
		(SELECT DepartmentName FROM TBL_Master_Department WHERE DepartmentId=D.DepartmentId) [DepartmentName],
		0,O.OrganizationId, D.LoginId, CASE ISNULL(D.PreferredName, '')
											WHEN '' THEN NULL
											ELSE
											D.PreferredName
											END
	FROM
		TBL_Organization O,
		TBL_Doctor D
	WHERE
		O.StateId=@StateID AND
		O.OrganizationId=D.OrganizationId AND
		O.PostalCode=@Postalcode AND
		D.DoctorId IN (
			SELECT DoctorId FROM TBL_Doctor_Diagnosis
			WHERE DiagnosisId IN (
				SELECT DiagnosisId FROM TBL_Symptom_Diagnosis
				WHERE SymptomId IN (SELECT ColumnId FROM UFN_SplitCommaSeparatedValues(@SymptomIds))
			)
		) AND 
		D.LoginId NOT IN (@SignLoginId) AND
		(SELECT COUNT(DoctorId) FROM TBL_Doctor_Timing WHERE DoctorId=D.DoctorId AND IsDeleted=0 AND AppointmentType IN (1,2)) > 0 AND D.IsDeleted=0 AND D.IsActivated=1
	GROUP BY D.DoctorName, D.Degrees, D.DepartmentId, O.OrganizationId, D.PreferredName, D.LoginId ORDER BY Min(D.DoctorId)
		
	--INSERT INTO @SearchResultSymptom 
	--SELECT
	--	MIN(S.ServiceId) Id,
	--	'',
	--	S.ServiceName,
	--	(SELECT DepartmentName FROM TBL_Master_Department WHERE DepartmentId=S.DepartmentId) [DepartmentName],
	--	1,O.OrganizationId, NULL
	--FROM
	--	TBL_Organization O,
	--	TBL_Service S
	--WHERE
	--	O.StateId=@StateID AND
	--	O.OrganizationId=S.OrganizationId AND
	--	O.PostalCode=@Postalcode AND
	--	S.ServiceId IN (
	--		SELECT ServiceId FROM TBL_Service_Diagnosis
	--		WHERE DiagnosisId IN (
	--			SELECT DiagnosisId FROM TBL_Symptom_Diagnosis
	--			WHERE SymptomId IN (SELECT ColumnId FROM UFN_SplitCommaSeparatedValues(@SymptomIds))
	--		)
	--	) AND
	--	S.LoginId NOT IN (@SignLoginId) AND
	--	(SELECT COUNT(ServiceId) FROM TBL_Service_Timing WHERE ServiceId=S.ServiceId AND IsDeleted=0 AND AppointmentType IN (1,2)) > 0 AND S.IsDeleted=0 AND S.IsActivated=1
	--GROUP BY S.ServiceName, S.DepartmentId, O.OrganizationId ORDER BY Min(S.ServiceId)
 END
END

INSERT INTO @SearchResult(Id, Name, DepartmentName, Type, LoginId, SubDomain)   --FOR GROUPING THE DOCOTORS OF SAME LOGINID
			SELECT  MIN(Id), Name, DepartmentName, Type, LoginId, SubDomain  
			FROM @SearchResultSymptom
			GROUP BY DepartmentName, Name, Type, LoginId, SubDomain ORDER BY Name


SELECT * FROM @SearchResult

DECLARE @OrganizationIds varchar(100)
SELECT  @OrganizationIds = COALESCE(@OrganizationIds + ',', '') + CAST(OrganizationId AS varchar(100)) FROM @SearchResultSymptom  ORDER BY OrganizationId
SELECT @OrganizationIds as OrganizationIds

END
GO

/****** Object:  StoredProcedure [dbo].[USP_Search_GetSymptomByHospital]    Script Date: 07/13/2012 18:11:07 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Search_GetSymptomByHospital]
(
	@stateId INT,
	@CityId INT,
	@SymptomIds VARCHAR(MAX),
	@Postalcode NVARCHAR(MAX)
)
AS
BEGIN

DECLARE @SearchResultSymptom TABLE
(
	OrganizationId INT,
	OrganizationName NVARCHAR(1000),
	SubDomain NVARCHAR(250)
)

IF @Postalcode = '0'
BEGIN
 IF @CityId!=0
 BEGIN
	INSERT INTO @SearchResultSymptom 
	SELECT
		O.OrganizationId,
		UPPER(O.OrganizationName) + ' - ' + UPPER(O.BranchName) + ' (' + (SELECT CityName FROM TBL_GeoPostcodes_City WHERE CityId=O.CityId) + ')',
		O.SubDomain
	FROM
		TBL_Organization O,
		TBL_Doctor D,
		TBL_Doctor_Timing DT
	WHERE
		O.IsDeleted=0 AND
		O.CityId=@CityId AND
		O.OrganizationId=D.OrganizationId AND 
		D.DoctorId IN (
			SELECT DoctorId FROM TBL_Doctor_Diagnosis
			WHERE DiagnosisId IN (
				SELECT DiagnosisId FROM TBL_Symptom_Diagnosis
				WHERE SymptomId IN (SELECT ColumnId FROM UFN_SplitCommaSeparatedValues(@SymptomIds))
			)
		) AND D.IsDeleted=0 AND D.IsActivated=1 AND
		DT.DoctorId = D.DoctorId AND DT.IsDeleted=0 AND DT.AppointmentType IN (1,2)
		
	INSERT INTO @SearchResultSymptom 
	SELECT
		O.OrganizationId,
		UPPER(O.OrganizationName) + ' - ' + UPPER(O.BranchName) + ' (' + (SELECT CityName FROM TBL_GeoPostcodes_City WHERE CityId=O.CityId) + ')',
		O.SubDomain
	FROM
		TBL_Organization O,
		TBL_Service S,
		TBL_Service_Timing ST
	WHERE
		O.IsDeleted=0 AND
		O.CityId=@CityId AND
		O.OrganizationId=S.OrganizationId AND
		S.ServiceId IN (
			SELECT ServiceId FROM TBL_Service_Diagnosis
			WHERE DiagnosisId IN (
				SELECT DiagnosisId FROM TBL_Symptom_Diagnosis
				WHERE SymptomId IN (SELECT ColumnId FROM UFN_SplitCommaSeparatedValues(@SymptomIds))
			)
		) AND S.IsDeleted=0 AND S.IsActivated=1 AND
		ST.ServiceId = S.ServiceId AND ST.IsDeleted=0 AND ST.AppointmentType IN (1,2)
 END
 ELSE
 BEGIN
	INSERT INTO @SearchResultSymptom 
	SELECT
		O.OrganizationId,
		UPPER(O.OrganizationName)+ ' - ' + UPPER(O.BranchName) + ' (' + (SELECT StateName FROM TBL_GeoPostcodes_State WHERE StateId=O.StateId) + ')',
		O.SubDomain
	FROM
		TBL_Organization O,
		TBL_Doctor D,
		TBL_Doctor_Timing DT
	WHERE
		O.IsDeleted=0 AND
		O.StateId=@stateId AND
		O.OrganizationId=D.OrganizationId AND 
		D.DoctorId IN (
			SELECT DoctorId FROM TBL_Doctor_Diagnosis
			WHERE DiagnosisId IN (
				SELECT DiagnosisId FROM TBL_Symptom_Diagnosis
				WHERE SymptomId IN (SELECT ColumnId FROM UFN_SplitCommaSeparatedValues(@SymptomIds))
			)
		) AND D.IsDeleted=0 AND D.IsActivated=1 AND
		DT.DoctorId = D.DoctorId AND DT.IsDeleted=0 AND DT.AppointmentType IN (1,2)
		
	INSERT INTO @SearchResultSymptom 
	SELECT
		O.OrganizationId,
		UPPER(O.OrganizationName)+ ' - ' + UPPER(O.BranchName) + ' (' + (SELECT StateName FROM TBL_GeoPostcodes_State WHERE StateId=O.StateId) + ')',
		O.SubDomain
	FROM
		TBL_Organization O,
		TBL_Service S,
		TBL_Service_Timing ST
	WHERE
		O.IsDeleted=0 AND
		O.StateId=@stateId AND
		O.OrganizationId=S.OrganizationId AND
		S.ServiceId IN (
			SELECT ServiceId FROM TBL_Service_Diagnosis
			WHERE DiagnosisId IN (
				SELECT DiagnosisId FROM TBL_Symptom_Diagnosis
				WHERE SymptomId IN (SELECT ColumnId FROM UFN_SplitCommaSeparatedValues(@SymptomIds))
			)
		) AND S.IsDeleted=0 AND S.IsActivated=1 AND
		ST.ServiceId = S.ServiceId AND ST.IsDeleted=0 AND ST.AppointmentType IN (1,2)
 END
END
ELSE
BEGIN
 IF @CityId!=0
 BEGIN
	INSERT INTO @SearchResultSymptom 
	SELECT
		O.OrganizationId,
		UPPER(O.OrganizationName)+ ' - ' + UPPER(O.BranchName) + ' (' + (SELECT CityName FROM TBL_GeoPostcodes_City WHERE CityId=O.CityId) + ')',
		O.SubDomain
	FROM
		TBL_Organization O,
		TBL_Doctor D,
		TBL_Doctor_Timing DT
	WHERE
		O.IsDeleted=0 AND
		O.CityId=@CityId AND
		O.OrganizationId=D.OrganizationId AND
		O.PostalCode=@Postalcode AND
		D.DoctorId IN (
			SELECT DoctorId FROM TBL_Doctor_Diagnosis
			WHERE DiagnosisId IN (
				SELECT DiagnosisId FROM TBL_Symptom_Diagnosis
				WHERE SymptomId IN (SELECT ColumnId FROM UFN_SplitCommaSeparatedValues(@SymptomIds))
			)
		) AND D.IsDeleted=0 AND D.IsActivated=1 AND
		DT.DoctorId = D.DoctorId AND DT.IsDeleted=0 AND DT.AppointmentType IN (1,2)
		
	INSERT INTO @SearchResultSymptom 
	SELECT
		O.OrganizationId,
		UPPER(O.OrganizationName) + ' - ' + UPPER(O.BranchName) + ' (' + (SELECT CityName FROM TBL_GeoPostcodes_City WHERE CityId=O.CityId) + ')',
		O.SubDomain
	FROM
		TBL_Organization O,
		TBL_Service S,
		TBL_Service_Timing ST
	WHERE
		O.IsDeleted=0 AND
		O.CityId=@CityId AND
		O.OrganizationId=S.OrganizationId AND
		O.PostalCode=@Postalcode AND
		S.ServiceId IN (
			SELECT ServiceId FROM TBL_Service_Diagnosis
			WHERE DiagnosisId IN (
				SELECT DiagnosisId FROM TBL_Symptom_Diagnosis
				WHERE SymptomId IN (SELECT ColumnId FROM UFN_SplitCommaSeparatedValues(@SymptomIds))
			)
		) AND S.IsDeleted=0 AND S.IsActivated=1 AND
		ST.ServiceId = S.ServiceId AND ST.IsDeleted=0 AND ST.AppointmentType IN (1,2)
 END
 ELSE
 BEGIN
	INSERT INTO @SearchResultSymptom 
	SELECT
		O.OrganizationId,
		UPPER(O.OrganizationName)+ ' - ' + UPPER(O.BranchName) + ' (' + (SELECT StateName FROM TBL_GeoPostcodes_State WHERE StateId=O.StateId) + ')',
		O.SubDomain
	FROM
		TBL_Organization O,
		TBL_Doctor D,
		TBL_Doctor_Timing DT
	WHERE
		O.IsDeleted=0 AND
		O.StateId=@stateId AND
		O.OrganizationId=D.OrganizationId AND
		O.PostalCode=@Postalcode AND
		D.DoctorId IN (
			SELECT DoctorId FROM TBL_Doctor_Diagnosis
			WHERE DiagnosisId IN (
				SELECT DiagnosisId FROM TBL_Symptom_Diagnosis
				WHERE SymptomId IN (SELECT ColumnId FROM UFN_SplitCommaSeparatedValues(@SymptomIds))
			)
		) AND D.IsDeleted=0 AND D.IsActivated=1 AND
		DT.DoctorId = D.DoctorId AND DT.IsDeleted=0 AND DT.AppointmentType IN (1,2)
		
	INSERT INTO @SearchResultSymptom 
	SELECT
		O.OrganizationId,
		UPPER(O.OrganizationName)+ ' - ' + UPPER(O.BranchName) + ' (' + (SELECT StateName FROM TBL_GeoPostcodes_State WHERE StateId=O.StateId) + ')',
		O.SubDomain
	FROM
		TBL_Organization O,
		TBL_Service S,
		TBL_Service_Timing ST
	WHERE
		O.IsDeleted=0 AND
		O.StateId=@stateId AND
		O.OrganizationId=S.OrganizationId AND
		O.PostalCode=@Postalcode AND
		S.ServiceId IN (
			SELECT ServiceId FROM TBL_Service_Diagnosis
			WHERE DiagnosisId IN (
				SELECT DiagnosisId FROM TBL_Symptom_Diagnosis
				WHERE SymptomId IN (SELECT ColumnId FROM UFN_SplitCommaSeparatedValues(@SymptomIds))
			)
		) AND S.IsDeleted=0 AND S.IsActivated=1 AND
		ST.ServiceId = S.ServiceId AND ST.IsDeleted=0 AND ST.AppointmentType IN (1,2)
 END
END
	
SELECT * FROM @SearchResultSymptom GROUP BY OrganizationId, OrganizationName, SubDomain

DECLARE @OrganizationIds varchar(100)
SELECT  @OrganizationIds = COALESCE(@OrganizationIds + ',', '') + CAST(OrganizationId AS varchar(100)) FROM @SearchResultSymptom ORDER BY OrganizationId
SELECT @OrganizationIds as OrganizationIds

END
GO

/****** Object:  StoredProcedure [dbo].[USP_Search_GetSymptomIdBySymptom]    Script Date: 07/13/2012 18:11:07 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Search_GetSymptomIdBySymptom]
(
	@Symptoms VARCHAR(MAX)
)
AS
BEGIN
	DECLARE @query NVARCHAR(MAX);
	SET @query = 'SELECT SymptomId FROM TBL_Master_Symptom WHERE ' + @Symptoms
	print @query
	EXECUTE sp_executesql @query
END

GO

/****** Object:  StoredProcedure [dbo].[USP_SelectDepartmentByClient]    Script Date: 07/13/2012 18:11:07 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[USP_SelectDepartmentByClient]
@did INT
AS
BEGIN
SELECT Distinct J.ClientId,O.OrganizationName FROM TBL_Job_Jobs J JOIN TBL_Organization O ON O.OrganizationId=J.ClientId WHERE J.Speciality=@did AND J.Visibility=1 AND O.IsDeleted=0 AND O.IsActivated=1
END


GO

/****** Object:  StoredProcedure [dbo].[USP_Service_Acceptance]    Script Date: 07/13/2012 18:11:07 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Service_Acceptance]
(
	@ServiceId INT
)
AS
BEGIN
	SELECT COUNT(ServiceId) FROM TBL_Service WHERE ServiceId=@ServiceId AND IsActivated=1
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Service_DeleteScheduleById]    Script Date: 07/13/2012 18:11:08 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Service_DeleteScheduleById]
(
	@ServiceTimingId INT
)
AS
BEGIN
	UPDATE TBL_Service_Timing SET
		IsDeleted=1,
		ModifiedOn=GETDATE()
	WHERE
		ServiceTimingId=@ServiceTimingId
		
	UPDATE TBL_BlockCalendar SET
		IsDeleted=1
	WHERE
		ServiceTimingId=@ServiceTimingId
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Service_DeleteServiceById]    Script Date: 07/13/2012 18:11:08 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Service_DeleteServiceById] 
(
	@ServiceId INT
)
AS
BEGIN

DECLARE @Count INT

SELECT 
	@Count = COUNT(LoginId) 
FROM 
	TBL_Service 
WHERE 
	LoginId = (SELECT LoginId FROM TBL_Service WHERE ServiceId=@ServiceId) AND IsDeleted=0
	
UPDATE TBL_Service SET
	IsDeleted=1,
	ModifiedOn=GETDATE()
WHERE
	ServiceId=@ServiceId
	
UPDATE TBL_Service_Timing SET
	IsDeleted=1,
	ModifiedOn=GETDATE()
WHERE
	ServiceId=@ServiceId
	
DELETE FROM dbo.TBL_Service_Diagnosis WHERE ServiceId=@ServiceId
	
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Service_GetBlockCalendarBySearch]    Script Date: 07/13/2012 18:11:08 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Service_GetBlockCalendarBySearch]
(
	@Search NVARCHAR(250),
	@ServiceId INT
)
AS
BEGIN
	SELECT 
			BC.BlockId,
			BC.ServiceId,
			ST.Address,
			ST.StartTime + ' - ' + ST.EndTime [Timing],
			BlockType=CASE BC.BlockTypeId
				WHEN 1 THEN 'Block by Date'
				WHEN 2 THEN 'Block by Date & Time'
			END,
			BC.Type,
			BC.BlockStart,
			BC.BlockEnd,
			BC.Reason,
			BC.CreatedOn
		FROM
			TBL_BlockCalendar BC,
			TBL_Service_Timing ST
		WHERE
		BC.IsDeleted=0 AND
		BC.ServiceTimingId=ST.ServiceTimingId AND
		BC.ServiceId=@ServiceId AND
		(
			ST.Address LIKE '%' + @Search + '%' OR
			ST.StartTime LIKE '%' + @Search + '%' OR
			ST.EndTime LIKE '%' + @Search + '%'
		) AND BC.IsDeleted = 0
		ORDER BY ST.ServiceTimingId
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Service_GetScheduleById]    Script Date: 07/13/2012 18:11:08 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Service_GetScheduleById]
(
	@ServiceTimingId INT
)
AS
BEGIN
	SELECT * FROM
		TBL_Service_Timing
	WHERE
		--IsDeleted=0 AND
		ServiceTimingId=@ServiceTimingId
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Service_GetScheduleBySearch]    Script Date: 07/13/2012 18:11:08 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Service_GetScheduleBySearch]
(
	@Search NVARCHAR(250),
	@ServiceId INT
)
AS
SELECT 
	ST.ServiceTimingId,
	S.ServiceId,
	S.ServiceName,
	ST.ScheduleName,
	ST.Address,
	ST.Sunday,
	ST.Monday,
	ST.Tuesday,
	ST.Wednesday,
	ST.Thursday,
	ST.Friday,
	ST.Saturday,
	ST.StartTime,
	ST.EndTime,
	ST.PatientDuration,
	IsApprovalSystem = CASE ST.IsApprovalSystem WHEN 0 THEN 'No' WHEN 1 THEN 'Yes' END,
	IsFCFS = CASE ST.IsFCFS WHEN 0 THEN 'No' WHEN 1 THEN 'Yes' END,
	ST.MaxApps
FROM
	TBL_Service S,
	TBL_Service_Timing ST
WHERE
S.ServiceId=@ServiceId AND
S.ServiceId=ST.ServiceId AND
(SELECT COUNT(OrganizationId) FROM TBL_Organization WHERE OrganizationId=S.OrganizationId AND IsActivated = 1) > 0 AND
S.IsDeleted=0 AND
ST.IsDeleted=0 AND
(
	ST.Address LIKE '%' + @Search + '%' OR
	ST.ScheduleName LIKE '%' + @Search + '%'
)
ORDER BY S.ServiceName
GO

/****** Object:  StoredProcedure [dbo].[USP_Service_GetScheduleBySearchWithoutOrganizationVerification]    Script Date: 07/13/2012 18:11:08 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Service_GetScheduleBySearchWithoutOrganizationVerification]
(
	@Search NVARCHAR(250),
	@ServiceId INT
)
AS
SELECT 
	ST.ServiceTimingId,
	S.ServiceId,
	S.ServiceName,
	ST.ScheduleName,
	ST.Address,
	ST.Sunday,
	ST.Monday,
	ST.Tuesday,
	ST.Wednesday,
	ST.Thursday,
	ST.Friday,
	ST.Saturday,
	ST.StartTime,
	ST.EndTime,
	ST.PatientDuration,
	IsApprovalSystem = CASE ST.IsApprovalSystem WHEN 0 THEN 'No' WHEN 1 THEN 'Yes' END,
	IsFCFS = CASE ST.IsFCFS WHEN 0 THEN 'No' WHEN 1 THEN 'Yes' END,
	ST.MaxApps
FROM
	TBL_Service S,
	TBL_Service_Timing ST
WHERE
S.ServiceId=@ServiceId AND
S.ServiceId=ST.ServiceId AND
S.IsDeleted=0 AND
ST.IsDeleted=0 AND
(
	ST.Address LIKE '%' + @Search + '%' OR
	ST.ScheduleName LIKE '%' + @Search + '%'
)
ORDER BY S.ServiceName
GO

/****** Object:  StoredProcedure [dbo].[USP_Service_GetService]    Script Date: 07/13/2012 18:11:08 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Service_GetService]
(
	@SignInId nvarchar(250)
)
AS
BEGIN
	SELECT L.*, S.* FROM
		TBL_Login L,
		TBL_Service S
	WHERE
		L.IsDeleted=0 AND
		(L.EmailId=@SignInId OR L.MedAppId=@SignInId OR L.MobileId=@SignInId) AND
		S.LoginId=L.LoginId
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Service_GetServiceByEmailId]    Script Date: 07/13/2012 18:11:08 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Service_GetServiceByEmailId] 
(
	@SignInId NVARCHAR(25)
)
AS
BEGIN
	SELECT COUNT(LoginId) FROM TBL_Service WHERE LoginId IN (SELECT LoginId FROM TBL_Login WHERE IsDeleted=0 AND (EmailId=@SignInId OR MobileId=@SignInId)) AND IsDeleted=0 AND IsActivated=1
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Service_GetServiceById]    Script Date: 07/13/2012 18:11:08 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Service_GetServiceById]
(
	@ServiceId INT
)
AS
BEGIN
	SELECT L.*, S.* FROM
		TBL_Login L,
		TBL_Service S
	WHERE
		S.IsDeleted=0 AND
		S.ServiceId=@ServiceId AND
		S.LoginId=L.LoginId
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Service_GetServiceBySearch]    Script Date: 07/13/2012 18:11:08 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Service_GetServiceBySearch]
(
	@Search NVARCHAR(250),
	@OrganizationId INT
)
AS
SELECT 
	S.ServiceId,
	S.ServiceName,
	S.Units,
	MD.DepartmentName [Department]
FROM
	TBL_Service S,
	TBL_Master_Department MD
WHERE
S.OrganizationId=@OrganizationId AND
S.DepartmentId=MD.DepartmentId AND
S.IsDeleted=0 AND
(
	S.ServiceName LIKE '%' + @Search + '%' OR
	MD.DepartmentName LIKE '%' + @Search + '%'
)
ORDER BY S.ServiceName
GO

/****** Object:  StoredProcedure [dbo].[USP_Service_GetServiceNameById]    Script Date: 07/13/2012 18:11:08 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Service_GetServiceNameById]
(
	@ServiceId INT
)
AS
SELECT 
	S.ServiceName
FROM
	TBL_Service S
WHERE
S.ServiceId=@ServiceId
GO

/****** Object:  StoredProcedure [dbo].[USP_Service_InsertSchedule]    Script Date: 07/13/2012 18:11:08 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Service_InsertSchedule]   
(
	@ServiceTimingId INT,
	@ServiceId INT,
	@ScheduleName NVARCHAR(1000),
	@Address NVARCHAR(1000),
	@Sunday BIT,
	@Monday BIT,
	@Tuesday BIT,
	@Wednesday BIT,
	@Thursday BIT,
	@Friday BIT,
	@Saturday BIT,
	@StartTime NVARCHAR(15),
	@EndTime NVARCHAR(15),
	@PatientDuration INT,
	@IsApprovalSystem BIT,
	@IsApprovalNotificationSMS BIT,
	@IsApprovalNotificationEmail BIT,
	@MaxAppointmentDays INT,
	@IsDefaultAddress BIT,
	@IsCarParkFacility BIT,
	@IsFCFS BIT,
	@MaxApps INT,
	@AppointmentType INT,
	@Conditions NVARCHAR(MAX)
)
AS
BEGIN
	IF @ServiceTimingId = 0
	BEGIN
		INSERT INTO TBL_Service_Timing
		(ServiceId, ScheduleName, Address, Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, StartTime, EndTime, PatientDuration, IsApprovalSystem, IsApprovalNotificationSMS, IsApprovalNotificationEmail, MaxAppointmentDays, IsFCFS, MaxApps, AppointmentType, Conditions, IsDefaultAddress, IsCarParkFacility, CreatedOn, IsDeleted) VALUES
		(@ServiceId, @ScheduleName, @Address, @Sunday, @Monday, @Tuesday, @Wednesday, @Thursday, @Friday, @Saturday, @StartTime, @EndTime, @PatientDuration, @IsApprovalSystem, @IsApprovalNotificationSMS, @IsApprovalNotificationEmail, @MaxAppointmentDays, @IsFCFS, @MaxApps, @AppointmentType, @Conditions, @IsDefaultAddress, @IsCarParkFacility, GETDATE(), 0)
	END
	ELSE
	BEGIN
		UPDATE TBL_Service_Timing SET
			ScheduleName=@ScheduleName,
			Address=@Address,
			Sunday=@Sunday,
			Monday=@Monday,
			Tuesday=@Tuesday,
			Wednesday=@Wednesday,
			Thursday=@Thursday,
			Friday=@Friday,
			Saturday=@Saturday,
			StartTime=@StartTime,
			EndTime=@EndTime,
			PatientDuration=@PatientDuration,
			IsApprovalSystem=@IsApprovalSystem,
			IsApprovalNotificationSMS=@IsApprovalNotificationSMS,
			IsApprovalNotificationEmail=@IsApprovalNotificationEmail,
			MaxAppointmentDays=@MaxAppointmentDays,
			IsFCFS=@IsFCFS,
			MaxApps=@MaxApps,	
			AppointmentType=@AppointmentType,
			Conditions=@Conditions,
			IsDefaultAddress = @IsDefaultAddress,
			IsCarParkFacility=@IsCarParkFacility,
			ModifiedOn=GETDATE()
		WHERE
			ServiceTimingId=@ServiceTimingId
	END
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Service_InsertService]    Script Date: 07/13/2012 18:11:08 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Service_InsertService]
(
	@ServiceId INT,
	@OrganizationId INT,
	@ServiceName NVARCHAR(250),
	@InCharge NVARCHAR(250),
	@DepartmentId INT,
	@Units INT,
	@Mobile NVARCHAR(20),
	@EmailId NVARCHAR(250),
	@Password NVARCHAR(15),
	@TransactionToken NVARCHAR(250),
	@ReferenceToken NVARCHAR(10),
	@CountryId INT,
	@IsActivated BIT
)
AS
BEGIN
	DECLARE @NewLoginId INT
	DECLARE @MedAppId  NVARCHAR(20)

	DECLARE @NewServiceId INT
	DECLARE @AccountEmailExist INT
	DECLARE @AccountMobileExist INT
	
	IF @ServiceId = 0
	BEGIN
		SELECT @AccountEmailExist=COUNT(LoginId) FROM TBL_Login WHERE EmailId=@EmailId AND IsDeleted = 0 AND IsActivated=1 AND MobileId=@Mobile
		
		SELECT @AccountMobileExist=COUNT(LoginId) FROM TBL_Login WHERE MobileId=@Mobile AND IsDeleted = 0 AND IsActivated=1 AND IsDirect=1

		IF (@AccountEmailExist = 0 AND @AccountMobileExist = 0)
		BEGIN
			INSERT INTO TBL_Login
			(FirstName, MedAppId, CountryId, MobileId, EmailId, Password, IsDirect, IsActivated, IsEmailActivated, IsEmailNotification, IsSMSNotification, TransactionToken, CreatedOn, IsDeleted) VALUES
			(@InCharge, NULL, @CountryId, @Mobile, @EmailId, @Password, 0, 1, 0, 0, 1, @TransactionToken, GETDATE(), 0)
			
			SET @NewLoginId = @@IDENTITY

			SET @MedAppId = 'MED-' + CONVERT(NVARCHAR, @NewLoginId) 
		
			UPDATE TBL_Login SET MedAppId=@MedAppId WHERE LoginId=@NewLoginId
		END
		ELSE
			IF(@AccountMobileExist = 1 AND @AccountEmailExist = 0)
			BEGIN
				UPDATE TBL_Login SET CountryId=@CountryId, 
									 EmailId=@EmailId, 
									 Password=@Password,
									 IsDirect=0,
									 IsEmailActivated=0,
									 TransactionToken=@TransactionToken,
									 IsEmailNotification=0,
									 IsSMSNotification=1,
									 ModifiedOn=GETDATE() 
								WHERE MobileId=@Mobile AND IsDeleted = 0 AND IsActivated=1 AND IsDirect=1
								
				 SET @NewLoginId = (SELECT LoginId FROM TBL_Login WHERE MobileId=@Mobile AND IsDeleted = 0 AND IsActivated=1)
			END
			ELSE
				IF(@AccountEmailExist = 1 AND @AccountMobileExist = 0)
				BEGIN
				UPDATE TBL_Login SET CountryId=@CountryId, 
									 EmailId=@EmailId, 
									 Password=@Password,
									 IsDirect=0,
									 IsEmailActivated=0,
									 TransactionToken=@TransactionToken,
									 IsEmailNotification=0,
									 IsSMSNotification=1,
									 ModifiedOn=GETDATE() 
								WHERE MobileId=@Mobile AND IsDeleted = 0 AND IsActivated=1 AND IsDirect=1
								
				 SET @NewLoginId = (SELECT LoginId FROM TBL_Login WHERE MobileId=@Mobile AND IsDeleted = 0 AND IsActivated=1)
			END
			ELSE
			BEGIN
				SELECT @NewLoginId=LoginId FROM TBL_Login WHERE EmailId=@EmailId AND IsDeleted=0 AND IsActivated=1
			END

		INSERT INTO TBL_Service
		(LoginId, OrganizationId, ServiceName, InCharge, DepartmentId, Units, Mobile, CreatedOn, ReferenceToken, IsActivated, IsDeleted) VALUES
		(@NewLoginId, @OrganizationId, @ServiceName, @InCharge, @DepartmentId, @Units, @Mobile, GETDATE(), @ReferenceToken, @IsActivated, 0)

		SET @NewServiceId = @@IDENTITY
		
		INSERT INTO TBL_Service_Diagnosis (DiagnosisId, ServiceId)
			SELECT DISTINCT DiagnosisId, @NewServiceId FROM TBL_Diagnosis_Department WHERE DepartmentId=@DepartmentId
	END
	ELSE
	BEGIN
		UPDATE TBL_Service SET
			ServiceName=@ServiceName,
			InCharge=@InCharge,
			DepartmentId=@DepartmentId,
			Units=@Units,
			Mobile=@Mobile,
			ModifiedOn=GETDATE()
		WHERE
			ServiceId=@ServiceId
			
		SELECT @ServiceId
	END
END
GO

/****** Object:  StoredProcedure [dbo].[USP_Service_UpdateAcceptance]    Script Date: 07/13/2012 18:11:09 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_Service_UpdateAcceptance]
(
	@ServiceId INT
)
AS
BEGIN
	UPDATE TBL_Service SET IsActivated=1 WHERE ServiceId=@ServiceId
END
GO

/****** Object:  StoredProcedure [dbo].[USP_WinService_GetPreferredNames]    Script Date: 07/13/2012 18:11:09 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[USP_WinService_GetPreferredNames]
AS
SELECT DISTINCT PreferredName FROM TBL_Doctor WHERE PreferredName IS NOT NULL AND PreferredName!=''

GO
